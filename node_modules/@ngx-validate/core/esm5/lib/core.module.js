/**
 * @fileoverview added by tsickle
 * Generated from: lib/core.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { AbstractValidationDirective } from './abstracts/abstract-validation.directive';
import { ValidationErrorComponent } from './components/validation-error.component';
import { BLUEPRINTS } from './constants/blueprints';
import { ValidationContainerDirective } from './directives/validation-container.directive';
import { ValidationGroupDirective } from './directives/validation-group.directive';
import { ValidationStyleDirective } from './directives/validation-style.directive';
import { ValidationTargetDirective } from './directives/validation-target.directive';
import { ValidationDirective } from './directives/validation.directive';
import { VALIDATION_BLUEPRINTS } from './tokens/blueprints.token';
import { VALIDATION_ERROR_TEMPLATE } from './tokens/error-template.token';
import { VALIDATION_INVALID_CLASSES } from './tokens/invalid-classes.token';
import { VALIDATION_MAP_ERRORS_FN } from './tokens/map-errors-fn.token';
import { VALIDATION_TARGET_SELECTOR } from './tokens/target-selector.token';
import { VALIDATION_VALIDATE_ON_SUBMIT } from './tokens/validate-on-submit.token';
import { defaultMapErrorsFn } from './utils/mappers';
var NgxValidateCoreModule = /** @class */ (function () {
    function NgxValidateCoreModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    NgxValidateCoreModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        if (config === void 0) { config = (/** @type {?} */ ({})); }
        return {
            ngModule: NgxValidateCoreModule,
            providers: [
                {
                    provide: VALIDATION_BLUEPRINTS,
                    useValue: config.blueprints || BLUEPRINTS,
                },
                {
                    provide: VALIDATION_ERROR_TEMPLATE,
                    useValue: config.errorTemplate || ValidationErrorComponent,
                },
                {
                    provide: VALIDATION_INVALID_CLASSES,
                    useValue: config.invalidClasses || 'is-invalid',
                },
                {
                    provide: VALIDATION_MAP_ERRORS_FN,
                    useValue: config.mapErrorsFn || defaultMapErrorsFn,
                },
                {
                    provide: VALIDATION_TARGET_SELECTOR,
                    useValue: config.targetSelector,
                },
                {
                    provide: VALIDATION_VALIDATE_ON_SUBMIT,
                    useValue: config.validateOnSubmit,
                },
            ],
        };
    };
    NgxValidateCoreModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, FormsModule, ReactiveFormsModule],
                    exports: [
                        ValidationContainerDirective,
                        ValidationGroupDirective,
                        ValidationStyleDirective,
                        ValidationTargetDirective,
                        ValidationDirective,
                    ],
                    declarations: [
                        ValidationErrorComponent,
                        AbstractValidationDirective,
                        ValidationContainerDirective,
                        ValidationGroupDirective,
                        ValidationStyleDirective,
                        ValidationTargetDirective,
                        ValidationDirective,
                    ],
                    entryComponents: [ValidationErrorComponent],
                },] }
    ];
    return NgxValidateCoreModule;
}());
export { NgxValidateCoreModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXZhbGlkYXRlL2NvcmUvIiwic291cmNlcyI6WyJsaWIvY29yZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUMzRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNuRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNuRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUNyRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUV4RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMxRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNsRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVyRDtJQUFBO0lBb0RBLENBQUM7Ozs7O0lBL0JRLDZCQUFPOzs7O0lBQWQsVUFBZSxNQUFnQztRQUFoQyx1QkFBQSxFQUFBLDRCQUFTLEVBQUUsRUFBcUI7UUFDN0MsT0FBTztZQUNMLFFBQVEsRUFBRSxxQkFBcUI7WUFDL0IsU0FBUyxFQUFFO2dCQUNUO29CQUNFLE9BQU8sRUFBRSxxQkFBcUI7b0JBQzlCLFFBQVEsRUFBRSxNQUFNLENBQUMsVUFBVSxJQUFJLFVBQVU7aUJBQzFDO2dCQUNEO29CQUNFLE9BQU8sRUFBRSx5QkFBeUI7b0JBQ2xDLFFBQVEsRUFBRSxNQUFNLENBQUMsYUFBYSxJQUFJLHdCQUF3QjtpQkFDM0Q7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLDBCQUEwQjtvQkFDbkMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxjQUFjLElBQUksWUFBWTtpQkFDaEQ7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLHdCQUF3QjtvQkFDakMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxXQUFXLElBQUksa0JBQWtCO2lCQUNuRDtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsMEJBQTBCO29CQUNuQyxRQUFRLEVBQUUsTUFBTSxDQUFDLGNBQWM7aUJBQ2hDO2dCQUNEO29CQUNFLE9BQU8sRUFBRSw2QkFBNkI7b0JBQ3RDLFFBQVEsRUFBRSxNQUFNLENBQUMsZ0JBQWdCO2lCQUNsQzthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUM7O2dCQW5ERixRQUFRLFNBQUM7b0JBQ1IsT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsQ0FBQztvQkFDekQsT0FBTyxFQUFFO3dCQUNQLDRCQUE0Qjt3QkFDNUIsd0JBQXdCO3dCQUN4Qix3QkFBd0I7d0JBQ3hCLHlCQUF5Qjt3QkFDekIsbUJBQW1CO3FCQUNwQjtvQkFDRCxZQUFZLEVBQUU7d0JBQ1osd0JBQXdCO3dCQUN4QiwyQkFBMkI7d0JBQzNCLDRCQUE0Qjt3QkFDNUIsd0JBQXdCO3dCQUN4Qix3QkFBd0I7d0JBQ3hCLHlCQUF5Qjt3QkFDekIsbUJBQW1CO3FCQUNwQjtvQkFDRCxlQUFlLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQztpQkFDNUM7O0lBaUNELDRCQUFDO0NBQUEsQUFwREQsSUFvREM7U0FoQ1kscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSwgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEFic3RyYWN0VmFsaWRhdGlvbkRpcmVjdGl2ZSB9IGZyb20gJy4vYWJzdHJhY3RzL2Fic3RyYWN0LXZhbGlkYXRpb24uZGlyZWN0aXZlJztcbmltcG9ydCB7IFZhbGlkYXRpb25FcnJvckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy92YWxpZGF0aW9uLWVycm9yLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBCTFVFUFJJTlRTIH0gZnJvbSAnLi9jb25zdGFudHMvYmx1ZXByaW50cyc7XG5pbXBvcnQgeyBWYWxpZGF0aW9uQ29udGFpbmVyRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL3ZhbGlkYXRpb24tY29udGFpbmVyLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBWYWxpZGF0aW9uR3JvdXBEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvdmFsaWRhdGlvbi1ncm91cC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVmFsaWRhdGlvblN0eWxlRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL3ZhbGlkYXRpb24tc3R5bGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IFZhbGlkYXRpb25UYXJnZXREaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvdmFsaWRhdGlvbi10YXJnZXQuZGlyZWN0aXZlJztcbmltcG9ydCB7IFZhbGlkYXRpb25EaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvdmFsaWRhdGlvbi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVmFsaWRhdGlvbiB9IGZyb20gJy4vbW9kZWxzL3ZhbGlkYXRpb24ubW9kZWwnO1xuaW1wb3J0IHsgVkFMSURBVElPTl9CTFVFUFJJTlRTIH0gZnJvbSAnLi90b2tlbnMvYmx1ZXByaW50cy50b2tlbic7XG5pbXBvcnQgeyBWQUxJREFUSU9OX0VSUk9SX1RFTVBMQVRFIH0gZnJvbSAnLi90b2tlbnMvZXJyb3ItdGVtcGxhdGUudG9rZW4nO1xuaW1wb3J0IHsgVkFMSURBVElPTl9JTlZBTElEX0NMQVNTRVMgfSBmcm9tICcuL3Rva2Vucy9pbnZhbGlkLWNsYXNzZXMudG9rZW4nO1xuaW1wb3J0IHsgVkFMSURBVElPTl9NQVBfRVJST1JTX0ZOIH0gZnJvbSAnLi90b2tlbnMvbWFwLWVycm9ycy1mbi50b2tlbic7XG5pbXBvcnQgeyBWQUxJREFUSU9OX1RBUkdFVF9TRUxFQ1RPUiB9IGZyb20gJy4vdG9rZW5zL3RhcmdldC1zZWxlY3Rvci50b2tlbic7XG5pbXBvcnQgeyBWQUxJREFUSU9OX1ZBTElEQVRFX09OX1NVQk1JVCB9IGZyb20gJy4vdG9rZW5zL3ZhbGlkYXRlLW9uLXN1Ym1pdC50b2tlbic7XG5pbXBvcnQgeyBkZWZhdWx0TWFwRXJyb3JzRm4gfSBmcm9tICcuL3V0aWxzL21hcHBlcnMnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBGb3Jtc01vZHVsZSwgUmVhY3RpdmVGb3Jtc01vZHVsZV0sXG4gIGV4cG9ydHM6IFtcbiAgICBWYWxpZGF0aW9uQ29udGFpbmVyRGlyZWN0aXZlLFxuICAgIFZhbGlkYXRpb25Hcm91cERpcmVjdGl2ZSxcbiAgICBWYWxpZGF0aW9uU3R5bGVEaXJlY3RpdmUsXG4gICAgVmFsaWRhdGlvblRhcmdldERpcmVjdGl2ZSxcbiAgICBWYWxpZGF0aW9uRGlyZWN0aXZlLFxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBWYWxpZGF0aW9uRXJyb3JDb21wb25lbnQsXG4gICAgQWJzdHJhY3RWYWxpZGF0aW9uRGlyZWN0aXZlLFxuICAgIFZhbGlkYXRpb25Db250YWluZXJEaXJlY3RpdmUsXG4gICAgVmFsaWRhdGlvbkdyb3VwRGlyZWN0aXZlLFxuICAgIFZhbGlkYXRpb25TdHlsZURpcmVjdGl2ZSxcbiAgICBWYWxpZGF0aW9uVGFyZ2V0RGlyZWN0aXZlLFxuICAgIFZhbGlkYXRpb25EaXJlY3RpdmUsXG4gIF0sXG4gIGVudHJ5Q29tcG9uZW50czogW1ZhbGlkYXRpb25FcnJvckNvbXBvbmVudF0sXG59KVxuZXhwb3J0IGNsYXNzIE5neFZhbGlkYXRlQ29yZU1vZHVsZSB7XG4gIHN0YXRpYyBmb3JSb290KGNvbmZpZyA9IHt9IGFzIFZhbGlkYXRpb24uQ29uZmlnKTogTW9kdWxlV2l0aFByb3ZpZGVyczxOZ3hWYWxpZGF0ZUNvcmVNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE5neFZhbGlkYXRlQ29yZU1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogVkFMSURBVElPTl9CTFVFUFJJTlRTLFxuICAgICAgICAgIHVzZVZhbHVlOiBjb25maWcuYmx1ZXByaW50cyB8fCBCTFVFUFJJTlRTLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogVkFMSURBVElPTl9FUlJPUl9URU1QTEFURSxcbiAgICAgICAgICB1c2VWYWx1ZTogY29uZmlnLmVycm9yVGVtcGxhdGUgfHwgVmFsaWRhdGlvbkVycm9yQ29tcG9uZW50LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogVkFMSURBVElPTl9JTlZBTElEX0NMQVNTRVMsXG4gICAgICAgICAgdXNlVmFsdWU6IGNvbmZpZy5pbnZhbGlkQ2xhc3NlcyB8fCAnaXMtaW52YWxpZCcsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBWQUxJREFUSU9OX01BUF9FUlJPUlNfRk4sXG4gICAgICAgICAgdXNlVmFsdWU6IGNvbmZpZy5tYXBFcnJvcnNGbiB8fCBkZWZhdWx0TWFwRXJyb3JzRm4sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBWQUxJREFUSU9OX1RBUkdFVF9TRUxFQ1RPUixcbiAgICAgICAgICB1c2VWYWx1ZTogY29uZmlnLnRhcmdldFNlbGVjdG9yLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogVkFMSURBVElPTl9WQUxJREFURV9PTl9TVUJNSVQsXG4gICAgICAgICAgdXNlVmFsdWU6IGNvbmZpZy52YWxpZGF0ZU9uU3VibWl0LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9XG59XG4iXX0=
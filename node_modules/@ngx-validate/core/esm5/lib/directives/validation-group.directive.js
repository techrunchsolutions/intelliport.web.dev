/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/validation-group.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Directive, Injector, Optional, Self, SkipSelf, } from '@angular/core';
import { FormGroupDirective, FormGroupName } from '@angular/forms';
import { ReplaySubject, Subscription } from 'rxjs';
import { AbstractValidationDirective } from '../abstracts';
var ValidationGroupDirective = /** @class */ (function (_super) {
    tslib_1.__extends(ValidationGroupDirective, _super);
    function ValidationGroupDirective(injector, cdRef, groupName, groupRef, parentRef) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.cdRef = cdRef;
        _this.groupName = groupName;
        _this.groupRef = groupRef;
        _this.parentRef = parentRef;
        _this.status$ = new ReplaySubject(1);
        _this.submit$ = new ReplaySubject(1);
        _this.value$ = new ReplaySubject(1);
        _this.subs = new Subscription();
        return _this;
    }
    /**
     * @private
     * @return {?}
     */
    ValidationGroupDirective.prototype.subscribeToFormSubmit = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        ((/** @type {?} */ (this.elRef.nativeElement))).onsubmit = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (_this.group.invalid)
                event.preventDefault();
            _this.submit$.next(_this.group);
            _this.cdRef.markForCheck();
        });
    };
    /**
     * @private
     * @return {?}
     */
    ValidationGroupDirective.prototype.subscribeToStatusChanges = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.subs.add(this.group.statusChanges.subscribe((/**
         * @return {?}
         */
        function () {
            _this.status$.next(_this.group);
            _this.cdRef.markForCheck();
        })));
    };
    /**
     * @private
     * @return {?}
     */
    ValidationGroupDirective.prototype.subscribeToValueChanges = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.subs.add(this.group.valueChanges.subscribe((/**
         * @return {?}
         */
        function () {
            _this.value$.next(_this.group);
            _this.cdRef.markForCheck();
        })));
    };
    /**
     * @return {?}
     */
    ValidationGroupDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (!this.parentRef)
            this.subscribeToFormSubmit();
        this.subscribeToStatusChanges();
        this.subscribeToValueChanges();
    };
    /**
     * @return {?}
     */
    ValidationGroupDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subs.unsubscribe();
    };
    ValidationGroupDirective.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line */
                    selector: '[formGroup],[formGroupName]',
                    exportAs: 'validationGroup',
                },] }
    ];
    /** @nocollapse */
    ValidationGroupDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: ChangeDetectorRef },
        { type: FormGroupName, decorators: [{ type: Optional }, { type: Self }] },
        { type: FormGroupDirective, decorators: [{ type: Optional }, { type: Self }] },
        { type: ValidationGroupDirective, decorators: [{ type: Optional }, { type: SkipSelf }] }
    ]; };
    return ValidationGroupDirective;
}(AbstractValidationDirective));
export { ValidationGroupDirective };
if (false) {
    /** @type {?} */
    ValidationGroupDirective.prototype.status$;
    /** @type {?} */
    ValidationGroupDirective.prototype.submit$;
    /** @type {?} */
    ValidationGroupDirective.prototype.value$;
    /**
     * @type {?}
     * @private
     */
    ValidationGroupDirective.prototype.subs;
    /** @type {?} */
    ValidationGroupDirective.prototype.injector;
    /** @type {?} */
    ValidationGroupDirective.prototype.cdRef;
    /** @type {?} */
    ValidationGroupDirective.prototype.groupName;
    /** @type {?} */
    ValidationGroupDirective.prototype.groupRef;
    /** @type {?} */
    ValidationGroupDirective.prototype.parentRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi1ncm91cC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXZhbGlkYXRlL2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy92YWxpZGF0aW9uLWdyb3VwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBRUwsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxRQUFRLEVBRVIsUUFBUSxFQUNSLElBQUksRUFDSixRQUFRLEdBQ1QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFhLGtCQUFrQixFQUFFLGFBQWEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlFLE9BQU8sRUFBRSxhQUFhLEVBQUUsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ25ELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUUzRDtJQUs4QyxvREFBMkI7SUFRdkUsa0NBQ1MsUUFBa0IsRUFDbEIsS0FBd0IsRUFHeEIsU0FBd0IsRUFHeEIsUUFBNEIsRUFHNUIsU0FBbUM7UUFYNUMsWUFhRSxrQkFBTSxRQUFRLENBQUMsU0FDaEI7UUFiUSxjQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLFdBQUssR0FBTCxLQUFLLENBQW1CO1FBR3hCLGVBQVMsR0FBVCxTQUFTLENBQWU7UUFHeEIsY0FBUSxHQUFSLFFBQVEsQ0FBb0I7UUFHNUIsZUFBUyxHQUFULFNBQVMsQ0FBMEI7UUFqQjVDLGFBQU8sR0FBRyxJQUFJLGFBQWEsQ0FBWSxDQUFDLENBQUMsQ0FBQztRQUMxQyxhQUFPLEdBQUcsSUFBSSxhQUFhLENBQVksQ0FBQyxDQUFDLENBQUM7UUFDMUMsWUFBTSxHQUFHLElBQUksYUFBYSxDQUFZLENBQUMsQ0FBQyxDQUFDO1FBRWpDLFVBQUksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDOztJQWdCbEMsQ0FBQzs7Ozs7SUFFTyx3REFBcUI7Ozs7SUFBN0I7UUFBQSxpQkFNQztRQUxDLENBQUMsbUJBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQW1CLENBQUMsQ0FBQyxRQUFROzs7O1FBQUcsVUFBQSxLQUFLO1lBQzVELElBQUksS0FBSSxDQUFDLEtBQUssQ0FBQyxPQUFPO2dCQUFFLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUMvQyxLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDOUIsS0FBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUM1QixDQUFDLENBQUEsQ0FBQztJQUNKLENBQUM7Ozs7O0lBRU8sMkRBQXdCOzs7O0lBQWhDO1FBQUEsaUJBT0M7UUFOQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FDWCxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxTQUFTOzs7UUFBQztZQUNqQyxLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDOUIsS0FBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUM1QixDQUFDLEVBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7Ozs7SUFFTywwREFBdUI7Ozs7SUFBL0I7UUFBQSxpQkFPQztRQU5DLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUNYLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLFNBQVM7OztRQUFDO1lBQ2hDLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM3QixLQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzVCLENBQUMsRUFBQyxDQUNILENBQUM7SUFDSixDQUFDOzs7O0lBRUQsa0RBQWU7OztJQUFmO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTO1lBQUUsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDbEQsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7SUFDakMsQ0FBQzs7OztJQUVELDhDQUFXOzs7SUFBWDtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDMUIsQ0FBQzs7Z0JBL0RGLFNBQVMsU0FBQzs7b0JBRVQsUUFBUSxFQUFFLDZCQUE2QjtvQkFDdkMsUUFBUSxFQUFFLGlCQUFpQjtpQkFDNUI7Ozs7Z0JBZEMsUUFBUTtnQkFGUixpQkFBaUI7Z0JBUXFCLGFBQWEsdUJBb0JoRCxRQUFRLFlBQ1IsSUFBSTtnQkFyQlcsa0JBQWtCLHVCQXVCakMsUUFBUSxZQUNSLElBQUk7Z0JBSWEsd0JBQXdCLHVCQUZ6QyxRQUFRLFlBQ1IsUUFBUTs7SUF5Q2IsK0JBQUM7Q0FBQSxBQWhFRCxDQUs4QywyQkFBMkIsR0EyRHhFO1NBM0RZLHdCQUF3Qjs7O0lBRW5DLDJDQUEwQzs7SUFDMUMsMkNBQTBDOztJQUMxQywwQ0FBeUM7Ozs7O0lBRXpDLHdDQUFrQzs7SUFHaEMsNENBQXlCOztJQUN6Qix5Q0FBK0I7O0lBQy9CLDZDQUUrQjs7SUFDL0IsNENBRW1DOztJQUNuQyw2Q0FFMEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgRGlyZWN0aXZlLFxuICBJbmplY3RvcixcbiAgT25EZXN0cm95LFxuICBPcHRpb25hbCxcbiAgU2VsZixcbiAgU2tpcFNlbGYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwLCBGb3JtR3JvdXBEaXJlY3RpdmUsIEZvcm1Hcm91cE5hbWUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBSZXBsYXlTdWJqZWN0LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFic3RyYWN0VmFsaWRhdGlvbkRpcmVjdGl2ZSB9IGZyb20gJy4uL2Fic3RyYWN0cyc7XG5cbkBEaXJlY3RpdmUoe1xuICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmUgKi9cbiAgc2VsZWN0b3I6ICdbZm9ybUdyb3VwXSxbZm9ybUdyb3VwTmFtZV0nLFxuICBleHBvcnRBczogJ3ZhbGlkYXRpb25Hcm91cCcsXG59KVxuZXhwb3J0IGNsYXNzIFZhbGlkYXRpb25Hcm91cERpcmVjdGl2ZSBleHRlbmRzIEFic3RyYWN0VmFsaWRhdGlvbkRpcmVjdGl2ZVxuICBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gIHN0YXR1cyQgPSBuZXcgUmVwbGF5U3ViamVjdDxGb3JtR3JvdXA+KDEpO1xuICBzdWJtaXQkID0gbmV3IFJlcGxheVN1YmplY3Q8Rm9ybUdyb3VwPigxKTtcbiAgdmFsdWUkID0gbmV3IFJlcGxheVN1YmplY3Q8Rm9ybUdyb3VwPigxKTtcblxuICBwcml2YXRlIHN1YnMgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGluamVjdG9yOiBJbmplY3RvcixcbiAgICBwdWJsaWMgY2RSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIEBPcHRpb25hbCgpXG4gICAgQFNlbGYoKVxuICAgIHB1YmxpYyBncm91cE5hbWU6IEZvcm1Hcm91cE5hbWUsXG4gICAgQE9wdGlvbmFsKClcbiAgICBAU2VsZigpXG4gICAgcHVibGljIGdyb3VwUmVmOiBGb3JtR3JvdXBEaXJlY3RpdmUsXG4gICAgQE9wdGlvbmFsKClcbiAgICBAU2tpcFNlbGYoKVxuICAgIHB1YmxpYyBwYXJlbnRSZWY6IFZhbGlkYXRpb25Hcm91cERpcmVjdGl2ZSxcbiAgKSB7XG4gICAgc3VwZXIoaW5qZWN0b3IpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdWJzY3JpYmVUb0Zvcm1TdWJtaXQoKSB7XG4gICAgKHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudCBhcyBIVE1MRm9ybUVsZW1lbnQpLm9uc3VibWl0ID0gZXZlbnQgPT4ge1xuICAgICAgaWYgKHRoaXMuZ3JvdXAuaW52YWxpZCkgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuc3VibWl0JC5uZXh0KHRoaXMuZ3JvdXApO1xuICAgICAgdGhpcy5jZFJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBzdWJzY3JpYmVUb1N0YXR1c0NoYW5nZXMoKSB7XG4gICAgdGhpcy5zdWJzLmFkZChcbiAgICAgIHRoaXMuZ3JvdXAuc3RhdHVzQ2hhbmdlcy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICB0aGlzLnN0YXR1cyQubmV4dCh0aGlzLmdyb3VwKTtcbiAgICAgICAgdGhpcy5jZFJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHN1YnNjcmliZVRvVmFsdWVDaGFuZ2VzKCkge1xuICAgIHRoaXMuc3Vicy5hZGQoXG4gICAgICB0aGlzLmdyb3VwLnZhbHVlQ2hhbmdlcy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICB0aGlzLnZhbHVlJC5uZXh0KHRoaXMuZ3JvdXApO1xuICAgICAgICB0aGlzLmNkUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgICAgfSksXG4gICAgKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBpZiAoIXRoaXMucGFyZW50UmVmKSB0aGlzLnN1YnNjcmliZVRvRm9ybVN1Ym1pdCgpO1xuICAgIHRoaXMuc3Vic2NyaWJlVG9TdGF0dXNDaGFuZ2VzKCk7XG4gICAgdGhpcy5zdWJzY3JpYmVUb1ZhbHVlQ2hhbmdlcygpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5zdWJzLnVuc3Vic2NyaWJlKCk7XG4gIH1cbn1cbiJdfQ==
/**
 * @fileoverview added by tsickle
 * Generated from: lib/validators/password-validators.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { addCommas, normalizeDiacritics } from '../utils';
/**
 * @param {?} __0
 * @return {?}
 */
export function comparePasswords(_a) {
    var _b = tslib_1.__read(_a, 2), controlName1 = _b[0], controlName2 = _b[1];
    return (/**
     * @param {?} group
     * @return {?}
     */
    function (group) {
        /** @type {?} */
        var password = group.get(controlName1).value;
        /** @type {?} */
        var repeat = group.get(controlName2).value;
        return !password || !repeat || password === repeat
            ? null
            : {
                passwordMismatch: {
                    fields: [controlName1, controlName2],
                },
            };
    });
}
/**
 * @param {?=} shouldContain
 * @return {?}
 */
export function validatePassword(shouldContain) {
    if (shouldContain === void 0) { shouldContain = ['small', 'capital', 'number', 'special']; }
    return (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        if (!control.value)
            return null;
        /** @type {?} */
        var value = normalizeDiacritics(control.value);
        /** @type {?} */
        var regex = {
            small: /.*[a-z].*/,
            capital: /.*[A-Z].*/,
            number: /.*[0-9].*/,
            special: /.*[^0-9a-zA-Z].*/,
        };
        /** @type {?} */
        var missing = shouldContain.filter((/**
         * @param {?} key
         * @return {?}
         */
        function (key) { return !regex[key].test(value); }));
        return missing.length
            ? {
                invalidPassword: {
                    missing: missing,
                    description: addCommas(missing.map((/**
                     * @param {?} key
                     * @return {?}
                     */
                    function (key) {
                        return ({
                            small: 'a small letter',
                            capital: 'a capital',
                            number: 'a number',
                            special: 'a special character',
                        }[key]);
                    }))),
                },
            }
            : null;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtdmFsaWRhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtdmFsaWRhdGUvY29yZS8iLCJzb3VyY2VzIjpbImxpYi92YWxpZGF0b3JzL3Bhc3N3b3JkLXZhbGlkYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLFVBQVUsQ0FBQzs7Ozs7QUFFMUQsTUFBTSxVQUFVLGdCQUFnQixDQUFDLEVBQXNDO1FBQXRDLDBCQUFzQyxFQUFyQyxvQkFBWSxFQUFFLG9CQUFZO0lBQzFEOzs7O0lBQU8sVUFBQyxLQUFnQjs7WUFDaEIsUUFBUSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsS0FBSzs7WUFDeEMsTUFBTSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsS0FBSztRQUU1QyxPQUFPLENBQUMsUUFBUSxJQUFJLENBQUMsTUFBTSxJQUFJLFFBQVEsS0FBSyxNQUFNO1lBQ2hELENBQUMsQ0FBQyxJQUFJO1lBQ04sQ0FBQyxDQUFDO2dCQUNFLGdCQUFnQixFQUFFO29CQUNoQixNQUFNLEVBQUUsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDO2lCQUNyQzthQUNGLENBQUM7SUFDUixDQUFDLEVBQUM7QUFDSixDQUFDOzs7OztBQUlELE1BQU0sVUFBVSxnQkFBZ0IsQ0FDOUIsYUFBd0U7SUFBeEUsOEJBQUEsRUFBQSxpQkFBZ0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDO0lBRXhFOzs7O0lBQU8sVUFBQyxPQUF3QjtRQUM5QixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUs7WUFBRSxPQUFPLElBQUksQ0FBQzs7WUFFMUIsS0FBSyxHQUFHLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7O1lBRTFDLEtBQUssR0FBRztZQUNaLEtBQUssRUFBRSxXQUFXO1lBQ2xCLE9BQU8sRUFBRSxXQUFXO1lBQ3BCLE1BQU0sRUFBRSxXQUFXO1lBQ25CLE9BQU8sRUFBRSxrQkFBa0I7U0FDNUI7O1lBRUssT0FBTyxHQUFhLGFBQWEsQ0FBQyxNQUFNOzs7O1FBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQXZCLENBQXVCLEVBQUM7UUFFOUUsT0FBTyxPQUFPLENBQUMsTUFBTTtZQUNuQixDQUFDLENBQUM7Z0JBQ0UsZUFBZSxFQUFFO29CQUNmLE9BQU8sU0FBQTtvQkFDUCxXQUFXLEVBQUUsU0FBUyxDQUNwQixPQUFPLENBQUMsR0FBRzs7OztvQkFDVCxVQUFBLEdBQUc7d0JBQ0QsT0FBQSxDQUFDOzRCQUNDLEtBQUssRUFBRSxnQkFBZ0I7NEJBQ3ZCLE9BQU8sRUFBRSxXQUFXOzRCQUNwQixNQUFNLEVBQUUsVUFBVTs0QkFDbEIsT0FBTyxFQUFFLHFCQUFxQjt5QkFDL0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFMUCxDQUtPLEVBQ1YsQ0FDRjtpQkFDRjthQUNGO1lBQ0gsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNYLENBQUMsRUFBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIEZvcm1Hcm91cCwgVmFsaWRhdG9yRm4gfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBhZGRDb21tYXMsIG5vcm1hbGl6ZURpYWNyaXRpY3MgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlUGFzc3dvcmRzKFtjb250cm9sTmFtZTEsIGNvbnRyb2xOYW1lMl06IHN0cmluZ1tdKTogVmFsaWRhdG9yRm4ge1xuICByZXR1cm4gKGdyb3VwOiBGb3JtR3JvdXApID0+IHtcbiAgICBjb25zdCBwYXNzd29yZCA9IGdyb3VwLmdldChjb250cm9sTmFtZTEpLnZhbHVlO1xuICAgIGNvbnN0IHJlcGVhdCA9IGdyb3VwLmdldChjb250cm9sTmFtZTIpLnZhbHVlO1xuXG4gICAgcmV0dXJuICFwYXNzd29yZCB8fCAhcmVwZWF0IHx8IHBhc3N3b3JkID09PSByZXBlYXRcbiAgICAgID8gbnVsbFxuICAgICAgOiB7XG4gICAgICAgICAgcGFzc3dvcmRNaXNtYXRjaDoge1xuICAgICAgICAgICAgZmllbGRzOiBbY29udHJvbE5hbWUxLCBjb250cm9sTmFtZTJdLFxuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCB0eXBlIFBhc3N3b3JkUnVsZXMgPSBBcnJheTwnc21hbGwnIHwgJ2NhcGl0YWwnIHwgJ251bWJlcicgfCAnc3BlY2lhbCc+O1xuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVQYXNzd29yZChcbiAgc2hvdWxkQ29udGFpbjogUGFzc3dvcmRSdWxlcyA9IFsnc21hbGwnLCAnY2FwaXRhbCcsICdudW1iZXInLCAnc3BlY2lhbCddLFxuKTogVmFsaWRhdG9yRm4ge1xuICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCkgPT4ge1xuICAgIGlmICghY29udHJvbC52YWx1ZSkgcmV0dXJuIG51bGw7XG5cbiAgICBjb25zdCB2YWx1ZSA9IG5vcm1hbGl6ZURpYWNyaXRpY3MoY29udHJvbC52YWx1ZSk7XG5cbiAgICBjb25zdCByZWdleCA9IHtcbiAgICAgIHNtYWxsOiAvLipbYS16XS4qLyxcbiAgICAgIGNhcGl0YWw6IC8uKltBLVpdLiovLFxuICAgICAgbnVtYmVyOiAvLipbMC05XS4qLyxcbiAgICAgIHNwZWNpYWw6IC8uKlteMC05YS16QS1aXS4qLyxcbiAgICB9O1xuXG4gICAgY29uc3QgbWlzc2luZzogc3RyaW5nW10gPSBzaG91bGRDb250YWluLmZpbHRlcihrZXkgPT4gIXJlZ2V4W2tleV0udGVzdCh2YWx1ZSkpO1xuXG4gICAgcmV0dXJuIG1pc3NpbmcubGVuZ3RoXG4gICAgICA/IHtcbiAgICAgICAgICBpbnZhbGlkUGFzc3dvcmQ6IHtcbiAgICAgICAgICAgIG1pc3NpbmcsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogYWRkQ29tbWFzKFxuICAgICAgICAgICAgICBtaXNzaW5nLm1hcChcbiAgICAgICAgICAgICAgICBrZXkgPT5cbiAgICAgICAgICAgICAgICAgICh7XG4gICAgICAgICAgICAgICAgICAgIHNtYWxsOiAnYSBzbWFsbCBsZXR0ZXInLFxuICAgICAgICAgICAgICAgICAgICBjYXBpdGFsOiAnYSBjYXBpdGFsJyxcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyOiAnYSBudW1iZXInLFxuICAgICAgICAgICAgICAgICAgICBzcGVjaWFsOiAnYSBzcGVjaWFsIGNoYXJhY3RlcicsXG4gICAgICAgICAgICAgICAgICB9W2tleV0pLFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgICA6IG51bGw7XG4gIH07XG59XG4iXX0=
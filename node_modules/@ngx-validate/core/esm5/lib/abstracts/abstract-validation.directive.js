/**
 * @fileoverview added by tsickle
 * Generated from: lib/abstracts/abstract-validation.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, Injector, Input, } from '@angular/core';
import { merge, NEVER } from 'rxjs';
import { BLUEPRINTS } from '../constants';
import { VALIDATION_BLUEPRINTS, VALIDATION_ERROR_TEMPLATE, VALIDATION_INVALID_CLASSES, VALIDATION_MAP_ERRORS_FN, VALIDATION_TARGET_SELECTOR, VALIDATION_VALIDATE_ON_SUBMIT, } from '../tokens';
import { evalPropTruthy } from '../utils';
var AbstractValidationDirective = /** @class */ (function () {
    function AbstractValidationDirective(injector) {
        this.injector = injector;
        this.config = {
            blueprints: injector.get(VALIDATION_BLUEPRINTS),
            errorTemplate: injector.get(VALIDATION_ERROR_TEMPLATE),
            invalidClasses: injector.get(VALIDATION_INVALID_CLASSES),
            mapErrorsFn: injector.get(VALIDATION_MAP_ERRORS_FN),
            targetSelector: injector.get(VALIDATION_TARGET_SELECTOR),
            validateOnSubmit: injector.get(VALIDATION_VALIDATE_ON_SUBMIT),
        };
        this.elRef = injector.get(ElementRef);
    }
    Object.defineProperty(AbstractValidationDirective.prototype, "group", {
        get: /**
         * @return {?}
         */
        function () {
            return ((this.groupRef || ((/** @type {?} */ ({})))).form ||
                (this.groupName || ((/** @type {?} */ ({})))).control);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractValidationDirective.prototype, "parent", {
        get: /**
         * @return {?}
         */
        function () {
            return this.parentRef || { getStream: (/**
                 * @return {?}
                 */
                function () { return null; }) };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractValidationDirective.prototype, "blueprints", {
        get: /**
         * @return {?}
         */
        function () {
            return tslib_1.__assign({}, BLUEPRINTS, (this._blueprints ||
                this.parent.blueprints ||
                this.config.blueprints ||
                {}));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractValidationDirective.prototype, "errorTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return (this._errorTemplate ||
                this.parent.errorTemplate ||
                this.config.errorTemplate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractValidationDirective.prototype, "invalidClasses", {
        get: /**
         * @return {?}
         */
        function () {
            return (this._invalidClasses ||
                this.parent.invalidClasses ||
                this.config.invalidClasses);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractValidationDirective.prototype, "mapErrorsFn", {
        get: /**
         * @return {?}
         */
        function () {
            return (this._mapErrorsFn || this.parent.mapErrorsFn || this.config.mapErrorsFn);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractValidationDirective.prototype, "skipValidation", {
        get: /**
         * @return {?}
         */
        function () {
            return (evalPropTruthy(this._skipValidation) ||
                this.parent.skipValidation ||
                this.config.skipValidation);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractValidationDirective.prototype, "targetSelector", {
        get: /**
         * @return {?}
         */
        function () {
            return (this._targetSelector ||
                this.parent.targetSelector ||
                this.config.targetSelector);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractValidationDirective.prototype, "validateOnSubmit", {
        get: /**
         * @return {?}
         */
        function () {
            return (evalPropTruthy(this._validateOnSubmit) ||
                this.parent.validateOnSubmit ||
                this.config.validateOnSubmit);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} streamName
     * @return {?}
     */
    AbstractValidationDirective.prototype.getStream = /**
     * @param {?} streamName
     * @return {?}
     */
    function (streamName) {
        return merge(this[streamName + '$']
            ? ((/** @type {?} */ (this[streamName + '$']))).asObservable()
            : NEVER, this.parent.getStream(streamName) || NEVER);
    };
    /**
     * @return {?}
     */
    AbstractValidationDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () { };
    AbstractValidationDirective.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line */
                    selector: "abstractValidationDirective"
                },] }
    ];
    /** @nocollapse */
    AbstractValidationDirective.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    AbstractValidationDirective.propDecorators = {
        _blueprints: [{ type: Input, args: ['blueprints',] }],
        _errorTemplate: [{ type: Input, args: ['errorTemplate',] }],
        _invalidClasses: [{ type: Input, args: ['invalidClasses',] }],
        _mapErrorsFn: [{ type: Input, args: ['mapErrorsFn',] }],
        _skipValidation: [{ type: Input, args: ['skipValidation',] }],
        _targetSelector: [{ type: Input, args: ['targetSelector',] }],
        _validateOnSubmit: [{ type: Input, args: ['validateOnSubmit',] }]
    };
    return AbstractValidationDirective;
}());
export { AbstractValidationDirective };
if (false) {
    /** @type {?} */
    AbstractValidationDirective.prototype._blueprints;
    /** @type {?} */
    AbstractValidationDirective.prototype._errorTemplate;
    /** @type {?} */
    AbstractValidationDirective.prototype._invalidClasses;
    /** @type {?} */
    AbstractValidationDirective.prototype._mapErrorsFn;
    /** @type {?} */
    AbstractValidationDirective.prototype._skipValidation;
    /** @type {?} */
    AbstractValidationDirective.prototype._targetSelector;
    /** @type {?} */
    AbstractValidationDirective.prototype._validateOnSubmit;
    /** @type {?} */
    AbstractValidationDirective.prototype.config;
    /** @type {?} */
    AbstractValidationDirective.prototype.elRef;
    /** @type {?} */
    AbstractValidationDirective.prototype.groupName;
    /** @type {?} */
    AbstractValidationDirective.prototype.groupRef;
    /** @type {?} */
    AbstractValidationDirective.prototype.parentRef;
    /** @type {?} */
    AbstractValidationDirective.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,
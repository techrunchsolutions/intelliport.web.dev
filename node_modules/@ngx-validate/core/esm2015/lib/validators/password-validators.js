/**
 * @fileoverview added by tsickle
 * Generated from: lib/validators/password-validators.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { addCommas, normalizeDiacritics } from '../utils';
/**
 * @param {?} __0
 * @return {?}
 */
export function comparePasswords([controlName1, controlName2]) {
    return (/**
     * @param {?} group
     * @return {?}
     */
    (group) => {
        /** @type {?} */
        const password = group.get(controlName1).value;
        /** @type {?} */
        const repeat = group.get(controlName2).value;
        return !password || !repeat || password === repeat
            ? null
            : {
                passwordMismatch: {
                    fields: [controlName1, controlName2],
                },
            };
    });
}
/**
 * @param {?=} shouldContain
 * @return {?}
 */
export function validatePassword(shouldContain = ['small', 'capital', 'number', 'special']) {
    return (/**
     * @param {?} control
     * @return {?}
     */
    (control) => {
        if (!control.value)
            return null;
        /** @type {?} */
        const value = normalizeDiacritics(control.value);
        /** @type {?} */
        const regex = {
            small: /.*[a-z].*/,
            capital: /.*[A-Z].*/,
            number: /.*[0-9].*/,
            special: /.*[^0-9a-zA-Z].*/,
        };
        /** @type {?} */
        const missing = shouldContain.filter((/**
         * @param {?} key
         * @return {?}
         */
        key => !regex[key].test(value)));
        return missing.length
            ? {
                invalidPassword: {
                    missing,
                    description: addCommas(missing.map((/**
                     * @param {?} key
                     * @return {?}
                     */
                    key => ({
                        small: 'a small letter',
                        capital: 'a capital',
                        number: 'a number',
                        special: 'a special character',
                    }[key])))),
                },
            }
            : null;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtdmFsaWRhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtdmFsaWRhdGUvY29yZS8iLCJzb3VyY2VzIjpbImxpYi92YWxpZGF0b3JzL3Bhc3N3b3JkLXZhbGlkYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sVUFBVSxDQUFDOzs7OztBQUUxRCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFXO0lBQ3JFOzs7O0lBQU8sQ0FBQyxLQUFnQixFQUFFLEVBQUU7O2NBQ3BCLFFBQVEsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLEtBQUs7O2NBQ3hDLE1BQU0sR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLEtBQUs7UUFFNUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxDQUFDLE1BQU0sSUFBSSxRQUFRLEtBQUssTUFBTTtZQUNoRCxDQUFDLENBQUMsSUFBSTtZQUNOLENBQUMsQ0FBQztnQkFDRSxnQkFBZ0IsRUFBRTtvQkFDaEIsTUFBTSxFQUFFLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQztpQkFDckM7YUFDRixDQUFDO0lBQ1IsQ0FBQyxFQUFDO0FBQ0osQ0FBQzs7Ozs7QUFJRCxNQUFNLFVBQVUsZ0JBQWdCLENBQzlCLGdCQUErQixDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQztJQUV4RTs7OztJQUFPLENBQUMsT0FBd0IsRUFBRSxFQUFFO1FBQ2xDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSztZQUFFLE9BQU8sSUFBSSxDQUFDOztjQUUxQixLQUFLLEdBQUcsbUJBQW1CLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQzs7Y0FFMUMsS0FBSyxHQUFHO1lBQ1osS0FBSyxFQUFFLFdBQVc7WUFDbEIsT0FBTyxFQUFFLFdBQVc7WUFDcEIsTUFBTSxFQUFFLFdBQVc7WUFDbkIsT0FBTyxFQUFFLGtCQUFrQjtTQUM1Qjs7Y0FFSyxPQUFPLEdBQWEsYUFBYSxDQUFDLE1BQU07Ozs7UUFBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBQztRQUU5RSxPQUFPLE9BQU8sQ0FBQyxNQUFNO1lBQ25CLENBQUMsQ0FBQztnQkFDRSxlQUFlLEVBQUU7b0JBQ2YsT0FBTztvQkFDUCxXQUFXLEVBQUUsU0FBUyxDQUNwQixPQUFPLENBQUMsR0FBRzs7OztvQkFDVCxHQUFHLENBQUMsRUFBRSxDQUNKLENBQUM7d0JBQ0MsS0FBSyxFQUFFLGdCQUFnQjt3QkFDdkIsT0FBTyxFQUFFLFdBQVc7d0JBQ3BCLE1BQU0sRUFBRSxVQUFVO3dCQUNsQixPQUFPLEVBQUUscUJBQXFCO3FCQUMvQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQ1YsQ0FDRjtpQkFDRjthQUNGO1lBQ0gsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNYLENBQUMsRUFBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIEZvcm1Hcm91cCwgVmFsaWRhdG9yRm4gfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBhZGRDb21tYXMsIG5vcm1hbGl6ZURpYWNyaXRpY3MgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlUGFzc3dvcmRzKFtjb250cm9sTmFtZTEsIGNvbnRyb2xOYW1lMl06IHN0cmluZ1tdKTogVmFsaWRhdG9yRm4ge1xuICByZXR1cm4gKGdyb3VwOiBGb3JtR3JvdXApID0+IHtcbiAgICBjb25zdCBwYXNzd29yZCA9IGdyb3VwLmdldChjb250cm9sTmFtZTEpLnZhbHVlO1xuICAgIGNvbnN0IHJlcGVhdCA9IGdyb3VwLmdldChjb250cm9sTmFtZTIpLnZhbHVlO1xuXG4gICAgcmV0dXJuICFwYXNzd29yZCB8fCAhcmVwZWF0IHx8IHBhc3N3b3JkID09PSByZXBlYXRcbiAgICAgID8gbnVsbFxuICAgICAgOiB7XG4gICAgICAgICAgcGFzc3dvcmRNaXNtYXRjaDoge1xuICAgICAgICAgICAgZmllbGRzOiBbY29udHJvbE5hbWUxLCBjb250cm9sTmFtZTJdLFxuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCB0eXBlIFBhc3N3b3JkUnVsZXMgPSBBcnJheTwnc21hbGwnIHwgJ2NhcGl0YWwnIHwgJ251bWJlcicgfCAnc3BlY2lhbCc+O1xuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVQYXNzd29yZChcbiAgc2hvdWxkQ29udGFpbjogUGFzc3dvcmRSdWxlcyA9IFsnc21hbGwnLCAnY2FwaXRhbCcsICdudW1iZXInLCAnc3BlY2lhbCddLFxuKTogVmFsaWRhdG9yRm4ge1xuICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCkgPT4ge1xuICAgIGlmICghY29udHJvbC52YWx1ZSkgcmV0dXJuIG51bGw7XG5cbiAgICBjb25zdCB2YWx1ZSA9IG5vcm1hbGl6ZURpYWNyaXRpY3MoY29udHJvbC52YWx1ZSk7XG5cbiAgICBjb25zdCByZWdleCA9IHtcbiAgICAgIHNtYWxsOiAvLipbYS16XS4qLyxcbiAgICAgIGNhcGl0YWw6IC8uKltBLVpdLiovLFxuICAgICAgbnVtYmVyOiAvLipbMC05XS4qLyxcbiAgICAgIHNwZWNpYWw6IC8uKlteMC05YS16QS1aXS4qLyxcbiAgICB9O1xuXG4gICAgY29uc3QgbWlzc2luZzogc3RyaW5nW10gPSBzaG91bGRDb250YWluLmZpbHRlcihrZXkgPT4gIXJlZ2V4W2tleV0udGVzdCh2YWx1ZSkpO1xuXG4gICAgcmV0dXJuIG1pc3NpbmcubGVuZ3RoXG4gICAgICA/IHtcbiAgICAgICAgICBpbnZhbGlkUGFzc3dvcmQ6IHtcbiAgICAgICAgICAgIG1pc3NpbmcsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogYWRkQ29tbWFzKFxuICAgICAgICAgICAgICBtaXNzaW5nLm1hcChcbiAgICAgICAgICAgICAgICBrZXkgPT5cbiAgICAgICAgICAgICAgICAgICh7XG4gICAgICAgICAgICAgICAgICAgIHNtYWxsOiAnYSBzbWFsbCBsZXR0ZXInLFxuICAgICAgICAgICAgICAgICAgICBjYXBpdGFsOiAnYSBjYXBpdGFsJyxcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyOiAnYSBudW1iZXInLFxuICAgICAgICAgICAgICAgICAgICBzcGVjaWFsOiAnYSBzcGVjaWFsIGNoYXJhY3RlcicsXG4gICAgICAgICAgICAgICAgICB9W2tleV0pLFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgICA6IG51bGw7XG4gIH07XG59XG4iXX0=
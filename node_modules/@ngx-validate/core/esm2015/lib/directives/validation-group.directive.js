/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/validation-group.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Directive, Injector, Optional, Self, SkipSelf, } from '@angular/core';
import { FormGroupDirective, FormGroupName } from '@angular/forms';
import { ReplaySubject, Subscription } from 'rxjs';
import { AbstractValidationDirective } from '../abstracts';
export class ValidationGroupDirective extends AbstractValidationDirective {
    /**
     * @param {?} injector
     * @param {?} cdRef
     * @param {?} groupName
     * @param {?} groupRef
     * @param {?} parentRef
     */
    constructor(injector, cdRef, groupName, groupRef, parentRef) {
        super(injector);
        this.injector = injector;
        this.cdRef = cdRef;
        this.groupName = groupName;
        this.groupRef = groupRef;
        this.parentRef = parentRef;
        this.status$ = new ReplaySubject(1);
        this.submit$ = new ReplaySubject(1);
        this.value$ = new ReplaySubject(1);
        this.subs = new Subscription();
    }
    /**
     * @private
     * @return {?}
     */
    subscribeToFormSubmit() {
        ((/** @type {?} */ (this.elRef.nativeElement))).onsubmit = (/**
         * @param {?} event
         * @return {?}
         */
        event => {
            if (this.group.invalid)
                event.preventDefault();
            this.submit$.next(this.group);
            this.cdRef.markForCheck();
        });
    }
    /**
     * @private
     * @return {?}
     */
    subscribeToStatusChanges() {
        this.subs.add(this.group.statusChanges.subscribe((/**
         * @return {?}
         */
        () => {
            this.status$.next(this.group);
            this.cdRef.markForCheck();
        })));
    }
    /**
     * @private
     * @return {?}
     */
    subscribeToValueChanges() {
        this.subs.add(this.group.valueChanges.subscribe((/**
         * @return {?}
         */
        () => {
            this.value$.next(this.group);
            this.cdRef.markForCheck();
        })));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.parentRef)
            this.subscribeToFormSubmit();
        this.subscribeToStatusChanges();
        this.subscribeToValueChanges();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subs.unsubscribe();
    }
}
ValidationGroupDirective.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line */
                selector: '[formGroup],[formGroupName]',
                exportAs: 'validationGroup',
            },] }
];
/** @nocollapse */
ValidationGroupDirective.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef },
    { type: FormGroupName, decorators: [{ type: Optional }, { type: Self }] },
    { type: FormGroupDirective, decorators: [{ type: Optional }, { type: Self }] },
    { type: ValidationGroupDirective, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
if (false) {
    /** @type {?} */
    ValidationGroupDirective.prototype.status$;
    /** @type {?} */
    ValidationGroupDirective.prototype.submit$;
    /** @type {?} */
    ValidationGroupDirective.prototype.value$;
    /**
     * @type {?}
     * @private
     */
    ValidationGroupDirective.prototype.subs;
    /** @type {?} */
    ValidationGroupDirective.prototype.injector;
    /** @type {?} */
    ValidationGroupDirective.prototype.cdRef;
    /** @type {?} */
    ValidationGroupDirective.prototype.groupName;
    /** @type {?} */
    ValidationGroupDirective.prototype.groupRef;
    /** @type {?} */
    ValidationGroupDirective.prototype.parentRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi1ncm91cC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXZhbGlkYXRlL2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy92YWxpZGF0aW9uLWdyb3VwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFFTCxpQkFBaUIsRUFDakIsU0FBUyxFQUNULFFBQVEsRUFFUixRQUFRLEVBQ1IsSUFBSSxFQUNKLFFBQVEsR0FDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQWEsa0JBQWtCLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDbkQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBTzNELE1BQU0sT0FBTyx3QkFBeUIsU0FBUSwyQkFBMkI7Ozs7Ozs7O0lBUXZFLFlBQ1MsUUFBa0IsRUFDbEIsS0FBd0IsRUFHeEIsU0FBd0IsRUFHeEIsUUFBNEIsRUFHNUIsU0FBbUM7UUFFMUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBWlQsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQixVQUFLLEdBQUwsS0FBSyxDQUFtQjtRQUd4QixjQUFTLEdBQVQsU0FBUyxDQUFlO1FBR3hCLGFBQVEsR0FBUixRQUFRLENBQW9CO1FBRzVCLGNBQVMsR0FBVCxTQUFTLENBQTBCO1FBakI1QyxZQUFPLEdBQUcsSUFBSSxhQUFhLENBQVksQ0FBQyxDQUFDLENBQUM7UUFDMUMsWUFBTyxHQUFHLElBQUksYUFBYSxDQUFZLENBQUMsQ0FBQyxDQUFDO1FBQzFDLFdBQU0sR0FBRyxJQUFJLGFBQWEsQ0FBWSxDQUFDLENBQUMsQ0FBQztRQUVqQyxTQUFJLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQWdCbEMsQ0FBQzs7Ozs7SUFFTyxxQkFBcUI7UUFDM0IsQ0FBQyxtQkFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBbUIsQ0FBQyxDQUFDLFFBQVE7Ozs7UUFBRyxLQUFLLENBQUMsRUFBRTtZQUMvRCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTztnQkFBRSxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDL0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlCLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDNUIsQ0FBQyxDQUFBLENBQUM7SUFDSixDQUFDOzs7OztJQUVPLHdCQUF3QjtRQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FDWCxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxTQUFTOzs7UUFBQyxHQUFHLEVBQUU7WUFDdEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlCLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDNUIsQ0FBQyxFQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7Ozs7O0lBRU8sdUJBQXVCO1FBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUNYLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLFNBQVM7OztRQUFDLEdBQUcsRUFBRTtZQUNyQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDN0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUM1QixDQUFDLEVBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7OztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVM7WUFBRSxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUNsRCxJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztJQUNqQyxDQUFDOzs7O0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDMUIsQ0FBQzs7O1lBL0RGLFNBQVMsU0FBQzs7Z0JBRVQsUUFBUSxFQUFFLDZCQUE2QjtnQkFDdkMsUUFBUSxFQUFFLGlCQUFpQjthQUM1Qjs7OztZQWRDLFFBQVE7WUFGUixpQkFBaUI7WUFRcUIsYUFBYSx1QkFvQmhELFFBQVEsWUFDUixJQUFJO1lBckJXLGtCQUFrQix1QkF1QmpDLFFBQVEsWUFDUixJQUFJO1lBSWEsd0JBQXdCLHVCQUZ6QyxRQUFRLFlBQ1IsUUFBUTs7OztJQWhCWCwyQ0FBMEM7O0lBQzFDLDJDQUEwQzs7SUFDMUMsMENBQXlDOzs7OztJQUV6Qyx3Q0FBa0M7O0lBR2hDLDRDQUF5Qjs7SUFDekIseUNBQStCOztJQUMvQiw2Q0FFK0I7O0lBQy9CLDRDQUVtQzs7SUFDbkMsNkNBRTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIERpcmVjdGl2ZSxcbiAgSW5qZWN0b3IsXG4gIE9uRGVzdHJveSxcbiAgT3B0aW9uYWwsXG4gIFNlbGYsXG4gIFNraXBTZWxmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCwgRm9ybUdyb3VwRGlyZWN0aXZlLCBGb3JtR3JvdXBOYW1lIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgUmVwbGF5U3ViamVjdCwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBYnN0cmFjdFZhbGlkYXRpb25EaXJlY3RpdmUgfSBmcm9tICcuLi9hYnN0cmFjdHMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lICovXG4gIHNlbGVjdG9yOiAnW2Zvcm1Hcm91cF0sW2Zvcm1Hcm91cE5hbWVdJyxcbiAgZXhwb3J0QXM6ICd2YWxpZGF0aW9uR3JvdXAnLFxufSlcbmV4cG9ydCBjbGFzcyBWYWxpZGF0aW9uR3JvdXBEaXJlY3RpdmUgZXh0ZW5kcyBBYnN0cmFjdFZhbGlkYXRpb25EaXJlY3RpdmVcbiAgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICBzdGF0dXMkID0gbmV3IFJlcGxheVN1YmplY3Q8Rm9ybUdyb3VwPigxKTtcbiAgc3VibWl0JCA9IG5ldyBSZXBsYXlTdWJqZWN0PEZvcm1Hcm91cD4oMSk7XG4gIHZhbHVlJCA9IG5ldyBSZXBsYXlTdWJqZWN0PEZvcm1Hcm91cD4oMSk7XG5cbiAgcHJpdmF0ZSBzdWJzID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgcHVibGljIGNkUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBTZWxmKClcbiAgICBwdWJsaWMgZ3JvdXBOYW1lOiBGb3JtR3JvdXBOYW1lLFxuICAgIEBPcHRpb25hbCgpXG4gICAgQFNlbGYoKVxuICAgIHB1YmxpYyBncm91cFJlZjogRm9ybUdyb3VwRGlyZWN0aXZlLFxuICAgIEBPcHRpb25hbCgpXG4gICAgQFNraXBTZWxmKClcbiAgICBwdWJsaWMgcGFyZW50UmVmOiBWYWxpZGF0aW9uR3JvdXBEaXJlY3RpdmUsXG4gICkge1xuICAgIHN1cGVyKGluamVjdG9yKTtcbiAgfVxuXG4gIHByaXZhdGUgc3Vic2NyaWJlVG9Gb3JtU3VibWl0KCkge1xuICAgICh0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQgYXMgSFRNTEZvcm1FbGVtZW50KS5vbnN1Ym1pdCA9IGV2ZW50ID0+IHtcbiAgICAgIGlmICh0aGlzLmdyb3VwLmludmFsaWQpIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLnN1Ym1pdCQubmV4dCh0aGlzLmdyb3VwKTtcbiAgICAgIHRoaXMuY2RSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgc3Vic2NyaWJlVG9TdGF0dXNDaGFuZ2VzKCkge1xuICAgIHRoaXMuc3Vicy5hZGQoXG4gICAgICB0aGlzLmdyb3VwLnN0YXR1c0NoYW5nZXMuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdGhpcy5zdGF0dXMkLm5leHQodGhpcy5ncm91cCk7XG4gICAgICAgIHRoaXMuY2RSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgICB9KSxcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBzdWJzY3JpYmVUb1ZhbHVlQ2hhbmdlcygpIHtcbiAgICB0aGlzLnN1YnMuYWRkKFxuICAgICAgdGhpcy5ncm91cC52YWx1ZUNoYW5nZXMuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdGhpcy52YWx1ZSQubmV4dCh0aGlzLmdyb3VwKTtcbiAgICAgICAgdGhpcy5jZFJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgaWYgKCF0aGlzLnBhcmVudFJlZikgdGhpcy5zdWJzY3JpYmVUb0Zvcm1TdWJtaXQoKTtcbiAgICB0aGlzLnN1YnNjcmliZVRvU3RhdHVzQ2hhbmdlcygpO1xuICAgIHRoaXMuc3Vic2NyaWJlVG9WYWx1ZUNoYW5nZXMoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuc3Vicy51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iXX0=
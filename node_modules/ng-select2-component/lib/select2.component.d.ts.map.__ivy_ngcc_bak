{"version":3,"file":"select2.component.d.ts","sources":["select2.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ChangeDetectorRef, DoCheck, EventEmitter, OnDestroy, OnInit, TemplateRef } from '@angular/core';\r\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\r\nimport { Select2Data, Select2Group, Select2Option, Select2RemoveEvent, Select2ScrollEvent, Select2SearchEvent, Select2UpdateEvent, Select2UpdateValue } from './select2-utils';\r\nexport declare class Select2 implements ControlValueAccessor, OnInit, OnDestroy, DoCheck, AfterViewInit {\r\n    private _changeDetectorRef;\r\n    private _parentForm;\r\n    private _parentFormGroup;\r\n    _control: NgControl;\r\n    /** data of options & optiongrps */\r\n    data: Select2Data;\r\n    minCharForSearch: number;\r\n    displaySearchStatus: 'default' | 'hidden' | 'always';\r\n    placeholder: string;\r\n    customSearchEnabled: boolean;\r\n    limitSelection: number;\r\n    listPosition: 'above' | 'below';\r\n    multiple: any;\r\n    /** use the material style */\r\n    material: any;\r\n    /** use no style */\r\n    noStyle: any;\r\n    /** infinite scroll distance */\r\n    infiniteScrollDistance: number;\r\n    /** infinite scroll distance */\r\n    infiniteScrollThrottle: number;\r\n    /** infinite scroll activated */\r\n    infiniteScroll: any;\r\n    /** use it for change the pattern of the filter search */\r\n    editPattern: (str: string) => string;\r\n    /** template for formating */\r\n    templates: (TemplateRef<any> | {\r\n        [key: string]: TemplateRef<any>;\r\n    });\r\n    /** the max height of the results container when opening the select */\r\n    resultMaxHeight: string;\r\n    update: EventEmitter<Select2UpdateEvent<Select2UpdateValue>>;\r\n    open: EventEmitter<Select2>;\r\n    close: EventEmitter<Select2>;\r\n    focus: EventEmitter<Select2>;\r\n    blur: EventEmitter<Select2>;\r\n    search: EventEmitter<Select2SearchEvent<Select2UpdateValue>>;\r\n    scroll: EventEmitter<Select2ScrollEvent>;\r\n    removeOption: EventEmitter<Select2RemoveEvent<Select2UpdateValue>>;\r\n    option: Select2Option | Select2Option[] | null;\r\n    isOpen: boolean;\r\n    searchStyle: string;\r\n    /** Whether the element is focused or not. */\r\n    focused: boolean;\r\n    filteredData: Select2Data;\r\n    readonly select2Options: Select2Option[];\r\n    readonly select2Option: Select2Option;\r\n    searchText: string;\r\n    /** minimal data of show the search field */\r\n    minCountForSearch: number | string;\r\n    /** Unique id of the element. */\r\n    id: string;\r\n    /** Whether the element is required. */\r\n    required: any;\r\n    /** Whether selected items should be hidden. */\r\n    disabled: any;\r\n    /** Whether items are hidden when has. */\r\n    hideSelectedItems: any;\r\n    /** Whether the element is readonly. */\r\n    readonly: any;\r\n    /** The input element's value. */\r\n    value: Select2UpdateValue;\r\n    /** Tab index for the select2 element. */\r\n    tabIndex: number;\r\n    /** reset with no selected value */\r\n    resettable: any;\r\n    readonly ariaInvalid: boolean;\r\n    readonly classMaterial: boolean;\r\n    readonly classNostyle: boolean;\r\n    readonly select2above: boolean;\r\n    private _minCountForSearch?;\r\n    private selection;\r\n    private resultContainer;\r\n    private results;\r\n    private searchInput;\r\n    private hoveringValue;\r\n    private innerSearchText;\r\n    private isSearchboxHidden;\r\n    private selectionElement;\r\n    private searchInputElement;\r\n    private resultsElement;\r\n    private _stateChanges;\r\n    /** Tab index for the element. */\r\n    private _tabIndex;\r\n    private _disabled;\r\n    private _required;\r\n    private _readonly;\r\n    private _multiple;\r\n    private _material;\r\n    private _noStyle;\r\n    private _resettable;\r\n    private _hideSelectedItems;\r\n    private _clickDetection;\r\n    private _clickDetectionFc;\r\n    private _id;\r\n    private _uid;\r\n    private _value;\r\n    private _previousNativeValue;\r\n    private _infiniteScroll;\r\n    constructor(_changeDetectorRef: ChangeDetectorRef, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _control: NgControl, tabIndex: string);\r\n    /** View -> model callback called when select has been touched */\r\n    private _onTouched;\r\n    /** View -> model callback called when value changes */\r\n    private _onChange;\r\n    ngOnInit(): void;\r\n    ngAfterViewInit(): void;\r\n    ngDoCheck(): void;\r\n    ngOnDestroy(): void;\r\n    updateSearchBox(): void;\r\n    hideSearch(): boolean;\r\n    getOptionStyle(option: Select2Option): string;\r\n    mouseenter(option: Select2Option): void;\r\n    click(option: Select2Option): void;\r\n    reset(e: MouseEvent): void;\r\n    prevChange(event: Event): void;\r\n    toggleOpenAndClose(): void;\r\n    hasTemplate(option: (Select2Option | Select2Group), defaut: string): boolean;\r\n    getTemplate(option: (Select2Option | Select2Group), defaut: string): any;\r\n    private testSelection;\r\n    private testValueChange;\r\n    private updateFilteredData;\r\n    private clickDetection;\r\n    private clickExit;\r\n    private ifParentContainsClass;\r\n    private ifParentContainsId;\r\n    private getParentElementByClass;\r\n    private getParentElementById;\r\n    private containClasses;\r\n    focusin(): void;\r\n    focusout(): void;\r\n    private moveUp;\r\n    private moveDown;\r\n    private updateScrollFromOption;\r\n    private selectByEnter;\r\n    select(option: Select2Option | null): void;\r\n    keyDown(e: KeyboardEvent): void;\r\n    openKey(e: KeyboardEvent): void;\r\n    trackBy(_index: number, item: Select2Option): any;\r\n    searchUpdate(e: Event): void;\r\n    isSelected(option: Select2Option): \"true\" | \"false\";\r\n    isDisabled(option: Select2Option): \"true\" | \"false\";\r\n    removeSelection(e: MouseEvent, option: Select2Option): void;\r\n    /**\r\n     * Sets the model value. Implemented as part of ControlValueAccessor.\r\n     * @param value\r\n     */\r\n    writeValue(value: any): void;\r\n    /**\r\n     * Saves a callback function to be invoked when the select's value\r\n     * changes from user input. Part of the ControlValueAccessor interface\r\n     * required to integrate with Angular's core forms API.\r\n     *\r\n     * @param fn Callback to be triggered when the value changes.\r\n     */\r\n    registerOnChange(fn: (value: any) => void): void;\r\n    /**\r\n     * Saves a callback function to be invoked when the select is blurred\r\n     * by the user. Part of the ControlValueAccessor interface required\r\n     * to integrate with Angular's core forms API.\r\n     *\r\n     * @param fn Callback to be triggered when the component has been touched.\r\n     */\r\n    registerOnTouched(fn: () => {}): void;\r\n    /**\r\n     * Sets whether the component should be disabled.\r\n     * Implemented as part of ControlValueAccessor.\r\n     * @param isDisabled\r\n     */\r\n    setDisabledState(isDisabled: boolean): void;\r\n    _isErrorState(): boolean;\r\n    private _testKey;\r\n    private _getKey;\r\n    private _isKey;\r\n    /**\r\n     * Sets the selected option based on a value. If no option can be\r\n     * found with the designated value, the select trigger is cleared.\r\n     */\r\n    private _setSelectionByValue;\r\n    /** Does some manual dirty checking on the native input `value` property. */\r\n    private _dirtyCheckNativeValue;\r\n    private _coerceBooleanProperty;\r\n    private _focusSearchboxOrResultsElement;\r\n    private _focus;\r\n    onScroll(way: 'up' | 'down'): void;\r\n}\r\n"]}
import { AuthService, ConfigStateService } from '@abp/ng.core';
import { ToasterService } from '@abp/ng.theme.shared';
import { Component, Injector } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { throwError } from 'rxjs';
import { catchError, finalize } from 'rxjs/operators';
import { getRedirectUrl } from '../../utils/auth-utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@abp/ng.theme.shared";
import * as i3 from "@abp/ng.core";
import * as i4 from "@angular/common";
import * as i5 from "@angular/router";
import * as i6 from "@ngx-validate/core";
const { maxLength, required } = Validators;
export class LoginComponent {
    constructor(injector, fb, toasterService, authService, configState) {
        this.injector = injector;
        this.fb = fb;
        this.toasterService = toasterService;
        this.authService = authService;
        this.configState = configState;
        this.isSelfRegistrationEnabled = true;
        this.authWrapperKey = "Account.AuthWrapperComponent" /* AuthWrapper */;
    }
    ngOnInit() {
        this.init();
        this.buildForm();
    }
    init() {
        this.isSelfRegistrationEnabled =
            (this.configState.getSetting('Abp.Account.IsSelfRegistrationEnabled') || '').toLowerCase() !== 'false';
    }
    buildForm() {
        this.form = this.fb.group({
            username: ['', [required, maxLength(255)]],
            password: ['', [required, maxLength(128)]],
            rememberMe: [false],
        });
    }
    onSubmit() {
        if (this.form.invalid)
            return;
        this.inProgress = true;
        const { username, password, rememberMe } = this.form.value;
        const redirectUrl = getRedirectUrl(this.injector);
        this.authService
            .login({ username, password, rememberMe, redirectUrl })
            .pipe(catchError(err => {
            this.toasterService.error(err.error?.error_description ||
                err.error?.error.message ||
                'AbpAccount::DefaultErrorMessage', null, { life: 7000 });
            return throwError(err);
        }), finalize(() => (this.inProgress = false)))
            .subscribe();
    }
}
LoginComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LoginComponent, deps: [{ token: i0.Injector }, { token: i1.FormBuilder }, { token: i2.ToasterService }, { token: i3.AuthService }, { token: i3.ConfigStateService }], target: i0.ɵɵFactoryTarget.Component });
LoginComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: LoginComponent, selector: "abp-login", ngImport: i0, template: "<h4>{{ 'AbpAccount::Login' | abpLocalization }}</h4>\r\n<strong *ngIf=\"isSelfRegistrationEnabled\">\r\n  {{ 'AbpAccount::AreYouANewUser' | abpLocalization }}\r\n  <a class=\"text-decoration-none\" routerLink=\"/account/register\" queryParamsHandling=\"preserve\">{{\r\n    'AbpAccount::Register' | abpLocalization\r\n  }}</a>\r\n</strong>\r\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" validateOnSubmit class=\"mt-4\">\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"login-input-user-name-or-email-address\" class=\"form-label\">{{\r\n      'AbpAccount::UserNameOrEmailAddress' | abpLocalization\r\n    }}</label>\r\n    <input\r\n      class=\"form-control\"\r\n      type=\"text\"\r\n      id=\"login-input-user-name-or-email-address\"\r\n      formControlName=\"username\"\r\n      autocomplete=\"username\"\r\n      autofocus\r\n    />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"login-input-password\" class=\"form-label\">{{ 'AbpAccount::Password' | abpLocalization }}</label>\r\n    <input\r\n      class=\"form-control\"\r\n      type=\"password\"\r\n      id=\"login-input-password\"\r\n      formControlName=\"password\"\r\n      autocomplete=\"current-password\"\r\n    />\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col\">\r\n      <div class=\"form-check\">\r\n        <label class=\"form-check-label mb-2\" for=\"login-input-remember-me\">\r\n          <input\r\n            class=\"form-check-input\"\r\n            type=\"checkbox\"\r\n            id=\"login-input-remember-me\"\r\n            formControlName=\"rememberMe\"\r\n          />\r\n          {{ 'AbpAccount::RememberMe' | abpLocalization }}\r\n        </label>\r\n      </div>\r\n    </div>\r\n    <div class=\"text-end col\">\r\n      <a routerLink=\"/account/forgot-password\">{{\r\n        'AbpAccount::ForgotPassword' | abpLocalization\r\n      }}</a>\r\n    </div>\r\n  </div>\r\n\r\n  <abp-button\r\n    [loading]=\"inProgress\"\r\n    buttonType=\"submit\"\r\n    name=\"Action\"\r\n    buttonClass=\"btn-block btn-lg mt-3 btn btn-primary\"\r\n  >\r\n    {{ 'AbpAccount::Login' | abpLocalization }}\r\n  </abp-button>\r\n</form>\r\n", components: [{ type: i2.ButtonComponent, selector: "abp-button", inputs: ["buttonId", "buttonClass", "buttonType", "formName", "iconClass", "loading", "disabled", "attributes"], outputs: ["click", "focus", "blur", "abpClick", "abpFocus", "abpBlur"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo", "routerLink"] }, { type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i3.FormSubmitDirective, selector: "form[ngSubmit][formGroup]", inputs: ["debounce", "notValidateOnSubmit", "markAsDirtyWhenSubmit"], outputs: ["ngSubmit"] }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i6.ValidationGroupDirective, selector: "[formGroup],[formGroupName]", exportAs: ["validationGroup"] }, { type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: i6.ValidationDirective, selector: "[formControl],[formControlName]", exportAs: ["validationDirective"] }, { type: i3.AutofocusDirective, selector: "[autofocus]", inputs: ["autofocus"] }, { type: i1.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }], pipes: { "abpLocalization": i3.LocalizationPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LoginComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-login', template: "<h4>{{ 'AbpAccount::Login' | abpLocalization }}</h4>\r\n<strong *ngIf=\"isSelfRegistrationEnabled\">\r\n  {{ 'AbpAccount::AreYouANewUser' | abpLocalization }}\r\n  <a class=\"text-decoration-none\" routerLink=\"/account/register\" queryParamsHandling=\"preserve\">{{\r\n    'AbpAccount::Register' | abpLocalization\r\n  }}</a>\r\n</strong>\r\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" validateOnSubmit class=\"mt-4\">\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"login-input-user-name-or-email-address\" class=\"form-label\">{{\r\n      'AbpAccount::UserNameOrEmailAddress' | abpLocalization\r\n    }}</label>\r\n    <input\r\n      class=\"form-control\"\r\n      type=\"text\"\r\n      id=\"login-input-user-name-or-email-address\"\r\n      formControlName=\"username\"\r\n      autocomplete=\"username\"\r\n      autofocus\r\n    />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"login-input-password\" class=\"form-label\">{{ 'AbpAccount::Password' | abpLocalization }}</label>\r\n    <input\r\n      class=\"form-control\"\r\n      type=\"password\"\r\n      id=\"login-input-password\"\r\n      formControlName=\"password\"\r\n      autocomplete=\"current-password\"\r\n    />\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col\">\r\n      <div class=\"form-check\">\r\n        <label class=\"form-check-label mb-2\" for=\"login-input-remember-me\">\r\n          <input\r\n            class=\"form-check-input\"\r\n            type=\"checkbox\"\r\n            id=\"login-input-remember-me\"\r\n            formControlName=\"rememberMe\"\r\n          />\r\n          {{ 'AbpAccount::RememberMe' | abpLocalization }}\r\n        </label>\r\n      </div>\r\n    </div>\r\n    <div class=\"text-end col\">\r\n      <a routerLink=\"/account/forgot-password\">{{\r\n        'AbpAccount::ForgotPassword' | abpLocalization\r\n      }}</a>\r\n    </div>\r\n  </div>\r\n\r\n  <abp-button\r\n    [loading]=\"inProgress\"\r\n    buttonType=\"submit\"\r\n    name=\"Action\"\r\n    buttonClass=\"btn-block btn-lg mt-3 btn btn-primary\"\r\n  >\r\n    {{ 'AbpAccount::Login' | abpLocalization }}\r\n  </abp-button>\r\n</form>\r\n" }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.FormBuilder }, { type: i2.ToasterService }, { type: i3.AuthService }, { type: i3.ConfigStateService }]; } });
//# sourceMappingURL=data:application/json;base64,
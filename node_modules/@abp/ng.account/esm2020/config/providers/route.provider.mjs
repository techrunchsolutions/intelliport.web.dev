import { RoutesService } from '@abp/ng.core';
import { APP_INITIALIZER } from '@angular/core';
export const ACCOUNT_ROUTE_PROVIDERS = [
    { provide: APP_INITIALIZER, useFactory: configureRoutes, deps: [RoutesService], multi: true },
];
export function configureRoutes(routes) {
    return () => {
        routes.add([
            {
                path: undefined,
                name: "AbpAccount::Menu:Account" /* Account */,
                invisible: true,
                layout: "account" /* account */,
                order: 1,
            },
            {
                path: '/account/login',
                name: "AbpAccount::Login" /* Login */,
                parentName: "AbpAccount::Menu:Account" /* Account */,
                order: 1,
            },
            {
                path: '/account/register',
                name: "AbpAccount::Register" /* Register */,
                parentName: "AbpAccount::Menu:Account" /* Account */,
                order: 2,
            },
            {
                path: '/account/manage',
                name: "AbpAccount::MyAccount" /* ManageProfile */,
                parentName: "AbpAccount::Menu:Account" /* Account */,
                layout: "application" /* application */,
                order: 3,
            },
            {
                path: '/account/forgot-password',
                parentName: "AbpAccount::Menu:Account" /* Account */,
                name: "AbpAccount::ForgotPassword" /* ForgotPassword */,
                invisible: true,
            },
            {
                path: '/account/reset-password',
                parentName: "AbpAccount::Menu:Account" /* Account */,
                name: "AbpAccount::ResetPassword" /* ResetPassword */,
                invisible: true,
            },
        ]);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGUucHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9hY2NvdW50L2NvbmZpZy9zcmMvcHJvdmlkZXJzL3JvdXRlLnByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBZSxhQUFhLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDMUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUdoRCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRztJQUNyQyxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO0NBQzlGLENBQUM7QUFFRixNQUFNLFVBQVUsZUFBZSxDQUFDLE1BQXFCO0lBQ25ELE9BQU8sR0FBRyxFQUFFO1FBQ1YsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUNUO2dCQUNFLElBQUksRUFBRSxTQUFTO2dCQUNmLElBQUksMENBQTRCO2dCQUNoQyxTQUFTLEVBQUUsSUFBSTtnQkFDZixNQUFNLHlCQUFxQjtnQkFDM0IsS0FBSyxFQUFFLENBQUM7YUFDVDtZQUNEO2dCQUNFLElBQUksRUFBRSxnQkFBZ0I7Z0JBQ3RCLElBQUksaUNBQTBCO2dCQUM5QixVQUFVLDBDQUE0QjtnQkFDdEMsS0FBSyxFQUFFLENBQUM7YUFDVDtZQUNEO2dCQUNFLElBQUksRUFBRSxtQkFBbUI7Z0JBQ3pCLElBQUksdUNBQTZCO2dCQUNqQyxVQUFVLDBDQUE0QjtnQkFDdEMsS0FBSyxFQUFFLENBQUM7YUFDVDtZQUNEO2dCQUNFLElBQUksRUFBRSxpQkFBaUI7Z0JBQ3ZCLElBQUksNkNBQWtDO2dCQUN0QyxVQUFVLDBDQUE0QjtnQkFDdEMsTUFBTSxpQ0FBeUI7Z0JBQy9CLEtBQUssRUFBRSxDQUFDO2FBQ1Q7WUFDRDtnQkFDRSxJQUFJLEVBQUUsMEJBQTBCO2dCQUNoQyxVQUFVLDBDQUE0QjtnQkFDdEMsSUFBSSxtREFBbUM7Z0JBQ3ZDLFNBQVMsRUFBRSxJQUFJO2FBQ2hCO1lBQ0Q7Z0JBQ0UsSUFBSSxFQUFFLHlCQUF5QjtnQkFDL0IsVUFBVSwwQ0FBNEI7Z0JBQ3RDLElBQUksaURBQWtDO2dCQUN0QyxTQUFTLEVBQUUsSUFBSTthQUNoQjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlTGF5b3V0VHlwZSwgUm91dGVzU2VydmljZSB9IGZyb20gJ0BhYnAvbmcuY29yZSc7XHJcbmltcG9ydCB7IEFQUF9JTklUSUFMSVpFUiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBlQWNjb3VudFJvdXRlTmFtZXMgfSBmcm9tICcuLi9lbnVtcy9yb3V0ZS1uYW1lcyc7XHJcblxyXG5leHBvcnQgY29uc3QgQUNDT1VOVF9ST1VURV9QUk9WSURFUlMgPSBbXHJcbiAgeyBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsIHVzZUZhY3Rvcnk6IGNvbmZpZ3VyZVJvdXRlcywgZGVwczogW1JvdXRlc1NlcnZpY2VdLCBtdWx0aTogdHJ1ZSB9LFxyXG5dO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ3VyZVJvdXRlcyhyb3V0ZXM6IFJvdXRlc1NlcnZpY2UpIHtcclxuICByZXR1cm4gKCkgPT4ge1xyXG4gICAgcm91dGVzLmFkZChbXHJcbiAgICAgIHtcclxuICAgICAgICBwYXRoOiB1bmRlZmluZWQsXHJcbiAgICAgICAgbmFtZTogZUFjY291bnRSb3V0ZU5hbWVzLkFjY291bnQsXHJcbiAgICAgICAgaW52aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgIGxheW91dDogZUxheW91dFR5cGUuYWNjb3VudCxcclxuICAgICAgICBvcmRlcjogMSxcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIHBhdGg6ICcvYWNjb3VudC9sb2dpbicsXHJcbiAgICAgICAgbmFtZTogZUFjY291bnRSb3V0ZU5hbWVzLkxvZ2luLFxyXG4gICAgICAgIHBhcmVudE5hbWU6IGVBY2NvdW50Um91dGVOYW1lcy5BY2NvdW50LFxyXG4gICAgICAgIG9yZGVyOiAxLFxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgcGF0aDogJy9hY2NvdW50L3JlZ2lzdGVyJyxcclxuICAgICAgICBuYW1lOiBlQWNjb3VudFJvdXRlTmFtZXMuUmVnaXN0ZXIsXHJcbiAgICAgICAgcGFyZW50TmFtZTogZUFjY291bnRSb3V0ZU5hbWVzLkFjY291bnQsXHJcbiAgICAgICAgb3JkZXI6IDIsXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBwYXRoOiAnL2FjY291bnQvbWFuYWdlJyxcclxuICAgICAgICBuYW1lOiBlQWNjb3VudFJvdXRlTmFtZXMuTWFuYWdlUHJvZmlsZSxcclxuICAgICAgICBwYXJlbnROYW1lOiBlQWNjb3VudFJvdXRlTmFtZXMuQWNjb3VudCxcclxuICAgICAgICBsYXlvdXQ6IGVMYXlvdXRUeXBlLmFwcGxpY2F0aW9uLFxyXG4gICAgICAgIG9yZGVyOiAzLFxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgcGF0aDogJy9hY2NvdW50L2ZvcmdvdC1wYXNzd29yZCcsXHJcbiAgICAgICAgcGFyZW50TmFtZTogZUFjY291bnRSb3V0ZU5hbWVzLkFjY291bnQsXHJcbiAgICAgICAgbmFtZTogZUFjY291bnRSb3V0ZU5hbWVzLkZvcmdvdFBhc3N3b3JkLFxyXG4gICAgICAgIGludmlzaWJsZTogdHJ1ZSxcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIHBhdGg6ICcvYWNjb3VudC9yZXNldC1wYXNzd29yZCcsXHJcbiAgICAgICAgcGFyZW50TmFtZTogZUFjY291bnRSb3V0ZU5hbWVzLkFjY291bnQsXHJcbiAgICAgICAgbmFtZTogZUFjY291bnRSb3V0ZU5hbWVzLlJlc2V0UGFzc3dvcmQsXHJcbiAgICAgICAgaW52aXNpYmxlOiB0cnVlLFxyXG4gICAgICB9LFxyXG4gICAgXSk7XHJcbiAgfTtcclxufVxyXG4iXX0=
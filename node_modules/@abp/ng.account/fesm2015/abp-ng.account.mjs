import * as i3 from '@abp/ng.core';
import { InternalStore, RouterOutletComponent, ReplaceableRouteContainerComponent, AuthGuard, LazyModuleFactory, CoreModule } from '@abp/ng.core';
import * as i2$1 from '@abp/ng.theme.shared';
import { getPasswordValidators, fadeIn, ThemeSharedModule } from '@abp/ng.theme.shared';
import * as i0 from '@angular/core';
import { Component, InjectionToken, Injectable, NgModule } from '@angular/core';
import { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';
import * as i6$1 from '@ngx-validate/core';
import { comparePasswords, NgxValidateCoreModule } from '@ngx-validate/core';
import * as i3$1 from '@angular/router';
import { ActivatedRoute, RouterModule } from '@angular/router';
import * as i1 from '@angular/forms';
import { Validators, FormControl } from '@angular/forms';
import { finalize, catchError, switchMap } from 'rxjs/operators';
import * as i2 from '@abp/ng.account.core/proxy';
import * as i6 from '@angular/common';
import { throwError } from 'rxjs';
import { trigger, transition, useAnimation } from '@angular/animations';

class ForgotPasswordComponent {
    constructor(fb, accountService) {
        this.fb = fb;
        this.accountService = accountService;
        this.isEmailSent = false;
        this.form = this.fb.group({
            email: ['', [Validators.required, Validators.email]],
        });
    }
    onSubmit() {
        if (this.form.invalid)
            return;
        this.inProgress = true;
        this.accountService
            .sendPasswordResetCode({
            email: this.form.get('email').value,
            appName: 'Angular',
        })
            .pipe(finalize(() => (this.inProgress = false)))
            .subscribe(() => {
            this.isEmailSent = true;
        });
    }
}
ForgotPasswordComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ForgotPasswordComponent, deps: [{ token: i1.FormBuilder }, { token: i2.AccountService }], target: i0.ɵɵFactoryTarget.Component });
ForgotPasswordComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: ForgotPasswordComponent, selector: "abp-forgot-password", ngImport: i0, template: "<h4>{{ 'AbpAccount::ForgotPassword' | abpLocalization }}</h4>\r\n\r\n<form\r\n  *ngIf=\"!isEmailSent; else emailSentTemplate\"\r\n  [formGroup]=\"form\"\r\n  (ngSubmit)=\"onSubmit()\"\r\n  validateOnSubmit\r\n>\r\n  <p>{{ 'AbpAccount::SendPasswordResetLink_Information' | abpLocalization }}</p>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"input-email-address\" class=\"form-label\">{{\r\n      'AbpAccount::EmailAddress' | abpLocalization\r\n    }}</label\r\n    ><span> * </span>\r\n    <input type=\"email\" id=\"input-email-address\" class=\"form-control\" formControlName=\"email\" />\r\n  </div>\r\n  <abp-button\r\n    class=\"d-block\"\r\n    buttonClass=\"mt-2 mb-3 btn btn-primary btn-block\"\r\n    [loading]=\"inProgress\"\r\n    buttonType=\"submit\"\r\n    [disabled]=\"form?.invalid\"\r\n  >\r\n    {{ 'AbpAccount::Submit' | abpLocalization }}\r\n  </abp-button>\r\n  <a routerLink=\"/account/login\"\r\n    ><i class=\"fa fa-long-arrow-left me-1\"></i>{{ 'AbpAccount::Login' | abpLocalization }}</a\r\n  >\r\n</form>\r\n\r\n<ng-template #emailSentTemplate>\r\n  <p>\r\n    {{ 'AbpAccount::PasswordResetMailSentMessage' | abpLocalization }}\r\n  </p>\r\n\r\n  <a routerLink=\"/account/login\">\r\n    <button class=\"d-block mt-2 mb-3 btn btn-primary btn-block\">\r\n      <i class=\"fa fa-long-arrow-left me-1\"></i>\r\n      {{ 'AbpAccount::BackToLogin' | abpLocalization }}\r\n    </button>\r\n  </a>\r\n</ng-template>\r\n", components: [{ type: i2$1.ButtonComponent, selector: "abp-button", inputs: ["buttonId", "buttonClass", "buttonType", "formName", "iconClass", "loading", "disabled", "attributes"], outputs: ["click", "focus", "blur", "abpClick", "abpFocus", "abpBlur"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i3.FormSubmitDirective, selector: "form[ngSubmit][formGroup]", inputs: ["debounce", "notValidateOnSubmit", "markAsDirtyWhenSubmit"], outputs: ["ngSubmit"] }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i6$1.ValidationGroupDirective, selector: "[formGroup],[formGroupName]", exportAs: ["validationGroup"] }, { type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: i6$1.ValidationDirective, selector: "[formControl],[formControlName]", exportAs: ["validationDirective"] }, { type: i3$1.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo", "routerLink"] }], pipes: { "abpLocalization": i3.LocalizationPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ForgotPasswordComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-forgot-password', template: "<h4>{{ 'AbpAccount::ForgotPassword' | abpLocalization }}</h4>\r\n\r\n<form\r\n  *ngIf=\"!isEmailSent; else emailSentTemplate\"\r\n  [formGroup]=\"form\"\r\n  (ngSubmit)=\"onSubmit()\"\r\n  validateOnSubmit\r\n>\r\n  <p>{{ 'AbpAccount::SendPasswordResetLink_Information' | abpLocalization }}</p>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"input-email-address\" class=\"form-label\">{{\r\n      'AbpAccount::EmailAddress' | abpLocalization\r\n    }}</label\r\n    ><span> * </span>\r\n    <input type=\"email\" id=\"input-email-address\" class=\"form-control\" formControlName=\"email\" />\r\n  </div>\r\n  <abp-button\r\n    class=\"d-block\"\r\n    buttonClass=\"mt-2 mb-3 btn btn-primary btn-block\"\r\n    [loading]=\"inProgress\"\r\n    buttonType=\"submit\"\r\n    [disabled]=\"form?.invalid\"\r\n  >\r\n    {{ 'AbpAccount::Submit' | abpLocalization }}\r\n  </abp-button>\r\n  <a routerLink=\"/account/login\"\r\n    ><i class=\"fa fa-long-arrow-left me-1\"></i>{{ 'AbpAccount::Login' | abpLocalization }}</a\r\n  >\r\n</form>\r\n\r\n<ng-template #emailSentTemplate>\r\n  <p>\r\n    {{ 'AbpAccount::PasswordResetMailSentMessage' | abpLocalization }}\r\n  </p>\r\n\r\n  <a routerLink=\"/account/login\">\r\n    <button class=\"d-block mt-2 mb-3 btn btn-primary btn-block\">\r\n      <i class=\"fa fa-long-arrow-left me-1\"></i>\r\n      {{ 'AbpAccount::BackToLogin' | abpLocalization }}\r\n    </button>\r\n  </a>\r\n</ng-template>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i2.AccountService }]; } });

const ACCOUNT_CONFIG_OPTIONS = new InjectionToken('ACCOUNT_CONFIG_OPTIONS');

function getRedirectUrl(injector) {
    const route = injector.get(ActivatedRoute);
    const options = injector.get(ACCOUNT_CONFIG_OPTIONS);
    return route.snapshot.queryParams.returnUrl || options.redirectUrl || '/';
}

const { maxLength: maxLength$2, required: required$3 } = Validators;
class LoginComponent {
    constructor(injector, fb, toasterService, authService, configState) {
        this.injector = injector;
        this.fb = fb;
        this.toasterService = toasterService;
        this.authService = authService;
        this.configState = configState;
        this.isSelfRegistrationEnabled = true;
        this.authWrapperKey = "Account.AuthWrapperComponent" /* AuthWrapper */;
    }
    ngOnInit() {
        this.init();
        this.buildForm();
    }
    init() {
        this.isSelfRegistrationEnabled =
            (this.configState.getSetting('Abp.Account.IsSelfRegistrationEnabled') || '').toLowerCase() !== 'false';
    }
    buildForm() {
        this.form = this.fb.group({
            username: ['', [required$3, maxLength$2(255)]],
            password: ['', [required$3, maxLength$2(128)]],
            rememberMe: [false],
        });
    }
    onSubmit() {
        if (this.form.invalid)
            return;
        this.inProgress = true;
        const { username, password, rememberMe } = this.form.value;
        const redirectUrl = getRedirectUrl(this.injector);
        this.authService
            .login({ username, password, rememberMe, redirectUrl })
            .pipe(catchError(err => {
            var _a, _b;
            this.toasterService.error(((_a = err.error) === null || _a === void 0 ? void 0 : _a.error_description) ||
                ((_b = err.error) === null || _b === void 0 ? void 0 : _b.error.message) ||
                'AbpAccount::DefaultErrorMessage', null, { life: 7000 });
            return throwError(err);
        }), finalize(() => (this.inProgress = false)))
            .subscribe();
    }
}
LoginComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LoginComponent, deps: [{ token: i0.Injector }, { token: i1.FormBuilder }, { token: i2$1.ToasterService }, { token: i3.AuthService }, { token: i3.ConfigStateService }], target: i0.ɵɵFactoryTarget.Component });
LoginComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: LoginComponent, selector: "abp-login", ngImport: i0, template: "<h4>{{ 'AbpAccount::Login' | abpLocalization }}</h4>\r\n<strong *ngIf=\"isSelfRegistrationEnabled\">\r\n  {{ 'AbpAccount::AreYouANewUser' | abpLocalization }}\r\n  <a class=\"text-decoration-none\" routerLink=\"/account/register\" queryParamsHandling=\"preserve\">{{\r\n    'AbpAccount::Register' | abpLocalization\r\n  }}</a>\r\n</strong>\r\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" validateOnSubmit class=\"mt-4\">\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"login-input-user-name-or-email-address\" class=\"form-label\">{{\r\n      'AbpAccount::UserNameOrEmailAddress' | abpLocalization\r\n    }}</label>\r\n    <input\r\n      class=\"form-control\"\r\n      type=\"text\"\r\n      id=\"login-input-user-name-or-email-address\"\r\n      formControlName=\"username\"\r\n      autocomplete=\"username\"\r\n      autofocus\r\n    />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"login-input-password\" class=\"form-label\">{{ 'AbpAccount::Password' | abpLocalization }}</label>\r\n    <input\r\n      class=\"form-control\"\r\n      type=\"password\"\r\n      id=\"login-input-password\"\r\n      formControlName=\"password\"\r\n      autocomplete=\"current-password\"\r\n    />\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col\">\r\n      <div class=\"form-check\">\r\n        <label class=\"form-check-label mb-2\" for=\"login-input-remember-me\">\r\n          <input\r\n            class=\"form-check-input\"\r\n            type=\"checkbox\"\r\n            id=\"login-input-remember-me\"\r\n            formControlName=\"rememberMe\"\r\n          />\r\n          {{ 'AbpAccount::RememberMe' | abpLocalization }}\r\n        </label>\r\n      </div>\r\n    </div>\r\n    <div class=\"text-end col\">\r\n      <a routerLink=\"/account/forgot-password\">{{\r\n        'AbpAccount::ForgotPassword' | abpLocalization\r\n      }}</a>\r\n    </div>\r\n  </div>\r\n\r\n  <abp-button\r\n    [loading]=\"inProgress\"\r\n    buttonType=\"submit\"\r\n    name=\"Action\"\r\n    buttonClass=\"btn-block btn-lg mt-3 btn btn-primary\"\r\n  >\r\n    {{ 'AbpAccount::Login' | abpLocalization }}\r\n  </abp-button>\r\n</form>\r\n", components: [{ type: i2$1.ButtonComponent, selector: "abp-button", inputs: ["buttonId", "buttonClass", "buttonType", "formName", "iconClass", "loading", "disabled", "attributes"], outputs: ["click", "focus", "blur", "abpClick", "abpFocus", "abpBlur"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3$1.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo", "routerLink"] }, { type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i3.FormSubmitDirective, selector: "form[ngSubmit][formGroup]", inputs: ["debounce", "notValidateOnSubmit", "markAsDirtyWhenSubmit"], outputs: ["ngSubmit"] }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i6$1.ValidationGroupDirective, selector: "[formGroup],[formGroupName]", exportAs: ["validationGroup"] }, { type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: i6$1.ValidationDirective, selector: "[formControl],[formControlName]", exportAs: ["validationDirective"] }, { type: i3.AutofocusDirective, selector: "[autofocus]", inputs: ["autofocus"] }, { type: i1.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }], pipes: { "abpLocalization": i3.LocalizationPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LoginComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-login', template: "<h4>{{ 'AbpAccount::Login' | abpLocalization }}</h4>\r\n<strong *ngIf=\"isSelfRegistrationEnabled\">\r\n  {{ 'AbpAccount::AreYouANewUser' | abpLocalization }}\r\n  <a class=\"text-decoration-none\" routerLink=\"/account/register\" queryParamsHandling=\"preserve\">{{\r\n    'AbpAccount::Register' | abpLocalization\r\n  }}</a>\r\n</strong>\r\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" validateOnSubmit class=\"mt-4\">\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"login-input-user-name-or-email-address\" class=\"form-label\">{{\r\n      'AbpAccount::UserNameOrEmailAddress' | abpLocalization\r\n    }}</label>\r\n    <input\r\n      class=\"form-control\"\r\n      type=\"text\"\r\n      id=\"login-input-user-name-or-email-address\"\r\n      formControlName=\"username\"\r\n      autocomplete=\"username\"\r\n      autofocus\r\n    />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"login-input-password\" class=\"form-label\">{{ 'AbpAccount::Password' | abpLocalization }}</label>\r\n    <input\r\n      class=\"form-control\"\r\n      type=\"password\"\r\n      id=\"login-input-password\"\r\n      formControlName=\"password\"\r\n      autocomplete=\"current-password\"\r\n    />\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col\">\r\n      <div class=\"form-check\">\r\n        <label class=\"form-check-label mb-2\" for=\"login-input-remember-me\">\r\n          <input\r\n            class=\"form-check-input\"\r\n            type=\"checkbox\"\r\n            id=\"login-input-remember-me\"\r\n            formControlName=\"rememberMe\"\r\n          />\r\n          {{ 'AbpAccount::RememberMe' | abpLocalization }}\r\n        </label>\r\n      </div>\r\n    </div>\r\n    <div class=\"text-end col\">\r\n      <a routerLink=\"/account/forgot-password\">{{\r\n        'AbpAccount::ForgotPassword' | abpLocalization\r\n      }}</a>\r\n    </div>\r\n  </div>\r\n\r\n  <abp-button\r\n    [loading]=\"inProgress\"\r\n    buttonType=\"submit\"\r\n    name=\"Action\"\r\n    buttonClass=\"btn-block btn-lg mt-3 btn btn-primary\"\r\n  >\r\n    {{ 'AbpAccount::Login' | abpLocalization }}\r\n  </abp-button>\r\n</form>\r\n" }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.FormBuilder }, { type: i2$1.ToasterService }, { type: i3.AuthService }, { type: i3.ConfigStateService }]; } });

class ManageProfileStateService {
    constructor() {
        this.store = new InternalStore({});
    }
    get createOnUpdateStream() {
        return this.store.sliceUpdate;
    }
    getProfile$() {
        return this.store.sliceState(state => state.profile);
    }
    getProfile() {
        return this.store.state.profile;
    }
    setProfile(profile) {
        this.store.patch({ profile });
    }
}
ManageProfileStateService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ManageProfileStateService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ManageProfileStateService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ManageProfileStateService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ManageProfileStateService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });

const { required: required$2 } = Validators;
const PASSWORD_FIELDS$1 = ['newPassword', 'repeatNewPassword'];
class ChangePasswordComponent {
    constructor(fb, injector, toasterService, profileService, manageProfileState) {
        this.fb = fb;
        this.injector = injector;
        this.toasterService = toasterService;
        this.profileService = profileService;
        this.manageProfileState = manageProfileState;
        this.mapErrorsFn = (errors, groupErrors, control) => {
            if (PASSWORD_FIELDS$1.indexOf(String(control.name)) < 0)
                return errors;
            return errors.concat(groupErrors.filter(({ key }) => key === 'passwordMismatch'));
        };
    }
    ngOnInit() {
        var _a;
        this.hideCurrentPassword = !((_a = this.manageProfileState.getProfile()) === null || _a === void 0 ? void 0 : _a.hasPassword);
        const passwordValidations = getPasswordValidators(this.injector);
        this.form = this.fb.group({
            password: ['', required$2],
            newPassword: [
                '',
                {
                    validators: [required$2, ...passwordValidations],
                },
            ],
            repeatNewPassword: [
                '',
                {
                    validators: [required$2, ...passwordValidations],
                },
            ],
        }, {
            validators: [comparePasswords(PASSWORD_FIELDS$1)],
        });
        if (this.hideCurrentPassword)
            this.form.removeControl('password');
    }
    onSubmit() {
        if (this.form.invalid)
            return;
        this.inProgress = true;
        this.profileService
            .changePassword(Object.assign(Object.assign({}, (!this.hideCurrentPassword && { currentPassword: this.form.get('password').value })), { newPassword: this.form.get('newPassword').value }))
            .pipe(finalize(() => (this.inProgress = false)))
            .subscribe({
            next: () => {
                this.form.reset();
                this.toasterService.success('AbpAccount::PasswordChangedMessage', '', {
                    life: 5000,
                });
                if (this.hideCurrentPassword) {
                    this.hideCurrentPassword = false;
                    this.form.addControl('password', new FormControl('', [required$2]));
                }
            },
            error: err => {
                var _a, _b;
                this.toasterService.error(((_b = (_a = err.error) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.message) || 'AbpAccount::DefaultErrorMessage');
            },
        });
    }
}
ChangePasswordComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ChangePasswordComponent, deps: [{ token: i1.FormBuilder }, { token: i0.Injector }, { token: i2$1.ToasterService }, { token: i2.ProfileService }, { token: ManageProfileStateService }], target: i0.ɵɵFactoryTarget.Component });
ChangePasswordComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: ChangePasswordComponent, selector: "abp-change-password-form", exportAs: ["abpChangePasswordForm"], ngImport: i0, template: "<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" [mapErrorsFn]=\"mapErrorsFn\" validateOnSubmit>\r\n  <div *ngIf=\"!hideCurrentPassword\" class=\"mb-3 form-group\">\r\n    <label for=\"current-password\" class=\"form-label\">{{\r\n      'AbpIdentity::DisplayName:CurrentPassword' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type=\"password\"\r\n      id=\"current-password\"\r\n      class=\"form-control\"\r\n      formControlName=\"password\"\r\n      autofocus\r\n      autocomplete=\"current-password\"\r\n    />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"new-password\" class=\"form-label\">{{\r\n      'AbpIdentity::DisplayName:NewPassword' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type=\"password\"\r\n      id=\"new-password\"\r\n      class=\"form-control\"\r\n      formControlName=\"newPassword\"\r\n      autocomplete=\"new-password\"\r\n    />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"confirm-new-password\" class=\"form-label\">{{\r\n      'AbpIdentity::DisplayName:NewPasswordConfirm' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type=\"password\"\r\n      id=\"confirm-new-password\"\r\n      class=\"form-control\"\r\n      formControlName=\"repeatNewPassword\"\r\n      autocomplete=\"new-password\"\r\n    />\r\n  </div>\r\n  <abp-button\r\n    iconClass=\"fa fa-check\"\r\n    buttonClass=\"btn btn-primary color-white\"\r\n    buttonType=\"submit\"\r\n    [loading]=\"inProgress\"\r\n    [disabled]=\"form?.invalid\"\r\n    >{{ 'AbpIdentity::Save' | abpLocalization }}</abp-button\r\n  >\r\n</form>\r\n", components: [{ type: i2$1.ButtonComponent, selector: "abp-button", inputs: ["buttonId", "buttonClass", "buttonType", "formName", "iconClass", "loading", "disabled", "attributes"], outputs: ["click", "focus", "blur", "abpClick", "abpFocus", "abpBlur"] }], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i3.FormSubmitDirective, selector: "form[ngSubmit][formGroup]", inputs: ["debounce", "notValidateOnSubmit", "markAsDirtyWhenSubmit"], outputs: ["ngSubmit"] }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i6$1.ValidationGroupDirective, selector: "[formGroup],[formGroupName]", exportAs: ["validationGroup"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: i6$1.ValidationDirective, selector: "[formControl],[formControlName]", exportAs: ["validationDirective"] }, { type: i3.AutofocusDirective, selector: "[autofocus]", inputs: ["autofocus"] }], pipes: { "abpLocalization": i3.LocalizationPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ChangePasswordComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-change-password-form', exportAs: 'abpChangePasswordForm', template: "<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" [mapErrorsFn]=\"mapErrorsFn\" validateOnSubmit>\r\n  <div *ngIf=\"!hideCurrentPassword\" class=\"mb-3 form-group\">\r\n    <label for=\"current-password\" class=\"form-label\">{{\r\n      'AbpIdentity::DisplayName:CurrentPassword' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type=\"password\"\r\n      id=\"current-password\"\r\n      class=\"form-control\"\r\n      formControlName=\"password\"\r\n      autofocus\r\n      autocomplete=\"current-password\"\r\n    />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"new-password\" class=\"form-label\">{{\r\n      'AbpIdentity::DisplayName:NewPassword' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type=\"password\"\r\n      id=\"new-password\"\r\n      class=\"form-control\"\r\n      formControlName=\"newPassword\"\r\n      autocomplete=\"new-password\"\r\n    />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"confirm-new-password\" class=\"form-label\">{{\r\n      'AbpIdentity::DisplayName:NewPasswordConfirm' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type=\"password\"\r\n      id=\"confirm-new-password\"\r\n      class=\"form-control\"\r\n      formControlName=\"repeatNewPassword\"\r\n      autocomplete=\"new-password\"\r\n    />\r\n  </div>\r\n  <abp-button\r\n    iconClass=\"fa fa-check\"\r\n    buttonClass=\"btn btn-primary color-white\"\r\n    buttonType=\"submit\"\r\n    [loading]=\"inProgress\"\r\n    [disabled]=\"form?.invalid\"\r\n    >{{ 'AbpIdentity::Save' | abpLocalization }}</abp-button\r\n  >\r\n</form>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i0.Injector }, { type: i2$1.ToasterService }, { type: i2.ProfileService }, { type: ManageProfileStateService }]; } });

const { maxLength: maxLength$1, required: required$1, email: email$1 } = Validators;
class PersonalSettingsComponent {
    constructor(fb, toasterService, profileService, manageProfileState) {
        this.fb = fb;
        this.toasterService = toasterService;
        this.profileService = profileService;
        this.manageProfileState = manageProfileState;
    }
    ngOnInit() {
        this.buildForm();
    }
    buildForm() {
        const profile = this.manageProfileState.getProfile();
        this.form = this.fb.group({
            userName: [profile.userName, [required$1, maxLength$1(256)]],
            email: [profile.email, [required$1, email$1, maxLength$1(256)]],
            name: [profile.name || '', [maxLength$1(64)]],
            surname: [profile.surname || '', [maxLength$1(64)]],
            phoneNumber: [profile.phoneNumber || '', [maxLength$1(16)]],
        });
    }
    submit() {
        if (this.form.invalid)
            return;
        this.inProgress = true;
        this.profileService
            .update(this.form.value)
            .pipe(finalize(() => (this.inProgress = false)))
            .subscribe(profile => {
            this.manageProfileState.setProfile(profile);
            this.toasterService.success('AbpAccount::PersonalSettingsSaved', 'Success', { life: 5000 });
        });
    }
}
PersonalSettingsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: PersonalSettingsComponent, deps: [{ token: i1.FormBuilder }, { token: i2$1.ToasterService }, { token: i2.ProfileService }, { token: ManageProfileStateService }], target: i0.ɵɵFactoryTarget.Component });
PersonalSettingsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: PersonalSettingsComponent, selector: "abp-personal-settings-form", exportAs: ["abpPersonalSettingsForm"], ngImport: i0, template: "<form validateOnSubmit *ngIf=\"form\" [formGroup]=\"form\" (ngSubmit)=\"submit()\">\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"username\" class=\"form-label\">{{\r\n      'AbpIdentity::DisplayName:UserName' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type=\"text\"\r\n      id=\"username\"\r\n      class=\"form-control\"\r\n      formControlName=\"userName\"\r\n      autofocus\r\n      (keydown.space)=\"$event.preventDefault()\"\r\n    />\r\n  </div>\r\n  <div class=\"row\">\r\n    <div class=\"col col-md-6\">\r\n      <div class=\"mb-3 form-group\">\r\n        <label for=\"name\" class=\"form-label\">{{\r\n          'AbpIdentity::DisplayName:Name' | abpLocalization\r\n        }}</label\r\n        ><input type=\"text\" id=\"name\" class=\"form-control\" formControlName=\"name\" />\r\n      </div>\r\n    </div>\r\n    <div class=\"col col-md-6\">\r\n      <div class=\"mb-3 form-group\">\r\n        <label for=\"surname\" class=\"form-label\">{{\r\n          'AbpIdentity::DisplayName:Surname' | abpLocalization\r\n        }}</label\r\n        ><input type=\"text\" id=\"surname\" class=\"form-control\" formControlName=\"surname\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"email-address\" class=\"form-label\">{{\r\n      'AbpIdentity::DisplayName:Email' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input type=\"text\" id=\"email-address\" class=\"form-control\" formControlName=\"email\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"phone-number\" class=\"form-label\">{{\r\n      'AbpIdentity::DisplayName:PhoneNumber' | abpLocalization\r\n    }}</label\r\n    ><input type=\"text\" id=\"phone-number\" class=\"form-control\" formControlName=\"phoneNumber\" />\r\n  </div>\r\n  <abp-button\r\n    buttonType=\"submit\"\r\n    iconClass=\"fa fa-check\"\r\n    buttonClass=\"btn btn-primary color-white\"\r\n    [loading]=\"inProgress\"\r\n    [disabled]=\"form?.invalid\"\r\n  >\r\n    {{ 'AbpIdentity::Save' | abpLocalization }}</abp-button\r\n  >\r\n</form>\r\n", components: [{ type: i2$1.ButtonComponent, selector: "abp-button", inputs: ["buttonId", "buttonClass", "buttonType", "formName", "iconClass", "loading", "disabled", "attributes"], outputs: ["click", "focus", "blur", "abpClick", "abpFocus", "abpBlur"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i3.FormSubmitDirective, selector: "form[ngSubmit][formGroup]", inputs: ["debounce", "notValidateOnSubmit", "markAsDirtyWhenSubmit"], outputs: ["ngSubmit"] }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i6$1.ValidationGroupDirective, selector: "[formGroup],[formGroupName]", exportAs: ["validationGroup"] }, { type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: i6$1.ValidationDirective, selector: "[formControl],[formControlName]", exportAs: ["validationDirective"] }, { type: i3.AutofocusDirective, selector: "[autofocus]", inputs: ["autofocus"] }], pipes: { "abpLocalization": i3.LocalizationPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: PersonalSettingsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-personal-settings-form', exportAs: 'abpPersonalSettingsForm', template: "<form validateOnSubmit *ngIf=\"form\" [formGroup]=\"form\" (ngSubmit)=\"submit()\">\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"username\" class=\"form-label\">{{\r\n      'AbpIdentity::DisplayName:UserName' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type=\"text\"\r\n      id=\"username\"\r\n      class=\"form-control\"\r\n      formControlName=\"userName\"\r\n      autofocus\r\n      (keydown.space)=\"$event.preventDefault()\"\r\n    />\r\n  </div>\r\n  <div class=\"row\">\r\n    <div class=\"col col-md-6\">\r\n      <div class=\"mb-3 form-group\">\r\n        <label for=\"name\" class=\"form-label\">{{\r\n          'AbpIdentity::DisplayName:Name' | abpLocalization\r\n        }}</label\r\n        ><input type=\"text\" id=\"name\" class=\"form-control\" formControlName=\"name\" />\r\n      </div>\r\n    </div>\r\n    <div class=\"col col-md-6\">\r\n      <div class=\"mb-3 form-group\">\r\n        <label for=\"surname\" class=\"form-label\">{{\r\n          'AbpIdentity::DisplayName:Surname' | abpLocalization\r\n        }}</label\r\n        ><input type=\"text\" id=\"surname\" class=\"form-control\" formControlName=\"surname\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"email-address\" class=\"form-label\">{{\r\n      'AbpIdentity::DisplayName:Email' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input type=\"text\" id=\"email-address\" class=\"form-control\" formControlName=\"email\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"phone-number\" class=\"form-label\">{{\r\n      'AbpIdentity::DisplayName:PhoneNumber' | abpLocalization\r\n    }}</label\r\n    ><input type=\"text\" id=\"phone-number\" class=\"form-control\" formControlName=\"phoneNumber\" />\r\n  </div>\r\n  <abp-button\r\n    buttonType=\"submit\"\r\n    iconClass=\"fa fa-check\"\r\n    buttonClass=\"btn btn-primary color-white\"\r\n    [loading]=\"inProgress\"\r\n    [disabled]=\"form?.invalid\"\r\n  >\r\n    {{ 'AbpIdentity::Save' | abpLocalization }}</abp-button\r\n  >\r\n</form>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i2$1.ToasterService }, { type: i2.ProfileService }, { type: ManageProfileStateService }]; } });

class ManageProfileComponent {
    constructor(profileService, manageProfileState) {
        this.profileService = profileService;
        this.manageProfileState = manageProfileState;
        this.selectedTab = 0;
        this.changePasswordKey = "Account.ChangePasswordComponent" /* ChangePassword */;
        this.personalSettingsKey = "Account.PersonalSettingsComponent" /* PersonalSettings */;
        this.profile$ = this.manageProfileState.getProfile$();
    }
    ngOnInit() {
        this.profileService.get().subscribe(profile => {
            this.manageProfileState.setProfile(profile);
            if (profile.isExternal) {
                this.hideChangePasswordTab = true;
                this.selectedTab = 1;
            }
        });
    }
}
ManageProfileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ManageProfileComponent, deps: [{ token: i2.ProfileService }, { token: ManageProfileStateService }], target: i0.ɵɵFactoryTarget.Component });
ManageProfileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: ManageProfileComponent, selector: "abp-manage-profile", ngImport: i0, template: "<div id=\"AbpContentToolbar\"></div>\r\n\r\n<div class=\"card border-0 shadow-sm min-h-400\" [abpLoading]=\"!(profile$ | async)?.userName\">\r\n  <div class=\"card-body\">\r\n    <div class=\"row\">\r\n      <div class=\"col-12 col-md-3\">\r\n        <ul class=\"nav flex-column nav-pills\" id=\"nav-tab\" role=\"tablist\">\r\n          <li\r\n            *ngIf=\"!hideChangePasswordTab && (profile$ | async)\"\r\n            class=\"nav-item\"\r\n            (click)=\"selectedTab = 0\"\r\n          >\r\n            <a\r\n              class=\"nav-link\"\r\n              [ngClass]=\"{ active: selectedTab === 0 }\"\r\n              role=\"tab\"\r\n              href=\"javascript:void(0)\"\r\n              >{{ 'AbpUi::ChangePassword' | abpLocalization }}</a\r\n            >\r\n          </li>\r\n          <li class=\"nav-item mb-2\" (click)=\"selectedTab = 1\">\r\n            <a\r\n              class=\"nav-link\"\r\n              [ngClass]=\"{ active: selectedTab === 1 }\"\r\n              role=\"tab\"\r\n              href=\"javascript:void(0)\"\r\n              >{{ 'AbpAccount::PersonalSettings' | abpLocalization }}</a\r\n            >\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div *ngIf=\"profile$ | async\" class=\"col-12 col-md-9\">\r\n        <div class=\"tab-content\" *ngIf=\"selectedTab === 0\" [@fadeIn]>\r\n          <div class=\"tab-pane active\" role=\"tabpanel\">\r\n            <h4>\r\n              {{ 'AbpIdentity::ChangePassword' | abpLocalization }}\r\n              <hr />\r\n            </h4>\r\n            <abp-change-password-form\r\n              *abpReplaceableTemplate=\"{\r\n                componentKey: changePasswordKey\r\n              }\"\r\n            ></abp-change-password-form>\r\n          </div>\r\n        </div>\r\n        <div class=\"tab-content\" *ngIf=\"selectedTab === 1\" [@fadeIn]>\r\n          <div class=\"tab-pane active\" role=\"tabpanel\">\r\n            <h4>\r\n              {{ 'AbpIdentity::PersonalSettings' | abpLocalization }}\r\n              <hr />\r\n            </h4>\r\n            <abp-personal-settings-form\r\n              *abpReplaceableTemplate=\"{\r\n                componentKey: personalSettingsKey\r\n              }\"\r\n            ></abp-personal-settings-form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n", styles: [".min-h-400{min-height:400px}\n"], components: [{ type: ChangePasswordComponent, selector: "abp-change-password-form", exportAs: ["abpChangePasswordForm"] }, { type: PersonalSettingsComponent, selector: "abp-personal-settings-form", exportAs: ["abpPersonalSettingsForm"] }], directives: [{ type: i2$1.LoadingDirective, selector: "[abpLoading]", inputs: ["abpLoading", "abpLoadingTargetElement", "abpLoadingDelay"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3.ReplaceableTemplateDirective, selector: "[abpReplaceableTemplate]", inputs: ["abpReplaceableTemplate"] }], pipes: { "async": i6.AsyncPipe, "abpLocalization": i3.LocalizationPipe }, animations: [trigger('fadeIn', [transition(':enter', useAnimation(fadeIn))])] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ManageProfileComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-manage-profile', animations: [trigger('fadeIn', [transition(':enter', useAnimation(fadeIn))])], styles: [
                        `
      .min-h-400 {
        min-height: 400px;
      }
    `,
                    ], template: "<div id=\"AbpContentToolbar\"></div>\r\n\r\n<div class=\"card border-0 shadow-sm min-h-400\" [abpLoading]=\"!(profile$ | async)?.userName\">\r\n  <div class=\"card-body\">\r\n    <div class=\"row\">\r\n      <div class=\"col-12 col-md-3\">\r\n        <ul class=\"nav flex-column nav-pills\" id=\"nav-tab\" role=\"tablist\">\r\n          <li\r\n            *ngIf=\"!hideChangePasswordTab && (profile$ | async)\"\r\n            class=\"nav-item\"\r\n            (click)=\"selectedTab = 0\"\r\n          >\r\n            <a\r\n              class=\"nav-link\"\r\n              [ngClass]=\"{ active: selectedTab === 0 }\"\r\n              role=\"tab\"\r\n              href=\"javascript:void(0)\"\r\n              >{{ 'AbpUi::ChangePassword' | abpLocalization }}</a\r\n            >\r\n          </li>\r\n          <li class=\"nav-item mb-2\" (click)=\"selectedTab = 1\">\r\n            <a\r\n              class=\"nav-link\"\r\n              [ngClass]=\"{ active: selectedTab === 1 }\"\r\n              role=\"tab\"\r\n              href=\"javascript:void(0)\"\r\n              >{{ 'AbpAccount::PersonalSettings' | abpLocalization }}</a\r\n            >\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div *ngIf=\"profile$ | async\" class=\"col-12 col-md-9\">\r\n        <div class=\"tab-content\" *ngIf=\"selectedTab === 0\" [@fadeIn]>\r\n          <div class=\"tab-pane active\" role=\"tabpanel\">\r\n            <h4>\r\n              {{ 'AbpIdentity::ChangePassword' | abpLocalization }}\r\n              <hr />\r\n            </h4>\r\n            <abp-change-password-form\r\n              *abpReplaceableTemplate=\"{\r\n                componentKey: changePasswordKey\r\n              }\"\r\n            ></abp-change-password-form>\r\n          </div>\r\n        </div>\r\n        <div class=\"tab-content\" *ngIf=\"selectedTab === 1\" [@fadeIn]>\r\n          <div class=\"tab-pane active\" role=\"tabpanel\">\r\n            <h4>\r\n              {{ 'AbpIdentity::PersonalSettings' | abpLocalization }}\r\n              <hr />\r\n            </h4>\r\n            <abp-personal-settings-form\r\n              *abpReplaceableTemplate=\"{\r\n                componentKey: personalSettingsKey\r\n              }\"\r\n            ></abp-personal-settings-form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n" }]
        }], ctorParameters: function () { return [{ type: i2.ProfileService }, { type: ManageProfileStateService }]; } });

const { maxLength, required, email } = Validators;
class RegisterComponent {
    constructor(fb, accountService, configState, toasterService, authService, injector) {
        this.fb = fb;
        this.accountService = accountService;
        this.configState = configState;
        this.toasterService = toasterService;
        this.authService = authService;
        this.injector = injector;
        this.isSelfRegistrationEnabled = true;
        this.authWrapperKey = "Account.AuthWrapperComponent" /* AuthWrapper */;
    }
    ngOnInit() {
        this.init();
        this.buildForm();
    }
    init() {
        this.isSelfRegistrationEnabled =
            (this.configState.getSetting('Abp.Account.IsSelfRegistrationEnabled') || '').toLowerCase() !==
                'false';
        if (!this.isSelfRegistrationEnabled) {
            this.toasterService.warn({
                key: 'AbpAccount::SelfRegistrationDisabledMessage',
                defaultValue: 'Self registration is disabled.',
            }, null, { life: 10000 });
            return;
        }
    }
    buildForm() {
        this.form = this.fb.group({
            username: ['', [required, maxLength(255)]],
            password: ['', [required, ...getPasswordValidators(this.injector)]],
            email: ['', [required, email]],
        });
    }
    onSubmit() {
        if (this.form.invalid)
            return;
        this.inProgress = true;
        const newUser = {
            userName: this.form.get('username').value,
            password: this.form.get('password').value,
            emailAddress: this.form.get('email').value,
            appName: 'Angular',
        };
        this.accountService
            .register(newUser)
            .pipe(switchMap(() => this.authService.login({
            username: newUser.userName,
            password: newUser.password,
            redirectUrl: getRedirectUrl(this.injector),
        })), catchError(err => {
            var _a, _b;
            this.toasterService.error(((_a = err.error) === null || _a === void 0 ? void 0 : _a.error_description) ||
                ((_b = err.error) === null || _b === void 0 ? void 0 : _b.error.message) ||
                'AbpAccount::DefaultErrorMessage', null, { life: 7000 });
            return throwError(err);
        }), finalize(() => (this.inProgress = false)))
            .subscribe();
    }
}
RegisterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: RegisterComponent, deps: [{ token: i1.FormBuilder }, { token: i2.AccountService }, { token: i3.ConfigStateService }, { token: i2$1.ToasterService }, { token: i3.AuthService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
RegisterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: RegisterComponent, selector: "abp-register", ngImport: i0, template: "<h4>{{ 'AbpAccount::Register' | abpLocalization }}</h4>\r\n<strong>\r\n  {{ 'AbpAccount::AlreadyRegistered' | abpLocalization }}\r\n  <a class=\"text-decoration-none\" routerLink=\"/account/login\">{{\r\n    'AbpAccount::Login' | abpLocalization\r\n  }}</a>\r\n</strong>\r\n<form\r\n  *ngIf=\"isSelfRegistrationEnabled\"\r\n  [formGroup]=\"form\"\r\n  (ngSubmit)=\"onSubmit()\"\r\n  validateOnSubmit\r\n  class=\"mt-4\"\r\n>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"input-user-name\" class=\"form-label\">{{\r\n      'AbpAccount::UserName' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input\r\n      autofocus\r\n      type=\"text\"\r\n      id=\"input-user-name\"\r\n      class=\"form-control\"\r\n      formControlName=\"username\"\r\n      autocomplete=\"username\"\r\n    />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"input-email-address\" class=\"form-label\">{{\r\n      'AbpAccount::EmailAddress' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input type=\"email\" id=\"input-email-address\" class=\"form-control\" formControlName=\"email\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"input-password\" class=\"form-label\">{{\r\n      'AbpAccount::Password' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type=\"password\"\r\n      id=\"input-password\"\r\n      class=\"form-control\"\r\n      formControlName=\"password\"\r\n      autocomplete=\"current-password\"\r\n    />\r\n  </div>\r\n  <abp-button\r\n    [loading]=\"inProgress\"\r\n    buttonType=\"submit\"\r\n    name=\"Action\"\r\n    buttonClass=\"btn-block btn-lg mt-3 btn btn-primary\"\r\n  >\r\n    {{ 'AbpAccount::Register' | abpLocalization }}\r\n  </abp-button>\r\n</form>\r\n", components: [{ type: i2$1.ButtonComponent, selector: "abp-button", inputs: ["buttonId", "buttonClass", "buttonType", "formName", "iconClass", "loading", "disabled", "attributes"], outputs: ["click", "focus", "blur", "abpClick", "abpFocus", "abpBlur"] }], directives: [{ type: i3$1.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo", "routerLink"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i3.FormSubmitDirective, selector: "form[ngSubmit][formGroup]", inputs: ["debounce", "notValidateOnSubmit", "markAsDirtyWhenSubmit"], outputs: ["ngSubmit"] }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i6$1.ValidationGroupDirective, selector: "[formGroup],[formGroupName]", exportAs: ["validationGroup"] }, { type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i3.AutofocusDirective, selector: "[autofocus]", inputs: ["autofocus"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: i6$1.ValidationDirective, selector: "[formControl],[formControlName]", exportAs: ["validationDirective"] }], pipes: { "abpLocalization": i3.LocalizationPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: RegisterComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-register', template: "<h4>{{ 'AbpAccount::Register' | abpLocalization }}</h4>\r\n<strong>\r\n  {{ 'AbpAccount::AlreadyRegistered' | abpLocalization }}\r\n  <a class=\"text-decoration-none\" routerLink=\"/account/login\">{{\r\n    'AbpAccount::Login' | abpLocalization\r\n  }}</a>\r\n</strong>\r\n<form\r\n  *ngIf=\"isSelfRegistrationEnabled\"\r\n  [formGroup]=\"form\"\r\n  (ngSubmit)=\"onSubmit()\"\r\n  validateOnSubmit\r\n  class=\"mt-4\"\r\n>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"input-user-name\" class=\"form-label\">{{\r\n      'AbpAccount::UserName' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input\r\n      autofocus\r\n      type=\"text\"\r\n      id=\"input-user-name\"\r\n      class=\"form-control\"\r\n      formControlName=\"username\"\r\n      autocomplete=\"username\"\r\n    />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"input-email-address\" class=\"form-label\">{{\r\n      'AbpAccount::EmailAddress' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input type=\"email\" id=\"input-email-address\" class=\"form-control\" formControlName=\"email\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"input-password\" class=\"form-label\">{{\r\n      'AbpAccount::Password' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type=\"password\"\r\n      id=\"input-password\"\r\n      class=\"form-control\"\r\n      formControlName=\"password\"\r\n      autocomplete=\"current-password\"\r\n    />\r\n  </div>\r\n  <abp-button\r\n    [loading]=\"inProgress\"\r\n    buttonType=\"submit\"\r\n    name=\"Action\"\r\n    buttonClass=\"btn-block btn-lg mt-3 btn btn-primary\"\r\n  >\r\n    {{ 'AbpAccount::Register' | abpLocalization }}\r\n  </abp-button>\r\n</form>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i2.AccountService }, { type: i3.ConfigStateService }, { type: i2$1.ToasterService }, { type: i3.AuthService }, { type: i0.Injector }]; } });

const PASSWORD_FIELDS = ['password', 'confirmPassword'];
class ResetPasswordComponent {
    constructor(fb, accountService, route, router, injector) {
        this.fb = fb;
        this.accountService = accountService;
        this.route = route;
        this.router = router;
        this.injector = injector;
        this.inProgress = false;
        this.isPasswordReset = false;
        this.mapErrorsFn = (errors, groupErrors, control) => {
            if (PASSWORD_FIELDS.indexOf(String(control.name)) < 0)
                return errors;
            return errors.concat(groupErrors.filter(({ key }) => key === 'passwordMismatch'));
        };
    }
    ngOnInit() {
        this.route.queryParams.subscribe(({ userId, resetToken }) => {
            if (!userId || !resetToken)
                this.router.navigateByUrl('/account/login');
            this.form = this.fb.group({
                userId: [userId, [Validators.required]],
                resetToken: [resetToken, [Validators.required]],
                password: ['', [Validators.required, ...getPasswordValidators(this.injector)]],
                confirmPassword: ['', [Validators.required, ...getPasswordValidators(this.injector)]],
            }, {
                validators: [comparePasswords(PASSWORD_FIELDS)],
            });
        });
    }
    onSubmit() {
        if (this.form.invalid || this.inProgress)
            return;
        this.inProgress = true;
        this.accountService
            .resetPassword({
            userId: this.form.get('userId').value,
            resetToken: this.form.get('resetToken').value,
            password: this.form.get('password').value,
        })
            .pipe(finalize(() => (this.inProgress = false)))
            .subscribe(() => {
            this.isPasswordReset = true;
        });
    }
}
ResetPasswordComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ResetPasswordComponent, deps: [{ token: i1.FormBuilder }, { token: i2.AccountService }, { token: i3$1.ActivatedRoute }, { token: i3$1.Router }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
ResetPasswordComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: ResetPasswordComponent, selector: "abp-reset-password", ngImport: i0, template: "<h4>{{ 'AbpAccount::ResetPassword' | abpLocalization }}</h4>\r\n\r\n<form\r\n  *ngIf=\"!isPasswordReset; else passwordResetTemplate\"\r\n  [formGroup]=\"form\"\r\n  [mapErrorsFn]=\"mapErrorsFn\"\r\n  (ngSubmit)=\"onSubmit()\"\r\n  validateOnSubmit\r\n>\r\n  <p>{{ 'AbpAccount::ResetPassword_Information' | abpLocalization }}</p>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"input-password\" class=\"form-label\">{{\r\n      'AbpAccount::Password' | abpLocalization\r\n    }}</label\r\n    ><span> * </span>\r\n    <input type=\"password\" id=\"input-password\" class=\"form-control\" formControlName=\"password\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"input-confirm-password\" class=\"form-label\">{{\r\n      'AbpAccount::ConfirmPassword' | abpLocalization\r\n    }}</label\r\n    ><span> * </span>\r\n    <input\r\n      type=\"password\"\r\n      id=\"input-confirm-password\"\r\n      class=\"form-control\"\r\n      formControlName=\"confirmPassword\"\r\n    />\r\n  </div>\r\n  <button class=\"me-2 btn btn-secondary\" type=\"button\" routerLink=\"/account/login\">\r\n    {{ 'AbpAccount::Cancel' | abpLocalization }}\r\n  </button>\r\n  <abp-button\r\n    buttonType=\"submit\"\r\n    buttonClass=\"me-2 btn btn-primary\"\r\n    [loading]=\"inProgress\"\r\n    (click)=\"onSubmit()\"\r\n  >\r\n    {{ 'AbpAccount::Submit' | abpLocalization }}\r\n  </abp-button>\r\n</form>\r\n\r\n<ng-template #passwordResetTemplate>\r\n  <p>\r\n    {{ 'AbpAccount::YourPasswordIsSuccessfullyReset' | abpLocalization }}\r\n  </p>\r\n\r\n  <a routerLink=\"/account/login\">\r\n    <button class=\"d-block mt-2 mb-3 btn btn-primary\">\r\n      {{ 'AbpAccount::BackToLogin' | abpLocalization }}\r\n    </button>\r\n  </a>\r\n</ng-template>\r\n", components: [{ type: i2$1.ButtonComponent, selector: "abp-button", inputs: ["buttonId", "buttonClass", "buttonType", "formName", "iconClass", "loading", "disabled", "attributes"], outputs: ["click", "focus", "blur", "abpClick", "abpFocus", "abpBlur"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i3.FormSubmitDirective, selector: "form[ngSubmit][formGroup]", inputs: ["debounce", "notValidateOnSubmit", "markAsDirtyWhenSubmit"], outputs: ["ngSubmit"] }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i6$1.ValidationGroupDirective, selector: "[formGroup],[formGroupName]", exportAs: ["validationGroup"] }, { type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: i6$1.ValidationDirective, selector: "[formControl],[formControlName]", exportAs: ["validationDirective"] }, { type: i3$1.RouterLink, selector: ":not(a):not(area)[routerLink]", inputs: ["queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo", "routerLink"] }, { type: i3$1.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo", "routerLink"] }], pipes: { "abpLocalization": i3.LocalizationPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ResetPasswordComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-reset-password', template: "<h4>{{ 'AbpAccount::ResetPassword' | abpLocalization }}</h4>\r\n\r\n<form\r\n  *ngIf=\"!isPasswordReset; else passwordResetTemplate\"\r\n  [formGroup]=\"form\"\r\n  [mapErrorsFn]=\"mapErrorsFn\"\r\n  (ngSubmit)=\"onSubmit()\"\r\n  validateOnSubmit\r\n>\r\n  <p>{{ 'AbpAccount::ResetPassword_Information' | abpLocalization }}</p>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"input-password\" class=\"form-label\">{{\r\n      'AbpAccount::Password' | abpLocalization\r\n    }}</label\r\n    ><span> * </span>\r\n    <input type=\"password\" id=\"input-password\" class=\"form-control\" formControlName=\"password\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"input-confirm-password\" class=\"form-label\">{{\r\n      'AbpAccount::ConfirmPassword' | abpLocalization\r\n    }}</label\r\n    ><span> * </span>\r\n    <input\r\n      type=\"password\"\r\n      id=\"input-confirm-password\"\r\n      class=\"form-control\"\r\n      formControlName=\"confirmPassword\"\r\n    />\r\n  </div>\r\n  <button class=\"me-2 btn btn-secondary\" type=\"button\" routerLink=\"/account/login\">\r\n    {{ 'AbpAccount::Cancel' | abpLocalization }}\r\n  </button>\r\n  <abp-button\r\n    buttonType=\"submit\"\r\n    buttonClass=\"me-2 btn btn-primary\"\r\n    [loading]=\"inProgress\"\r\n    (click)=\"onSubmit()\"\r\n  >\r\n    {{ 'AbpAccount::Submit' | abpLocalization }}\r\n  </abp-button>\r\n</form>\r\n\r\n<ng-template #passwordResetTemplate>\r\n  <p>\r\n    {{ 'AbpAccount::YourPasswordIsSuccessfullyReset' | abpLocalization }}\r\n  </p>\r\n\r\n  <a routerLink=\"/account/login\">\r\n    <button class=\"d-block mt-2 mb-3 btn btn-primary\">\r\n      {{ 'AbpAccount::BackToLogin' | abpLocalization }}\r\n    </button>\r\n  </a>\r\n</ng-template>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i2.AccountService }, { type: i3$1.ActivatedRoute }, { type: i3$1.Router }, { type: i0.Injector }]; } });

class AuthenticationFlowGuard {
    constructor(authService) {
        this.authService = authService;
    }
    canActivate() {
        if (this.authService.isInternalAuth)
            return true;
        this.authService.navigateToLogin();
        return false;
    }
}
AuthenticationFlowGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: AuthenticationFlowGuard, deps: [{ token: i3.AuthService }], target: i0.ɵɵFactoryTarget.Injectable });
AuthenticationFlowGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: AuthenticationFlowGuard });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: AuthenticationFlowGuard, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i3.AuthService }]; } });

const routes = [
    { path: '', pathMatch: 'full', redirectTo: 'login' },
    {
        path: '',
        component: RouterOutletComponent,
        children: [
            {
                path: 'login',
                component: ReplaceableRouteContainerComponent,
                canActivate: [AuthenticationFlowGuard],
                data: {
                    replaceableComponent: {
                        key: "Account.LoginComponent" /* Login */,
                        defaultComponent: LoginComponent,
                    },
                },
            },
            {
                path: 'register',
                component: ReplaceableRouteContainerComponent,
                canActivate: [AuthenticationFlowGuard],
                data: {
                    replaceableComponent: {
                        key: "Account.RegisterComponent" /* Register */,
                        defaultComponent: RegisterComponent,
                    },
                },
            },
            {
                path: 'forgot-password',
                component: ReplaceableRouteContainerComponent,
                canActivate: [AuthenticationFlowGuard],
                data: {
                    replaceableComponent: {
                        key: "Account.ForgotPasswordComponent" /* ForgotPassword */,
                        defaultComponent: ForgotPasswordComponent,
                    },
                },
            },
            {
                path: 'reset-password',
                component: ReplaceableRouteContainerComponent,
                canActivate: [],
                data: {
                    tenantBoxVisible: false,
                    replaceableComponent: {
                        key: "Account.ResetPasswordComponent" /* ResetPassword */,
                        defaultComponent: ResetPasswordComponent,
                    },
                },
            },
            {
                path: 'manage',
                component: ReplaceableRouteContainerComponent,
                canActivate: [AuthGuard],
                data: {
                    replaceableComponent: {
                        key: "Account.ManageProfileComponent" /* ManageProfile */,
                        defaultComponent: ManageProfileComponent,
                    },
                },
            },
        ],
    },
];
class AccountRoutingModule {
}
AccountRoutingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: AccountRoutingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AccountRoutingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: AccountRoutingModule, imports: [i3$1.RouterModule], exports: [RouterModule] });
AccountRoutingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: AccountRoutingModule, imports: [[RouterModule.forChild(routes)], RouterModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: AccountRoutingModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [RouterModule.forChild(routes)],
                    exports: [RouterModule],
                }]
        }] });

function accountConfigOptionsFactory(options) {
    return Object.assign({ redirectUrl: '/' }, options);
}

const declarations = [
    LoginComponent,
    RegisterComponent,
    ChangePasswordComponent,
    ManageProfileComponent,
    PersonalSettingsComponent,
    ForgotPasswordComponent,
    ResetPasswordComponent,
];
class AccountModule {
    static forChild(options = {}) {
        return {
            ngModule: AccountModule,
            providers: [
                AuthenticationFlowGuard,
                { provide: ACCOUNT_CONFIG_OPTIONS, useValue: options },
                {
                    provide: 'ACCOUNT_OPTIONS',
                    useFactory: accountConfigOptionsFactory,
                    deps: [ACCOUNT_CONFIG_OPTIONS],
                },
            ],
        };
    }
    static forLazy(options = {}) {
        return new LazyModuleFactory(AccountModule.forChild(options));
    }
}
AccountModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: AccountModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AccountModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: AccountModule, declarations: [LoginComponent,
        RegisterComponent,
        ChangePasswordComponent,
        ManageProfileComponent,
        PersonalSettingsComponent,
        ForgotPasswordComponent,
        ResetPasswordComponent], imports: [CoreModule,
        AccountRoutingModule,
        ThemeSharedModule,
        NgbDropdownModule,
        NgxValidateCoreModule], exports: [LoginComponent,
        RegisterComponent,
        ChangePasswordComponent,
        ManageProfileComponent,
        PersonalSettingsComponent,
        ForgotPasswordComponent,
        ResetPasswordComponent] });
AccountModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: AccountModule, imports: [[
            CoreModule,
            AccountRoutingModule,
            ThemeSharedModule,
            NgbDropdownModule,
            NgxValidateCoreModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: AccountModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...declarations],
                    imports: [
                        CoreModule,
                        AccountRoutingModule,
                        ThemeSharedModule,
                        NgbDropdownModule,
                        NgxValidateCoreModule,
                    ],
                    exports: [...declarations],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ACCOUNT_CONFIG_OPTIONS, AccountModule, AuthenticationFlowGuard, ChangePasswordComponent, ForgotPasswordComponent, LoginComponent, ManageProfileComponent, ManageProfileStateService, PersonalSettingsComponent, RegisterComponent, ResetPasswordComponent };
//# sourceMappingURL=abp-ng.account.mjs.map

import { Compiler, Injector, NgModuleFactory, } from '@angular/core';
import { filter, map } from 'rxjs/operators';
export class LazyModuleFactory extends NgModuleFactory {
    constructor(moduleWithProviders) {
        super();
        this.moduleWithProviders = moduleWithProviders;
    }
    get moduleType() {
        return this.moduleWithProviders.ngModule;
    }
    create(parentInjector) {
        const injector = Injector.create({
            parent: parentInjector,
            providers: this.moduleWithProviders.providers,
        });
        const compiler = injector.get(Compiler);
        const factory = compiler.compileModuleSync(this.moduleType);
        return factory.create(injector);
    }
}
export function featuresFactory(configState, featureKeys, mapFn = features => features) {
    return configState.getFeatures$(featureKeys).pipe(filter(Boolean), map(mapFn));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2xpYi91dGlscy9mYWN0b3J5LXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxRQUFRLEVBQ1IsUUFBUSxFQUVSLGVBQWUsR0FJaEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUc3QyxNQUFNLE9BQU8saUJBQXFCLFNBQVEsZUFBa0I7SUFLMUQsWUFBb0IsbUJBQTJDO1FBQzdELEtBQUssRUFBRSxDQUFDO1FBRFUsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUF3QjtJQUUvRCxDQUFDO0lBTkQsSUFBSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDO0lBQzNDLENBQUM7SUFNRCxNQUFNLENBQUMsY0FBK0I7UUFDcEMsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUMvQixNQUFNLEVBQUUsY0FBYztZQUN0QixTQUFTLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFNBQTZCO1NBQ2xFLENBQUMsQ0FBQztRQUVILE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDeEMsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUU1RCxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbEMsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLGVBQWUsQ0FDN0IsV0FBK0IsRUFDL0IsV0FBcUIsRUFDckIsUUFBMkIsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRO0lBRS9DLE9BQU8sV0FBVyxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2pGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENvbXBpbGVyLFxyXG4gIEluamVjdG9yLFxyXG4gIE1vZHVsZVdpdGhQcm92aWRlcnMsXHJcbiAgTmdNb2R1bGVGYWN0b3J5LFxyXG4gIE5nTW9kdWxlUmVmLFxyXG4gIFN0YXRpY1Byb3ZpZGVyLFxyXG4gIFR5cGUsXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGZpbHRlciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBDb25maWdTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb25maWctc3RhdGUuc2VydmljZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgTGF6eU1vZHVsZUZhY3Rvcnk8VD4gZXh0ZW5kcyBOZ01vZHVsZUZhY3Rvcnk8VD4ge1xyXG4gIGdldCBtb2R1bGVUeXBlKCk6IFR5cGU8VD4ge1xyXG4gICAgcmV0dXJuIHRoaXMubW9kdWxlV2l0aFByb3ZpZGVycy5uZ01vZHVsZTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbW9kdWxlV2l0aFByb3ZpZGVyczogTW9kdWxlV2l0aFByb3ZpZGVyczxUPikge1xyXG4gICAgc3VwZXIoKTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZShwYXJlbnRJbmplY3RvcjogSW5qZWN0b3IgfCBudWxsKTogTmdNb2R1bGVSZWY8VD4ge1xyXG4gICAgY29uc3QgaW5qZWN0b3IgPSBJbmplY3Rvci5jcmVhdGUoe1xyXG4gICAgICBwYXJlbnQ6IHBhcmVudEluamVjdG9yLFxyXG4gICAgICBwcm92aWRlcnM6IHRoaXMubW9kdWxlV2l0aFByb3ZpZGVycy5wcm92aWRlcnMgYXMgU3RhdGljUHJvdmlkZXJbXSxcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGNvbXBpbGVyID0gaW5qZWN0b3IuZ2V0KENvbXBpbGVyKTtcclxuICAgIGNvbnN0IGZhY3RvcnkgPSBjb21waWxlci5jb21waWxlTW9kdWxlU3luYyh0aGlzLm1vZHVsZVR5cGUpO1xyXG5cclxuICAgIHJldHVybiBmYWN0b3J5LmNyZWF0ZShpbmplY3Rvcik7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmVhdHVyZXNGYWN0b3J5KFxyXG4gIGNvbmZpZ1N0YXRlOiBDb25maWdTdGF0ZVNlcnZpY2UsXHJcbiAgZmVhdHVyZUtleXM6IHN0cmluZ1tdLFxyXG4gIG1hcEZuOiAoZmVhdHVyZXMpID0+IGFueSA9IGZlYXR1cmVzID0+IGZlYXR1cmVzLFxyXG4pIHtcclxuICByZXR1cm4gY29uZmlnU3RhdGUuZ2V0RmVhdHVyZXMkKGZlYXR1cmVLZXlzKS5waXBlKGZpbHRlcihCb29sZWFuKSwgbWFwKG1hcEZuKSk7XHJcbn1cclxuIl19
import clone from 'just-clone';
import { tap } from 'rxjs/operators';
import { EnvironmentService } from '../services/environment.service';
import { MultiTenancyService } from '../services/multi-tenancy.service';
import { createTokenParser } from './string-utils';
const tenancyPlaceholder = '{0}';
function getCurrentTenancyName(appBaseUrl) {
    if (appBaseUrl.charAt(appBaseUrl.length - 1) !== '/')
        appBaseUrl += '/';
    const parseTokens = createTokenParser(appBaseUrl);
    const token = tenancyPlaceholder.replace(/[}{]/g, '');
    return parseTokens(window.location.href)[token]?.[0];
}
function getCurrentTenancyNameFromUrl(tenantKey) {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get(tenantKey);
}
export async function parseTenantFromUrl(injector) {
    const environmentService = injector.get(EnvironmentService);
    const multiTenancyService = injector.get(MultiTenancyService);
    const baseUrl = environmentService.getEnvironment()?.application?.baseUrl || '';
    const tenancyName = getCurrentTenancyName(baseUrl);
    const hideTenantBox = () => {
        multiTenancyService.isTenantBoxVisible = false;
    };
    const setDomainTenant = (tenant) => {
        multiTenancyService.domainTenant = {
            id: tenant.tenantId,
            name: tenant.name,
            isAvailable: true,
        };
    };
    const setEnvironmentWithDomainTenant = (tenant) => {
        hideTenantBox();
        setDomainTenant(tenant);
    };
    if (tenancyName) {
        /**
         * We have to replace tenant name within the urls from environment,
         * because the code below will make a http request to find information about the domain tenant.
         * Before this request takes place, we need to replace placeholders aka "{0}".
         */
        replaceTenantNameWithinEnvironment(injector, tenancyName);
        return multiTenancyService
            .setTenantByName(tenancyName)
            .pipe(tap(setEnvironmentWithDomainTenant))
            .toPromise();
    }
    else {
        /**
         * If there is no tenant, we still have to clean up {0}. from baseUrl to avoid incorrect http requests.
         */
        replaceTenantNameWithinEnvironment(injector, '', tenancyPlaceholder + '.');
        const tenantIdFromQueryParams = getCurrentTenancyNameFromUrl(multiTenancyService.tenantKey);
        if (tenantIdFromQueryParams) {
            return multiTenancyService.setTenantById(tenantIdFromQueryParams).toPromise();
        }
    }
    return Promise.resolve();
}
function replaceTenantNameWithinEnvironment(injector, tenancyName, placeholder = tenancyPlaceholder) {
    const environmentService = injector.get(EnvironmentService);
    const environment = clone(environmentService.getEnvironment());
    if (environment.application.baseUrl) {
        environment.application.baseUrl = environment.application.baseUrl.replace(placeholder, tenancyName);
    }
    if (environment.oAuthConfig.redirectUri) {
        environment.oAuthConfig.redirectUri = environment.oAuthConfig.redirectUri.replace(placeholder, tenancyName);
    }
    environment.oAuthConfig.issuer = environment.oAuthConfig.issuer.replace(placeholder, tenancyName);
    Object.keys(environment.apis).forEach(api => {
        Object.keys(environment.apis[api]).forEach(key => {
            environment.apis[api][key] = environment.apis[api][key].replace(placeholder, tenancyName);
        });
    });
    return environmentService.setState(environment);
}
//# sourceMappingURL=data:application/json;base64,
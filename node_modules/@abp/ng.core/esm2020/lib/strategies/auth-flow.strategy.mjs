import { HttpHeaders } from '@angular/common/http';
import { Router } from '@angular/router';
import { OAuthErrorEvent, OAuthInfoEvent, OAuthService } from 'angular-oauth2-oidc';
import { from, of, pipe } from 'rxjs';
import { filter, switchMap, tap } from 'rxjs/operators';
import { ConfigStateService } from '../services/config-state.service';
import { EnvironmentService } from '../services/environment.service';
import { HttpErrorReporterService } from '../services/http-error-reporter.service';
import { SessionStateService } from '../services/session-state.service';
import { TENANT_KEY } from '../tokens/tenant-key.token';
import { removeRememberMe, setRememberMe } from '../utils/auth-utils';
import { noop } from '../utils/common-utils';
export const oAuthStorage = localStorage;
export class AuthFlowStrategy {
    constructor(injector) {
        this.injector = injector;
        this.catchError = err => {
            this.httpErrorReporter.reportError(err);
            return of(null);
        };
        this.httpErrorReporter = injector.get(HttpErrorReporterService);
        this.environment = injector.get(EnvironmentService);
        this.configState = injector.get(ConfigStateService);
        this.oAuthService = injector.get(OAuthService);
        this.sessionState = injector.get(SessionStateService);
        this.oAuthConfig = this.environment.getEnvironment().oAuthConfig;
        this.tenantKey = injector.get(TENANT_KEY);
        this.listenToOauthErrors();
    }
    async init() {
        const shouldClear = shouldStorageClear(this.environment.getEnvironment().oAuthConfig.clientId, oAuthStorage);
        if (shouldClear)
            clearOAuthStorage(oAuthStorage);
        this.oAuthService.configure(this.oAuthConfig);
        this.oAuthService.events
            .pipe(filter(event => event.type === 'token_refresh_error'))
            .subscribe(() => this.navigateToLogin());
        return this.oAuthService
            .loadDiscoveryDocument()
            .then(() => {
            if (this.oAuthService.hasValidAccessToken() || !this.oAuthService.getRefreshToken()) {
                return Promise.resolve();
            }
            return this.refreshToken();
        })
            .catch(this.catchError);
    }
    refreshToken() {
        return this.oAuthService.refreshToken().catch(() => clearOAuthStorage());
    }
    listenToOauthErrors() {
        this.oAuthService.events
            .pipe(filter(event => event instanceof OAuthErrorEvent), tap(() => clearOAuthStorage()), switchMap(() => this.configState.refreshAppState()))
            .subscribe();
    }
}
export class AuthCodeFlowStrategy extends AuthFlowStrategy {
    constructor() {
        super(...arguments);
        this.isInternalAuth = false;
    }
    async init() {
        return super
            .init()
            .then(() => this.oAuthService.tryLogin().catch(noop))
            .then(() => this.oAuthService.setupAutomaticSilentRefresh({}, 'access_token'));
    }
    navigateToLogin(queryParams) {
        this.oAuthService.initCodeFlow('', this.getCultureParams(queryParams));
    }
    checkIfInternalAuth(queryParams) {
        this.oAuthService.initCodeFlow('', this.getCultureParams(queryParams));
        return false;
    }
    logout(queryParams) {
        return from(this.oAuthService.revokeTokenAndLogout(this.getCultureParams(queryParams)));
    }
    login(queryParams) {
        this.oAuthService.initCodeFlow('', this.getCultureParams(queryParams));
        return of(null);
    }
    getCultureParams(queryParams) {
        const lang = this.sessionState.getLanguage();
        const culture = { culture: lang, 'ui-culture': lang };
        return { ...(lang && culture), ...queryParams };
    }
}
export class AuthPasswordFlowStrategy extends AuthFlowStrategy {
    constructor() {
        super(...arguments);
        this.isInternalAuth = true;
        this.cookieKey = 'rememberMe';
        this.storageKey = 'passwordFlow';
    }
    listenToTokenExpiration() {
        this.oAuthService.events
            .pipe(filter(event => event instanceof OAuthInfoEvent &&
            event.type === 'token_expires' &&
            event.info === 'access_token'))
            .subscribe(() => {
            if (this.oAuthService.getRefreshToken()) {
                this.refreshToken();
            }
            else {
                this.oAuthService.logOut();
                removeRememberMe();
                this.configState.refreshAppState().subscribe();
            }
        });
    }
    async init() {
        if (!getCookieValueByName(this.cookieKey) && localStorage.getItem(this.storageKey)) {
            this.oAuthService.logOut();
        }
        return super.init().then(() => this.listenToTokenExpiration());
    }
    navigateToLogin(queryParams) {
        const router = this.injector.get(Router);
        router.navigate(['/account/login'], { queryParams });
    }
    checkIfInternalAuth() {
        return true;
    }
    login(params) {
        const tenant = this.sessionState.getTenant();
        return from(this.oAuthService.fetchTokenUsingPasswordFlow(params.username, params.password, new HttpHeaders({ ...(tenant && tenant.id && { [this.tenantKey]: tenant.id }) }))).pipe(this.pipeToLogin(params));
    }
    pipeToLogin(params) {
        const router = this.injector.get(Router);
        return pipe(switchMap(() => this.configState.refreshAppState()), tap(() => {
            setRememberMe(params.rememberMe);
            if (params.redirectUrl)
                router.navigate([params.redirectUrl]);
        }));
    }
    logout(queryParams) {
        const router = this.injector.get(Router);
        return from(this.oAuthService.revokeTokenAndLogout(queryParams)).pipe(switchMap(() => this.configState.refreshAppState()), tap(() => {
            router.navigateByUrl('/');
            removeRememberMe();
        }));
    }
    refreshToken() {
        return this.oAuthService.refreshToken().catch(() => {
            clearOAuthStorage();
            removeRememberMe();
        });
    }
}
export const AUTH_FLOW_STRATEGY = {
    Code(injector) {
        return new AuthCodeFlowStrategy(injector);
    },
    Password(injector) {
        return new AuthPasswordFlowStrategy(injector);
    },
};
export function clearOAuthStorage(storage = oAuthStorage) {
    const keys = [
        'access_token',
        'id_token',
        'refresh_token',
        'nonce',
        'PKCE_verifier',
        'expires_at',
        'id_token_claims_obj',
        'id_token_expires_at',
        'id_token_stored_at',
        'access_token_stored_at',
        'granted_scopes',
        'session_state',
    ];
    keys.forEach(key => storage.removeItem(key));
}
function shouldStorageClear(clientId, storage) {
    const key = 'abpOAuthClientId';
    if (!storage.getItem(key)) {
        storage.setItem(key, clientId);
        return false;
    }
    const shouldClear = storage.getItem(key) !== clientId;
    if (shouldClear)
        storage.setItem(key, clientId);
    return shouldClear;
}
function getCookieValueByName(name) {
    const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
    return match ? match[2] : '';
}
//# sourceMappingURL=data:application/json;base64,
import { registerLocaleData } from '@angular/common';
import { Injectable, Injector, isDevMode, Optional, SkipSelf } from '@angular/core';
import { BehaviorSubject, combineLatest, from, Subject } from 'rxjs';
import { filter, map, mapTo, switchMap } from 'rxjs/operators';
import { localizations$ } from '../tokens/localization.token';
import { CORE_OPTIONS } from '../tokens/options.token';
import { createLocalizer, createLocalizerWithFallback } from '../utils/localization-utils';
import { interpolate } from '../utils/string-utils';
import { ConfigStateService } from './config-state.service';
import { SessionStateService } from './session-state.service';
import * as i0 from "@angular/core";
import * as i1 from "./session-state.service";
import * as i2 from "./config-state.service";
export class LocalizationService {
    constructor(sessionState, injector, otherInstance, configState) {
        this.sessionState = sessionState;
        this.injector = injector;
        this.configState = configState;
        this.latestLang = this.sessionState.getLanguage();
        this._languageChange$ = new Subject();
        this.uiLocalizations$ = new BehaviorSubject(new Map());
        this.localizations$ = new BehaviorSubject(new Map());
        if (otherInstance)
            throw new Error('LocalizationService should have only one instance.');
        this.listenToSetLanguage();
        this.initLocalizationValues();
    }
    /**
     * Returns currently selected language
     * Even though this looks like it's redundant to return the same value as `getLanguage()`,
     * it's actually not. This could be invoked any time, and the latestLang could be different from the
     * sessionState.getLanguage() value.
     */
    get currentLang() {
        return this.latestLang || this.sessionState.getLanguage();
    }
    get currentLang$() {
        return this.sessionState.getLanguage$();
    }
    get languageChange$() {
        return this._languageChange$.asObservable();
    }
    initLocalizationValues() {
        localizations$.subscribe(val => this.addLocalization(val));
        const remoteLocalizations$ = this.configState.getDeep$('localization.values');
        const currentLanguage$ = this.sessionState.getLanguage$();
        const uiLocalizations$ = combineLatest([currentLanguage$, this.uiLocalizations$]).pipe(map(([currentLang, localizations]) => localizations.get(currentLang)));
        combineLatest([remoteLocalizations$, uiLocalizations$])
            .pipe(map(([remote, local]) => {
            if (remote) {
                if (!local) {
                    local = new Map();
                }
                Object.entries(remote).forEach(entry => {
                    const resourceName = entry[0];
                    const remoteTexts = entry[1];
                    let resource = local.get(resourceName) || {};
                    resource = { ...resource, ...remoteTexts };
                    local.set(resourceName, resource);
                });
            }
            return local;
        }))
            .subscribe(val => this.localizations$.next(val));
    }
    addLocalization(localizations) {
        if (!localizations)
            return;
        const localizationMap = this.uiLocalizations$.value;
        localizations.forEach(loc => {
            const cultureMap = localizationMap.get(loc.culture) || new Map();
            loc.resources.forEach(res => {
                let resource = cultureMap.get(res.resourceName) || {};
                resource = { ...resource, ...res.texts };
                cultureMap.set(res.resourceName, resource);
            });
            localizationMap.set(loc.culture, cultureMap);
        });
        this.uiLocalizations$.next(localizationMap);
    }
    listenToSetLanguage() {
        this.sessionState
            .onLanguageChange$()
            .pipe(filter(lang => this.configState.getDeep('localization.currentCulture.cultureName') !== lang), switchMap(lang => this.configState.refreshAppState().pipe(mapTo(lang))), switchMap(lang => from(this.registerLocale(lang).then(() => lang))))
            .subscribe(lang => this._languageChange$.next(lang));
    }
    registerLocale(locale) {
        const { registerLocaleFn } = this.injector.get(CORE_OPTIONS);
        return registerLocaleFn(locale).then(module => {
            if (module?.default)
                registerLocaleData(module.default);
            this.latestLang = locale;
        });
    }
    /**
     * Returns an observable localized text with the given interpolation parameters in current language.
     * @param key Localizaton key to replace with localized text
     * @param interpolateParams Values to interpolate
     */
    get(key, ...interpolateParams) {
        return this.configState
            .getAll$()
            .pipe(map(state => this.getLocalization(state, key, ...interpolateParams)));
    }
    getResource(resourceName) {
        return this.localizations$.value.get(resourceName);
    }
    getResource$(resourceName) {
        return this.localizations$.pipe(map(res => res.get(resourceName)));
    }
    /**
     * Returns localized text with the given interpolation parameters in current language.
     * @param key Localization key to replace with localized text
     * @param interpolateParams Values to intepolate.
     */
    instant(key, ...interpolateParams) {
        return this.getLocalization(this.configState.getAll(), key, ...interpolateParams);
    }
    localize(resourceName, key, defaultValue) {
        return this.configState.getOne$('localization').pipe(map(createLocalizer), map(localize => localize(resourceName, key, defaultValue)));
    }
    localizeSync(resourceName, key, defaultValue) {
        const localization = this.configState.getOne('localization');
        return createLocalizer(localization)(resourceName, key, defaultValue);
    }
    localizeWithFallback(resourceNames, keys, defaultValue) {
        return this.configState.getOne$('localization').pipe(map(createLocalizerWithFallback), map(localizeWithFallback => localizeWithFallback(resourceNames, keys, defaultValue)));
    }
    localizeWithFallbackSync(resourceNames, keys, defaultValue) {
        const localization = this.configState.getOne('localization');
        return createLocalizerWithFallback(localization)(resourceNames, keys, defaultValue);
    }
    getLocalization(state, key, ...interpolateParams) {
        if (!key)
            key = '';
        let defaultValue;
        if (typeof key !== 'string') {
            defaultValue = key.defaultValue;
            key = key.key;
        }
        const keys = key.split('::');
        const warn = (message) => {
            if (isDevMode)
                console.warn(message);
        };
        if (keys.length < 2) {
            warn('The localization source separator (::) not found.');
            return defaultValue || key;
        }
        if (!state.localization)
            return defaultValue || keys[1];
        const sourceName = keys[0] || state.localization.defaultResourceName;
        const sourceKey = keys[1];
        if (sourceName === '_') {
            return defaultValue || sourceKey;
        }
        if (!sourceName) {
            warn('Localization source name is not specified and the defaultResourceName was not defined!');
            return defaultValue || sourceKey;
        }
        const source = this.localizations$.value.get(sourceName);
        if (!source) {
            warn('Could not find localization source: ' + sourceName);
            return defaultValue || sourceKey;
        }
        let localization = source[sourceKey];
        if (typeof localization === 'undefined') {
            return defaultValue || sourceKey;
        }
        interpolateParams = interpolateParams.filter(params => params != null);
        if (localization)
            localization = interpolate(localization, interpolateParams);
        if (typeof localization !== 'string')
            localization = '';
        return localization || defaultValue || key;
    }
}
LocalizationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LocalizationService, deps: [{ token: i1.SessionStateService }, { token: i0.Injector }, { token: LocalizationService, optional: true, skipSelf: true }, { token: i2.ConfigStateService }], target: i0.ɵɵFactoryTarget.Injectable });
LocalizationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LocalizationService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LocalizationService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.SessionStateService }, { type: i0.Injector }, { type: LocalizationService, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i2.ConfigStateService }]; } });
//# sourceMappingURL=data:application/json;base64,
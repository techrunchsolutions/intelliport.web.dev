import { differentLocales } from '@abp/ng.core';
import { isDevMode } from '@angular/core';
let localeMap = {};
export function registerLocale({ cultureNameLocaleFileMap = {}, errorHandlerFn = defaultLocalErrorHandlerFn, } = {}) {
    return (locale) => {
        localeMap = { ...differentLocales, ...cultureNameLocaleFileMap };
        const localePath = `/locales/${localeMap[locale] || locale}`;
        return new Promise((resolve, reject) => {
            return import(
            /* webpackMode: "lazy-once" */
            /* webpackChunkName: "locales"*/
            /* webpackInclude: /[/\\](ar|cs|en|en-GB|es|de|fi|fr|hi|hu|is|it|pt|tr|ru|ro|sk|sl|zh-Hans|zh-Hant)\.(mjs|js)$/ */
            /* webpackExclude: /[/\\]global|extra/ */
            `@angular/common${localePath}`)
                .then(val => {
                let module = val;
                while (module.default) {
                    module = module.default;
                }
                resolve({ default: module });
            })
                .catch(error => {
                errorHandlerFn({
                    resolve,
                    reject,
                    error,
                    locale,
                });
            });
        });
    };
}
const extraLocales = {};
export function storeLocaleData(data, localeId) {
    extraLocales[localeId] = data;
}
export async function defaultLocalErrorHandlerFn({ locale, resolve }) {
    if (extraLocales[locale]) {
        resolve({ default: extraLocales[localeMap[locale] || locale] });
        return;
    }
    if (isDevMode) {
        console.error(`Cannot find the ${locale} locale file. You can check how can add new culture at https://docs.abp.io/en/abp/latest/UI/Angular/Localization#adding-a-new-culture`);
    }
    resolve();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXItbG9jYWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9sb2NhbGUvc3JjL3V0aWxzL3JlZ2lzdGVyLWxvY2FsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDaEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVMxQyxJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUM7QUFPbkIsTUFBTSxVQUFVLGNBQWMsQ0FDNUIsRUFDRSx3QkFBd0IsR0FBRyxFQUFFLEVBQzdCLGNBQWMsR0FBRywwQkFBMEIsTUFDekMsRUFBd0I7SUFFNUIsT0FBTyxDQUFDLE1BQWMsRUFBZ0IsRUFBRTtRQUN0QyxTQUFTLEdBQUcsRUFBRSxHQUFHLGdCQUFnQixFQUFFLEdBQUcsd0JBQXdCLEVBQUUsQ0FBQztRQUNqRSxNQUFNLFVBQVUsR0FBRyxZQUFZLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUM3RCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLE9BQU8sTUFBTTtZQUNYLDhCQUE4QjtZQUM5QixnQ0FBZ0M7WUFDaEMsa0hBQWtIO1lBQ2xILHlDQUF5QztZQUN6QyxrQkFBa0IsVUFBVSxFQUFFLENBQy9CO2lCQUNFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDVixJQUFJLE1BQU0sR0FBRyxHQUFHLENBQUM7Z0JBQ2pCLE9BQU8sTUFBTSxDQUFDLE9BQU8sRUFBRTtvQkFDckIsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7aUJBQ3pCO2dCQUNELE9BQU8sQ0FBQyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1lBQy9CLENBQUMsQ0FBQztpQkFDRCxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ2IsY0FBYyxDQUFDO29CQUNiLE9BQU87b0JBQ1AsTUFBTTtvQkFDTixLQUFLO29CQUNMLE1BQU07aUJBQ1AsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUM7QUFDeEIsTUFBTSxVQUFVLGVBQWUsQ0FBQyxJQUFTLEVBQUUsUUFBZ0I7SUFDekQsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQztBQUNoQyxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSwwQkFBMEIsQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQTBCO0lBQzFGLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3hCLE9BQU8sQ0FBQyxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoRSxPQUFPO0tBQ1I7SUFFRCxJQUFJLFNBQVMsRUFBRTtRQUNiLE9BQU8sQ0FBQyxLQUFLLENBQ1gsbUJBQW1CLE1BQU0sdUlBQXVJLENBQ2pLLENBQUM7S0FDSDtJQUVELE9BQU8sRUFBRSxDQUFDO0FBQ1osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRpZmZlcmVudExvY2FsZXMgfSBmcm9tICdAYWJwL25nLmNvcmUnO1xyXG5pbXBvcnQgeyBpc0Rldk1vZGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTG9jYWxlRXJyb3JIYW5kbGVyRGF0YSB7XHJcbiAgcmVzb2x2ZTogYW55O1xyXG4gIHJlamVjdDogYW55O1xyXG4gIGVycm9yOiBhbnk7XHJcbiAgbG9jYWxlOiBzdHJpbmc7XHJcbn1cclxuXHJcbmxldCBsb2NhbGVNYXAgPSB7fTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVnaXN0ZXJMb2NhbGVEYXRhIHtcclxuICBjdWx0dXJlTmFtZUxvY2FsZUZpbGVNYXA/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xyXG4gIGVycm9ySGFuZGxlckZuPzogKGRhdGE6IExvY2FsZUVycm9ySGFuZGxlckRhdGEpID0+IGFueTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyTG9jYWxlKFxyXG4gIHtcclxuICAgIGN1bHR1cmVOYW1lTG9jYWxlRmlsZU1hcCA9IHt9LFxyXG4gICAgZXJyb3JIYW5kbGVyRm4gPSBkZWZhdWx0TG9jYWxFcnJvckhhbmRsZXJGbixcclxuICB9ID0ge30gYXMgUmVnaXN0ZXJMb2NhbGVEYXRhLFxyXG4pIHtcclxuICByZXR1cm4gKGxvY2FsZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+ID0+IHtcclxuICAgIGxvY2FsZU1hcCA9IHsgLi4uZGlmZmVyZW50TG9jYWxlcywgLi4uY3VsdHVyZU5hbWVMb2NhbGVGaWxlTWFwIH07XHJcbiAgICBjb25zdCBsb2NhbGVQYXRoID0gYC9sb2NhbGVzLyR7bG9jYWxlTWFwW2xvY2FsZV0gfHwgbG9jYWxlfWA7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICByZXR1cm4gaW1wb3J0KFxyXG4gICAgICAgIC8qIHdlYnBhY2tNb2RlOiBcImxhenktb25jZVwiICovXHJcbiAgICAgICAgLyogd2VicGFja0NodW5rTmFtZTogXCJsb2NhbGVzXCIqL1xyXG4gICAgICAgIC8qIHdlYnBhY2tJbmNsdWRlOiAvWy9cXFxcXShhcnxjc3xlbnxlbi1HQnxlc3xkZXxmaXxmcnxoaXxodXxpc3xpdHxwdHx0cnxydXxyb3xza3xzbHx6aC1IYW5zfHpoLUhhbnQpXFwuKG1qc3xqcykkLyAqL1xyXG4gICAgICAgIC8qIHdlYnBhY2tFeGNsdWRlOiAvWy9cXFxcXWdsb2JhbHxleHRyYS8gKi9cclxuICAgICAgICBgQGFuZ3VsYXIvY29tbW9uJHtsb2NhbGVQYXRofWBcclxuICAgICAgKVxyXG4gICAgICAgIC50aGVuKHZhbCA9PiB7XHJcbiAgICAgICAgICBsZXQgbW9kdWxlID0gdmFsO1xyXG4gICAgICAgICAgd2hpbGUgKG1vZHVsZS5kZWZhdWx0KSB7XHJcbiAgICAgICAgICAgIG1vZHVsZSA9IG1vZHVsZS5kZWZhdWx0O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmVzb2x2ZSh7IGRlZmF1bHQ6IG1vZHVsZSB9KTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiB7XHJcbiAgICAgICAgICBlcnJvckhhbmRsZXJGbih7XHJcbiAgICAgICAgICAgIHJlc29sdmUsXHJcbiAgICAgICAgICAgIHJlamVjdCxcclxuICAgICAgICAgICAgZXJyb3IsXHJcbiAgICAgICAgICAgIGxvY2FsZSxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfTtcclxufVxyXG5cclxuY29uc3QgZXh0cmFMb2NhbGVzID0ge307XHJcbmV4cG9ydCBmdW5jdGlvbiBzdG9yZUxvY2FsZURhdGEoZGF0YTogYW55LCBsb2NhbGVJZDogc3RyaW5nKSB7XHJcbiAgZXh0cmFMb2NhbGVzW2xvY2FsZUlkXSA9IGRhdGE7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWZhdWx0TG9jYWxFcnJvckhhbmRsZXJGbih7IGxvY2FsZSwgcmVzb2x2ZSB9OiBMb2NhbGVFcnJvckhhbmRsZXJEYXRhKSB7XHJcbiAgaWYgKGV4dHJhTG9jYWxlc1tsb2NhbGVdKSB7XHJcbiAgICByZXNvbHZlKHsgZGVmYXVsdDogZXh0cmFMb2NhbGVzW2xvY2FsZU1hcFtsb2NhbGVdIHx8IGxvY2FsZV0gfSk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBpZiAoaXNEZXZNb2RlKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICBgQ2Fubm90IGZpbmQgdGhlICR7bG9jYWxlfSBsb2NhbGUgZmlsZS4gWW91IGNhbiBjaGVjayBob3cgY2FuIGFkZCBuZXcgY3VsdHVyZSBhdCBodHRwczovL2RvY3MuYWJwLmlvL2VuL2FicC9sYXRlc3QvVUkvQW5ndWxhci9Mb2NhbGl6YXRpb24jYWRkaW5nLWEtbmV3LWN1bHR1cmVgLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHJlc29sdmUoKTtcclxufVxyXG4iXX0=
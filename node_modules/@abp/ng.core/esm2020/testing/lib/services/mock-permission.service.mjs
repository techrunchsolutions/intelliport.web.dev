import { ConfigStateService, PermissionService } from '@abp/ng.core';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@abp/ng.core";
export class MockPermissionService extends PermissionService {
    constructor(configState) {
        super(configState);
        this.configState = configState;
        this.grantAllPolicies();
    }
    grantAllPolicies() {
        const grantedPolicies = new Proxy({}, {
            get() {
                return true;
            },
        });
        this.configState['store'].deepPatch({ auth: { grantedPolicies } });
    }
    grantPolicies(keys) {
        const grantedPolicies = keys.reduce((policies, key) => {
            policies[key] = true;
            return policies;
        }, {});
        this.configState['store'].deepPatch({ auth: { grantedPolicies } });
    }
}
MockPermissionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: MockPermissionService, deps: [{ token: i1.ConfigStateService }], target: i0.ɵɵFactoryTarget.Injectable });
MockPermissionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: MockPermissionService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: MockPermissionService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.ConfigStateService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1wZXJtaXNzaW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3Rlc3Rpbmcvc3JjL2xpYi9zZXJ2aWNlcy9tb2NrLXBlcm1pc3Npb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDckUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBSzNDLE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxpQkFBaUI7SUFDMUQsWUFBc0IsV0FBK0I7UUFDbkQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBREMsZ0JBQVcsR0FBWCxXQUFXLENBQW9CO1FBRW5ELElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCxnQkFBZ0I7UUFDZCxNQUFNLGVBQWUsR0FBRyxJQUFJLEtBQUssQ0FDL0IsRUFBRSxFQUNGO1lBQ0UsR0FBRztnQkFDRCxPQUFPLElBQUksQ0FBQztZQUNkLENBQUM7U0FDRixDQUNGLENBQUM7UUFFRixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLGVBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsYUFBYSxDQUFDLElBQWM7UUFDMUIsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUNwRCxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBQ3JCLE9BQU8sUUFBUSxDQUFDO1FBQ2xCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVQLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsZUFBZSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7O2tIQTFCVSxxQkFBcUI7c0hBQXJCLHFCQUFxQixjQUZwQixNQUFNOzJGQUVQLHFCQUFxQjtrQkFIakMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25maWdTdGF0ZVNlcnZpY2UsIFBlcm1pc3Npb25TZXJ2aWNlIH0gZnJvbSAnQGFicC9uZy5jb3JlJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIE1vY2tQZXJtaXNzaW9uU2VydmljZSBleHRlbmRzIFBlcm1pc3Npb25TZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgY29uZmlnU3RhdGU6IENvbmZpZ1N0YXRlU2VydmljZSkge1xyXG4gICAgc3VwZXIoY29uZmlnU3RhdGUpO1xyXG4gICAgdGhpcy5ncmFudEFsbFBvbGljaWVzKCk7XHJcbiAgfVxyXG5cclxuICBncmFudEFsbFBvbGljaWVzKCkge1xyXG4gICAgY29uc3QgZ3JhbnRlZFBvbGljaWVzID0gbmV3IFByb3h5KFxyXG4gICAgICB7fSxcclxuICAgICAge1xyXG4gICAgICAgIGdldCgpIHtcclxuICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMuY29uZmlnU3RhdGVbJ3N0b3JlJ10uZGVlcFBhdGNoKHsgYXV0aDogeyBncmFudGVkUG9saWNpZXMgfSB9KTtcclxuICB9XHJcblxyXG4gIGdyYW50UG9saWNpZXMoa2V5czogc3RyaW5nW10pIHtcclxuICAgIGNvbnN0IGdyYW50ZWRQb2xpY2llcyA9IGtleXMucmVkdWNlKChwb2xpY2llcywga2V5KSA9PiB7XHJcbiAgICAgIHBvbGljaWVzW2tleV0gPSB0cnVlO1xyXG4gICAgICByZXR1cm4gcG9saWNpZXM7XHJcbiAgICB9LCB7fSk7XHJcblxyXG4gICAgdGhpcy5jb25maWdTdGF0ZVsnc3RvcmUnXS5kZWVwUGF0Y2goeyBhdXRoOiB7IGdyYW50ZWRQb2xpY2llcyB9IH0pO1xyXG4gIH1cclxufVxyXG4iXX0=
import * as i1 from '@abp/ng.core';
import { PermissionService, RestService, CORE_OPTIONS, coreOptionsFactory, LIST_QUERY_DEBOUNCE_TIME, LOADER_DELAY, BaseCoreModule } from '@abp/ng.core';
import { APP_BASE_HREF } from '@angular/common';
import * as i0 from '@angular/core';
import { Injectable, Inject, NgModule } from '@angular/core';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
import { provideRoutes } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import * as i1$1 from '@angular/common/http';
import { throwError } from 'rxjs';

class MockPermissionService extends PermissionService {
    constructor(configState) {
        super(configState);
        this.configState = configState;
        this.grantAllPolicies();
    }
    grantAllPolicies() {
        const grantedPolicies = new Proxy({}, {
            get() {
                return true;
            },
        });
        this.configState['store'].deepPatch({ auth: { grantedPolicies } });
    }
    grantPolicies(keys) {
        const grantedPolicies = keys.reduce((policies, key) => {
            policies[key] = true;
            return policies;
        }, {});
        this.configState['store'].deepPatch({ auth: { grantedPolicies } });
    }
}
MockPermissionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: MockPermissionService, deps: [{ token: i1.ConfigStateService }], target: i0.ɵɵFactoryTarget.Injectable });
MockPermissionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: MockPermissionService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: MockPermissionService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.ConfigStateService }]; } });

class MockRestService extends RestService {
    constructor(options, http, environment) {
        super(options, http, environment, null);
        this.options = options;
        this.http = http;
        this.environment = environment;
    }
    handleError(err) {
        return throwError(err);
    }
}
MockRestService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: MockRestService, deps: [{ token: CORE_OPTIONS }, { token: i1$1.HttpClient }, { token: i1.EnvironmentService }], target: i0.ɵɵFactoryTarget.Injectable });
MockRestService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: MockRestService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: MockRestService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [CORE_OPTIONS]
                }] }, { type: i1$1.HttpClient }, { type: i1.EnvironmentService }]; } });

/**
 * CoreTestingModule is the module that will be used in tests
 * and it provides mock alternatives
 */
class CoreTestingModule {
    static withConfig({ baseHref = '/', listQueryDebounceTime = 0, routes = [], ...options } = {}) {
        return {
            ngModule: CoreTestingModule,
            providers: [
                { provide: APP_BASE_HREF, useValue: baseHref },
                {
                    provide: 'CORE_OPTIONS',
                    useValue: {
                        skipGetAppConfiguration: true,
                        ...options,
                    },
                },
                {
                    provide: CORE_OPTIONS,
                    useFactory: coreOptionsFactory,
                    deps: ['CORE_OPTIONS'],
                },
                {
                    provide: LIST_QUERY_DEBOUNCE_TIME,
                    useValue: listQueryDebounceTime,
                },
                {
                    provide: PermissionService,
                    useClass: MockPermissionService,
                },
                {
                    provide: RestService,
                    useClass: MockRestService,
                },
                {
                    provide: LOADER_DELAY,
                    useValue: 0,
                },
                provideRoutes(routes),
            ],
        };
    }
}
CoreTestingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: CoreTestingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CoreTestingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: CoreTestingModule, imports: [NoopAnimationsModule, RouterTestingModule, BaseCoreModule], exports: [RouterTestingModule, BaseCoreModule] });
CoreTestingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: CoreTestingModule, imports: [[NoopAnimationsModule, RouterTestingModule, BaseCoreModule], RouterTestingModule, BaseCoreModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: CoreTestingModule, decorators: [{
            type: NgModule,
            args: [{
                    exports: [RouterTestingModule, BaseCoreModule],
                    imports: [NoopAnimationsModule, RouterTestingModule, BaseCoreModule],
                }]
        }] });

function clearPage(_fixture) {
    if (!document)
        return;
    const elements = document.querySelectorAll('body > *');
    elements.forEach(element => {
        if (/^(abp|ngb)-/i.test(element.tagName))
            document.body.removeChild(element);
    });
}

function wait(fixture, timeout = 0) {
    fixture.detectChanges();
    return new Promise(res => setTimeout(res, timeout));
}

/**
 * Generated bundle index. Do not edit.
 */

export { CoreTestingModule, MockPermissionService, MockRestService, clearPage, wait };
//# sourceMappingURL=abp-ng.core-testing.mjs.map

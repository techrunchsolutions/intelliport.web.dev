import { TemplateRef, Type } from '@angular/core';
export declare type DeepPartial<T> = Partible<T> extends never ? T : {
    [K in keyof T]?: DeepPartial<T[K]>;
};
declare type Partible<T> = T extends Primitive | Array<any> | Node ? never : {
    [K in keyof T]: T[K] extends Function ? never : T[K];
} extends T ? T : never;
export declare type Primitive = undefined | null | boolean | string | number | bigint | symbol;
export declare type InferredInstanceOf<T> = T extends Type<infer U> ? U : never;
export declare type InferredContextOf<T> = T extends TemplateRef<infer U> ? U : never;
export declare type Strict<Class, Contract> = Class extends Contract ? {
    [K in keyof Class]: K extends keyof Contract ? Contract[K] : never;
} : Contract;
export {};

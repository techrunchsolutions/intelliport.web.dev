import { Injector } from '@angular/core';
import { Params } from '@angular/router';
import { AuthConfig, OAuthService, OAuthStorage } from 'angular-oauth2-oidc';
import { Observable } from 'rxjs';
import { LoginParams } from '../models/auth';
import { ConfigStateService } from '../services/config-state.service';
import { EnvironmentService } from '../services/environment.service';
import { HttpErrorReporterService } from '../services/http-error-reporter.service';
import { SessionStateService } from '../services/session-state.service';
export declare const oAuthStorage: Storage;
export declare abstract class AuthFlowStrategy {
    protected injector: Injector;
    abstract readonly isInternalAuth: boolean;
    protected httpErrorReporter: HttpErrorReporterService;
    protected environment: EnvironmentService;
    protected configState: ConfigStateService;
    protected oAuthService: OAuthService;
    protected oAuthConfig: AuthConfig;
    protected sessionState: SessionStateService;
    protected tenantKey: string;
    abstract checkIfInternalAuth(queryParams?: Params): boolean;
    abstract navigateToLogin(queryParams?: Params): void;
    abstract logout(queryParams?: Params): Observable<any>;
    abstract login(params?: LoginParams | Params): Observable<any>;
    private catchError;
    constructor(injector: Injector);
    init(): Promise<any>;
    protected refreshToken(): Promise<void | import("angular-oauth2-oidc").TokenResponse>;
    protected listenToOauthErrors(): void;
}
export declare class AuthCodeFlowStrategy extends AuthFlowStrategy {
    readonly isInternalAuth = false;
    init(): Promise<void>;
    navigateToLogin(queryParams?: Params): void;
    checkIfInternalAuth(queryParams?: Params): boolean;
    logout(queryParams?: Params): Observable<any>;
    login(queryParams?: Params): Observable<any>;
    private getCultureParams;
}
export declare class AuthPasswordFlowStrategy extends AuthFlowStrategy {
    readonly isInternalAuth = true;
    private cookieKey;
    private storageKey;
    private listenToTokenExpiration;
    init(): Promise<void>;
    navigateToLogin(queryParams?: Params): void;
    checkIfInternalAuth(): boolean;
    login(params: LoginParams): Observable<any>;
    pipeToLogin(params: Pick<LoginParams, 'redirectUrl' | 'rememberMe'>): import("rxjs").UnaryFunction<Observable<unknown>, Observable<{
        localization?: {
            values?: {
                [x: string]: {
                    [x: string]: string;
                };
            };
            languages?: import("@abp/ng.core").LanguageInfo[];
            currentCulture?: {
                displayName?: string;
                englishName?: string;
                threeLetterIsoLanguageName?: string;
                twoLetterIsoLanguageName?: string;
                isRightToLeft?: boolean;
                cultureName?: string;
                name?: string;
                nativeName?: string;
                dateTimeFormat?: {
                    calendarAlgorithmType?: string;
                    dateTimeFormatLong?: string;
                    shortDatePattern?: string;
                    fullDateTimePattern?: string;
                    dateSeparator?: string;
                    shortTimePattern?: string;
                    longTimePattern?: string;
                };
            };
            defaultResourceName?: string;
            languagesMap?: {
                [x: string]: import("@abp/ng.core").NameValue<string>[];
            };
            languageFilesMap?: {
                [x: string]: import("@abp/ng.core").NameValue<string>[];
            };
        };
        auth?: {
            policies?: {
                [x: string]: boolean;
            };
            grantedPolicies?: {
                [x: string]: boolean;
            };
        };
        setting?: {
            values?: {
                [x: string]: string;
            };
        };
        currentUser?: {
            isAuthenticated?: boolean;
            id?: string;
            tenantId?: string;
            userName?: string;
            name?: string;
            surName?: string;
            email?: string;
            emailVerified?: boolean;
            phoneNumber?: string;
            phoneNumberVerified?: boolean;
            roles?: string[];
            impersonatorUserId?: string;
            impersonatorTenantId?: string;
        };
        features?: {
            values?: {
                [x: string]: string;
            };
        };
        multiTenancy?: {
            isEnabled?: boolean;
        };
        currentTenant?: {
            id?: string;
            name?: string;
            isAvailable?: boolean;
        };
        timing?: {
            timeZone?: {
                iana?: {
                    timeZoneName?: string;
                };
                windows?: {
                    timeZoneId?: string;
                };
            };
        };
        clock?: {
            kind?: string;
        };
        objectExtensions?: {
            modules?: {
                [x: string]: {
                    entities?: {
                        [x: string]: {
                            properties?: {
                                [x: string]: {
                                    type?: string;
                                    typeSimple?: string;
                                    displayName?: {
                                        name?: string;
                                        resource?: string;
                                    };
                                    api?: {
                                        onGet?: {
                                            isAvailable?: boolean;
                                        };
                                        onCreate?: {
                                            isAvailable?: boolean;
                                        };
                                        onUpdate?: {
                                            isAvailable?: boolean;
                                        };
                                    };
                                    ui?: {
                                        onTable?: {
                                            isVisible?: boolean;
                                        };
                                        onCreateForm?: {
                                            isVisible?: boolean;
                                        };
                                        onEditForm?: {
                                            isVisible?: boolean;
                                        };
                                        lookup?: {
                                            url?: string;
                                            resultListPropertyName?: string;
                                            displayPropertyName?: string;
                                            valuePropertyName?: string;
                                            filterParamName?: string;
                                        };
                                    };
                                    attributes?: import("@abp/ng.core").ExtensionPropertyAttributeDto[];
                                    configuration?: {
                                        [x: string]: object;
                                    };
                                    defaultValue?: object;
                                };
                            };
                            configuration?: {
                                [x: string]: object;
                            };
                        };
                    };
                    configuration?: {
                        [x: string]: object;
                    };
                };
            };
            enums?: {
                [x: string]: {
                    fields?: import("@abp/ng.core").ExtensionEnumFieldDto[];
                    localizationResource?: string;
                };
            };
        };
    }>>;
    logout(queryParams?: Params): Observable<{
        localization?: {
            values?: {
                [x: string]: {
                    [x: string]: string;
                };
            };
            languages?: import("@abp/ng.core").LanguageInfo[];
            currentCulture?: {
                displayName?: string;
                englishName?: string;
                threeLetterIsoLanguageName?: string;
                twoLetterIsoLanguageName?: string;
                isRightToLeft?: boolean;
                cultureName?: string;
                name?: string;
                nativeName?: string;
                dateTimeFormat?: {
                    calendarAlgorithmType?: string;
                    dateTimeFormatLong?: string;
                    shortDatePattern?: string;
                    fullDateTimePattern?: string;
                    dateSeparator?: string;
                    shortTimePattern?: string;
                    longTimePattern?: string;
                };
            };
            defaultResourceName?: string;
            languagesMap?: {
                [x: string]: import("@abp/ng.core").NameValue<string>[];
            };
            languageFilesMap?: {
                [x: string]: import("@abp/ng.core").NameValue<string>[];
            };
        };
        auth?: {
            policies?: {
                [x: string]: boolean;
            };
            grantedPolicies?: {
                [x: string]: boolean;
            };
        };
        setting?: {
            values?: {
                [x: string]: string;
            };
        };
        currentUser?: {
            isAuthenticated?: boolean;
            id?: string;
            tenantId?: string;
            userName?: string;
            name?: string;
            surName?: string;
            email?: string;
            emailVerified?: boolean;
            phoneNumber?: string;
            phoneNumberVerified?: boolean;
            roles?: string[];
            impersonatorUserId?: string;
            impersonatorTenantId?: string;
        };
        features?: {
            values?: {
                [x: string]: string;
            };
        };
        multiTenancy?: {
            isEnabled?: boolean;
        };
        currentTenant?: {
            id?: string;
            name?: string;
            isAvailable?: boolean;
        };
        timing?: {
            timeZone?: {
                iana?: {
                    timeZoneName?: string;
                };
                windows?: {
                    timeZoneId?: string;
                };
            };
        };
        clock?: {
            kind?: string;
        };
        objectExtensions?: {
            modules?: {
                [x: string]: {
                    entities?: {
                        [x: string]: {
                            properties?: {
                                [x: string]: {
                                    type?: string;
                                    typeSimple?: string;
                                    displayName?: {
                                        name?: string;
                                        resource?: string;
                                    };
                                    api?: {
                                        onGet?: {
                                            isAvailable?: boolean;
                                        };
                                        onCreate?: {
                                            isAvailable?: boolean;
                                        };
                                        onUpdate?: {
                                            isAvailable?: boolean;
                                        };
                                    };
                                    ui?: {
                                        onTable?: {
                                            isVisible?: boolean;
                                        };
                                        onCreateForm?: {
                                            isVisible?: boolean;
                                        };
                                        onEditForm?: {
                                            isVisible?: boolean;
                                        };
                                        lookup?: {
                                            url?: string;
                                            resultListPropertyName?: string;
                                            displayPropertyName?: string;
                                            valuePropertyName?: string;
                                            filterParamName?: string;
                                        };
                                    };
                                    attributes?: import("@abp/ng.core").ExtensionPropertyAttributeDto[];
                                    configuration?: {
                                        [x: string]: object;
                                    };
                                    defaultValue?: object;
                                };
                            };
                            configuration?: {
                                [x: string]: object;
                            };
                        };
                    };
                    configuration?: {
                        [x: string]: object;
                    };
                };
            };
            enums?: {
                [x: string]: {
                    fields?: import("@abp/ng.core").ExtensionEnumFieldDto[];
                    localizationResource?: string;
                };
            };
        };
    }>;
    protected refreshToken(): Promise<void | import("angular-oauth2-oidc").TokenResponse>;
}
export declare const AUTH_FLOW_STRATEGY: {
    Code(injector: Injector): AuthCodeFlowStrategy;
    Password(injector: Injector): AuthPasswordFlowStrategy;
};
export declare function clearOAuthStorage(storage?: OAuthStorage): void;

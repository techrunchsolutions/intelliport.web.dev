import { Injector } from '@angular/core';
import { TokenResponse } from 'angular-oauth2-oidc';
import { LoginParams } from '../models/auth';
export declare function pipeToLogin(params: Pick<LoginParams, 'redirectUrl' | 'rememberMe'>, injector: Injector): import("rxjs").UnaryFunction<import("rxjs").Observable<unknown>, import("rxjs").Observable<{
    localization?: {
        values?: {
            [x: string]: {
                [x: string]: string;
            };
        };
        languages?: import("@abp/ng.core").LanguageInfo[];
        currentCulture?: {
            displayName?: string;
            englishName?: string;
            threeLetterIsoLanguageName?: string;
            twoLetterIsoLanguageName?: string;
            isRightToLeft?: boolean;
            cultureName?: string;
            name?: string;
            nativeName?: string;
            dateTimeFormat?: {
                calendarAlgorithmType?: string;
                dateTimeFormatLong?: string;
                shortDatePattern?: string;
                fullDateTimePattern?: string;
                dateSeparator?: string;
                shortTimePattern?: string;
                longTimePattern?: string;
            };
        };
        defaultResourceName?: string;
        languagesMap?: {
            [x: string]: import("@abp/ng.core").NameValue<string>[];
        };
        languageFilesMap?: {
            [x: string]: import("@abp/ng.core").NameValue<string>[];
        };
    };
    auth?: {
        policies?: {
            [x: string]: boolean;
        };
        grantedPolicies?: {
            [x: string]: boolean;
        };
    };
    setting?: {
        values?: {
            [x: string]: string;
        };
    };
    currentUser?: {
        isAuthenticated?: boolean;
        id?: string;
        tenantId?: string;
        userName?: string;
        name?: string;
        surName?: string;
        email?: string;
        emailVerified?: boolean;
        phoneNumber?: string;
        phoneNumberVerified?: boolean;
        roles?: string[];
        impersonatorUserId?: string;
        impersonatorTenantId?: string;
    };
    features?: {
        values?: {
            [x: string]: string;
        };
    };
    multiTenancy?: {
        isEnabled?: boolean;
    };
    currentTenant?: {
        id?: string;
        name?: string;
        isAvailable?: boolean;
    };
    timing?: {
        timeZone?: {
            iana?: {
                timeZoneName?: string;
            };
            windows?: {
                timeZoneId?: string;
            };
        };
    };
    clock?: {
        kind?: string;
    };
    objectExtensions?: {
        modules?: {
            [x: string]: {
                entities?: {
                    [x: string]: {
                        properties?: {
                            [x: string]: {
                                type?: string;
                                typeSimple?: string;
                                displayName?: {
                                    name?: string;
                                    resource?: string;
                                };
                                api?: {
                                    onGet?: {
                                        isAvailable?: boolean;
                                    };
                                    onCreate?: {
                                        isAvailable?: boolean;
                                    };
                                    onUpdate?: {
                                        isAvailable?: boolean;
                                    };
                                };
                                ui?: {
                                    onTable?: {
                                        isVisible?: boolean;
                                    };
                                    onCreateForm?: {
                                        isVisible?: boolean;
                                    };
                                    onEditForm?: {
                                        isVisible?: boolean;
                                    };
                                    lookup?: {
                                        url?: string;
                                        resultListPropertyName?: string;
                                        displayPropertyName?: string;
                                        valuePropertyName?: string;
                                        filterParamName?: string;
                                    };
                                };
                                attributes?: import("@abp/ng.core").ExtensionPropertyAttributeDto[];
                                configuration?: {
                                    [x: string]: object;
                                };
                                defaultValue?: object;
                            };
                        };
                        configuration?: {
                            [x: string]: object;
                        };
                    };
                };
                configuration?: {
                    [x: string]: object;
                };
            };
        };
        enums?: {
            [x: string]: {
                fields?: import("@abp/ng.core").ExtensionEnumFieldDto[];
                localizationResource?: string;
            };
        };
    };
}>>;
export declare function setTokenResponseToStorage(injector: Injector, tokenRes: TokenResponse): void;
export declare function setRememberMe(remember: boolean): void;
export declare function removeRememberMe(): void;

import { Observable } from 'rxjs';
import { AbpApplicationConfigurationService } from '../proxy/volo/abp/asp-net-core/mvc/application-configurations/abp-application-configuration.service';
import { ApplicationConfigurationDto } from '../proxy/volo/abp/asp-net-core/mvc/application-configurations/models';
import * as i0 from "@angular/core";
export declare class ConfigStateService {
    private abpConfigService;
    private readonly store;
    get createOnUpdateStream(): <Slice>(selector: (state: {
        localization?: {
            values?: {
                [x: string]: {
                    [x: string]: string;
                };
            };
            languages?: import("@abp/ng.core").LanguageInfo[];
            currentCulture?: {
                displayName?: string;
                englishName?: string;
                threeLetterIsoLanguageName?: string;
                twoLetterIsoLanguageName?: string;
                isRightToLeft?: boolean;
                cultureName?: string;
                name?: string;
                nativeName?: string;
                dateTimeFormat?: {
                    calendarAlgorithmType?: string;
                    dateTimeFormatLong?: string;
                    shortDatePattern?: string;
                    fullDateTimePattern?: string;
                    dateSeparator?: string;
                    shortTimePattern?: string;
                    longTimePattern?: string;
                };
            };
            defaultResourceName?: string;
            languagesMap?: {
                [x: string]: import("@abp/ng.core").NameValue<string>[];
            };
            languageFilesMap?: {
                [x: string]: import("@abp/ng.core").NameValue<string>[];
            };
        };
        auth?: {
            policies?: {
                [x: string]: boolean;
            };
            grantedPolicies?: {
                [x: string]: boolean;
            };
        };
        setting?: {
            values?: {
                [x: string]: string;
            };
        };
        currentUser?: {
            isAuthenticated?: boolean;
            id?: string;
            tenantId?: string;
            userName?: string;
            name?: string;
            surName?: string;
            email?: string;
            emailVerified?: boolean;
            phoneNumber?: string;
            phoneNumberVerified?: boolean;
            roles?: string[];
            impersonatorUserId?: string;
            impersonatorTenantId?: string;
        };
        features?: {
            values?: {
                [x: string]: string;
            };
        };
        multiTenancy?: {
            isEnabled?: boolean;
        };
        currentTenant?: {
            id?: string;
            name?: string;
            isAvailable?: boolean;
        };
        timing?: {
            timeZone?: {
                iana?: {
                    timeZoneName?: string;
                };
                windows?: {
                    timeZoneId?: string;
                };
            };
        };
        clock?: {
            kind?: string;
        };
        objectExtensions?: {
            modules?: {
                [x: string]: {
                    entities?: {
                        [x: string]: {
                            properties?: {
                                [x: string]: {
                                    type?: string;
                                    typeSimple?: string;
                                    displayName?: {
                                        name?: string;
                                        resource?: string;
                                    };
                                    api?: {
                                        onGet?: {
                                            isAvailable?: boolean;
                                        };
                                        onCreate?: {
                                            isAvailable?: boolean;
                                        };
                                        onUpdate?: {
                                            isAvailable?: boolean;
                                        };
                                    };
                                    ui?: {
                                        onTable?: {
                                            isVisible?: boolean;
                                        };
                                        onCreateForm?: {
                                            isVisible?: boolean;
                                        };
                                        onEditForm?: {
                                            isVisible?: boolean;
                                        };
                                        lookup?: {
                                            url?: string;
                                            resultListPropertyName?: string;
                                            displayPropertyName?: string;
                                            valuePropertyName?: string;
                                            filterParamName?: string;
                                        };
                                    };
                                    attributes?: import("@abp/ng.core").ExtensionPropertyAttributeDto[];
                                    configuration?: {
                                        [x: string]: object;
                                    };
                                    defaultValue?: object;
                                };
                            };
                            configuration?: {
                                [x: string]: object;
                            };
                        };
                    };
                    configuration?: {
                        [x: string]: object;
                    };
                };
            };
            enums?: {
                [x: string]: {
                    fields?: import("@abp/ng.core").ExtensionEnumFieldDto[];
                    localizationResource?: string;
                };
            };
        };
    }) => Slice, filterFn?: (x: Slice) => boolean) => Observable<Slice>;
    private updateSubject;
    constructor(abpConfigService: AbpApplicationConfigurationService);
    private initUpdateStream;
    refreshAppState(): Observable<{
        localization?: {
            values?: {
                [x: string]: {
                    [x: string]: string;
                };
            };
            languages?: import("@abp/ng.core").LanguageInfo[];
            currentCulture?: {
                displayName?: string;
                englishName?: string;
                threeLetterIsoLanguageName?: string;
                twoLetterIsoLanguageName?: string;
                isRightToLeft?: boolean;
                cultureName?: string;
                name?: string;
                nativeName?: string;
                dateTimeFormat?: {
                    calendarAlgorithmType?: string;
                    dateTimeFormatLong?: string;
                    shortDatePattern?: string;
                    fullDateTimePattern?: string;
                    dateSeparator?: string;
                    shortTimePattern?: string;
                    longTimePattern?: string;
                };
            };
            defaultResourceName?: string;
            languagesMap?: {
                [x: string]: import("@abp/ng.core").NameValue<string>[];
            };
            languageFilesMap?: {
                [x: string]: import("@abp/ng.core").NameValue<string>[];
            };
        };
        auth?: {
            policies?: {
                [x: string]: boolean;
            };
            grantedPolicies?: {
                [x: string]: boolean;
            };
        };
        setting?: {
            values?: {
                [x: string]: string;
            };
        };
        currentUser?: {
            isAuthenticated?: boolean;
            id?: string;
            tenantId?: string;
            userName?: string;
            name?: string;
            surName?: string;
            email?: string;
            emailVerified?: boolean;
            phoneNumber?: string;
            phoneNumberVerified?: boolean;
            roles?: string[];
            impersonatorUserId?: string;
            impersonatorTenantId?: string;
        };
        features?: {
            values?: {
                [x: string]: string;
            };
        };
        multiTenancy?: {
            isEnabled?: boolean;
        };
        currentTenant?: {
            id?: string;
            name?: string;
            isAvailable?: boolean;
        };
        timing?: {
            timeZone?: {
                iana?: {
                    timeZoneName?: string;
                };
                windows?: {
                    timeZoneId?: string;
                };
            };
        };
        clock?: {
            kind?: string;
        };
        objectExtensions?: {
            modules?: {
                [x: string]: {
                    entities?: {
                        [x: string]: {
                            properties?: {
                                [x: string]: {
                                    type?: string;
                                    typeSimple?: string;
                                    displayName?: {
                                        name?: string;
                                        resource?: string;
                                    };
                                    api?: {
                                        onGet?: {
                                            isAvailable?: boolean;
                                        };
                                        onCreate?: {
                                            isAvailable?: boolean;
                                        };
                                        onUpdate?: {
                                            isAvailable?: boolean;
                                        };
                                    };
                                    ui?: {
                                        onTable?: {
                                            isVisible?: boolean;
                                        };
                                        onCreateForm?: {
                                            isVisible?: boolean;
                                        };
                                        onEditForm?: {
                                            isVisible?: boolean;
                                        };
                                        lookup?: {
                                            url?: string;
                                            resultListPropertyName?: string;
                                            displayPropertyName?: string;
                                            valuePropertyName?: string;
                                            filterParamName?: string;
                                        };
                                    };
                                    attributes?: import("@abp/ng.core").ExtensionPropertyAttributeDto[];
                                    configuration?: {
                                        [x: string]: object;
                                    };
                                    defaultValue?: object;
                                };
                            };
                            configuration?: {
                                [x: string]: object;
                            };
                        };
                    };
                    configuration?: {
                        [x: string]: object;
                    };
                };
            };
            enums?: {
                [x: string]: {
                    fields?: import("@abp/ng.core").ExtensionEnumFieldDto[];
                    localizationResource?: string;
                };
            };
        };
    }>;
    getOne$(key: string): Observable<any>;
    getOne(key: string): any;
    getAll$(): Observable<ApplicationConfigurationDto>;
    getAll(): ApplicationConfigurationDto;
    getDeep$(keys: string[] | string): Observable<any>;
    getDeep(keys: string[] | string): any;
    getFeature(key: string): string;
    getFeature$(key: string): Observable<string>;
    getFeatures(keys: string[]): {};
    getFeatures$(keys: string[]): Observable<{}>;
    getSetting(key: string): string;
    getSetting$(key: string): Observable<string>;
    getSettings(keyword?: string): Record<string, string>;
    getSettings$(keyword?: string): Observable<Record<string, string>>;
    static ɵfac: i0.ɵɵFactoryDeclaration<ConfigStateService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ConfigStateService>;
}

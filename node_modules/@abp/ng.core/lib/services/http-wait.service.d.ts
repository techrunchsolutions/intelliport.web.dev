import { Injector } from '@angular/core';
import { HttpRequest } from '@angular/common/http';
import { InternalStore } from '../utils/internal-store-utils';
import * as i0 from "@angular/core";
export interface HttpWaitState {
    requests: HttpRequest<any>[];
    filteredRequests: Array<HttpRequestInfo>;
}
export interface HttpRequestInfo {
    method: string;
    endpoint: string;
}
export declare class HttpWaitService {
    protected store: InternalStore<HttpWaitState>;
    private delay;
    private destroy$;
    constructor(injector: Injector);
    getLoading(): boolean;
    getLoading$(): import("rxjs").Observable<boolean>;
    updateLoading$(): import("rxjs").Observable<boolean>;
    clearLoading(): void;
    addRequest(request: HttpRequest<any>): void;
    deleteRequest(request: HttpRequest<any>): void;
    addFilter(request: HttpRequestInfo | HttpRequestInfo[]): void;
    removeFilter(request: HttpRequestInfo | HttpRequestInfo[]): void;
    private applyFilter;
    private isSameRequest;
    static ɵfac: i0.ɵɵFactoryDeclaration<HttpWaitService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<HttpWaitService>;
}

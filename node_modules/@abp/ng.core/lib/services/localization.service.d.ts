import { Injector } from '@angular/core';
import { Observable } from 'rxjs';
import { ABP } from '../models/common';
import { LocalizationWithDefault } from '../models/localization';
import { ConfigStateService } from './config-state.service';
import { SessionStateService } from './session-state.service';
import * as i0 from "@angular/core";
export declare class LocalizationService {
    private sessionState;
    private injector;
    private configState;
    private latestLang;
    private _languageChange$;
    private uiLocalizations$;
    private localizations$;
    /**
     * Returns currently selected language
     * Even though this looks like it's redundant to return the same value as `getLanguage()`,
     * it's actually not. This could be invoked any time, and the latestLang could be different from the
     * sessionState.getLanguage() value.
     */
    get currentLang(): string;
    get currentLang$(): Observable<string>;
    get languageChange$(): Observable<string>;
    constructor(sessionState: SessionStateService, injector: Injector, otherInstance: LocalizationService, configState: ConfigStateService);
    private initLocalizationValues;
    addLocalization(localizations?: ABP.Localization[]): void;
    private listenToSetLanguage;
    registerLocale(locale: string): Promise<void>;
    /**
     * Returns an observable localized text with the given interpolation parameters in current language.
     * @param key Localizaton key to replace with localized text
     * @param interpolateParams Values to interpolate
     */
    get(key: string | LocalizationWithDefault, ...interpolateParams: string[]): Observable<string>;
    getResource(resourceName: string): Record<string, string>;
    getResource$(resourceName: string): Observable<Record<string, string>>;
    /**
     * Returns localized text with the given interpolation parameters in current language.
     * @param key Localization key to replace with localized text
     * @param interpolateParams Values to intepolate.
     */
    instant(key: string | LocalizationWithDefault, ...interpolateParams: string[]): string;
    localize(resourceName: string, key: string, defaultValue: string): Observable<string>;
    localizeSync(resourceName: string, key: string, defaultValue: string): string;
    localizeWithFallback(resourceNames: string[], keys: string[], defaultValue: string): Observable<string>;
    localizeWithFallbackSync(resourceNames: string[], keys: string[], defaultValue: string): string;
    private getLocalization;
    static ɵfac: i0.ɵɵFactoryDeclaration<LocalizationService, [null, null, { optional: true; skipSelf: true; }, null]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<LocalizationService>;
}

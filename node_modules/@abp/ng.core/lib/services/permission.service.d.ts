import { ABP } from '../models/common';
import { ApplicationConfigurationDto } from '../proxy/volo/abp/asp-net-core/mvc/application-configurations/models';
import { ConfigStateService } from './config-state.service';
import * as i0 from "@angular/core";
export declare class PermissionService {
    protected configState: ConfigStateService;
    constructor(configState: ConfigStateService);
    getGrantedPolicy$(key: string): import("rxjs").Observable<boolean>;
    getGrantedPolicy(key: string): boolean;
    filterItemsByPolicy<T extends ABP.HasPolicy>(items: Array<T>): T[];
    filterItemsByPolicy$<T extends ABP.HasPolicy>(items: Array<T>): import("rxjs").Observable<T[]>;
    protected isPolicyGranted(key: string, grantedPolicies: Record<string, boolean>): boolean;
    protected getStream(): import("rxjs").Observable<Record<string, boolean>>;
    protected getSnapshot(): Record<string, boolean>;
    protected mapToPolicies(applicationConfiguration: ApplicationConfigurationDto): Record<string, boolean>;
    protected getPolicy(key: string, grantedPolicies: Record<string, boolean>): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<PermissionService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PermissionService>;
}

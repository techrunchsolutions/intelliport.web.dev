import { RouterEvents, SubscriptionService } from '@abp/ng.core';
import { ChangeDetectorRef, Injectable } from '@angular/core';
import { fromEvent } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@abp/ng.core";
export class LayoutService {
    constructor(subscription, cdRef, routerEvents) {
        this.subscription = subscription;
        this.cdRef = cdRef;
        this.isCollapsed = true;
        this.logoComponentKey = "Theme.LogoComponent" /* Logo */;
        this.routesComponentKey = "Theme.RoutesComponent" /* Routes */;
        this.navItemsComponentKey = "Theme.NavItemsComponent" /* NavItems */;
        subscription.addOne(routerEvents.getNavigationEvents("End"), () => {
            this.isCollapsed = true;
        });
    }
    checkWindowWidth() {
        const isSmallScreen = window.innerWidth < 992;
        if (isSmallScreen && this.smallScreen === false) {
            this.isCollapsed = false;
            setTimeout(() => {
                this.isCollapsed = true;
            }, 100);
        }
        this.smallScreen = isSmallScreen;
        this.cdRef.detectChanges();
    }
    subscribeWindowSize() {
        this.checkWindowWidth();
        const resize$ = fromEvent(window, 'resize').pipe(debounceTime(150));
        this.subscription.addOne(resize$, () => this.checkWindowWidth());
    }
}
LayoutService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LayoutService, deps: [{ token: i1.SubscriptionService }, { token: i0.ChangeDetectorRef }, { token: i1.RouterEvents }], target: i0.ɵɵFactoryTarget.Injectable });
LayoutService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LayoutService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LayoutService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.SubscriptionService }, { type: i0.ChangeDetectorRef }, { type: i1.RouterEvents }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy90aGVtZS1iYXNpYy9zcmMvbGliL3NlcnZpY2VzL2xheW91dC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxZQUFZLEVBQUUsbUJBQW1CLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFDL0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBSTlDLE1BQU0sT0FBTyxhQUFhO0lBV3hCLFlBQW9CLFlBQWlDLEVBQ2pDLEtBQXdCLEVBQ2hDLFlBQXlCO1FBRmpCLGlCQUFZLEdBQVosWUFBWSxDQUFxQjtRQUNqQyxVQUFLLEdBQUwsS0FBSyxDQUFtQjtRQVg1QyxnQkFBVyxHQUFHLElBQUksQ0FBQztRQUluQixxQkFBZ0Isb0NBQThCO1FBRTlDLHVCQUFrQix3Q0FBZ0M7UUFFbEQseUJBQW9CLDRDQUFrQztRQUtwRCxZQUFZLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsRUFBQyxHQUFHLEVBQUU7WUFDL0QsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDMUIsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDO0lBRU8sZ0JBQWdCO1FBQ3RCLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO1FBQzlDLElBQUksYUFBYSxJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssS0FBSyxFQUFFO1lBQy9DLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1lBQ3pCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7WUFDMUIsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ1Q7UUFDRCxJQUFJLENBQUMsV0FBVyxHQUFHLGFBQWEsQ0FBQztRQUNqQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxtQkFBbUI7UUFDakIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFFeEIsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7SUFDbkUsQ0FBQzs7MEdBcENVLGFBQWE7OEdBQWIsYUFBYTsyRkFBYixhQUFhO2tCQUR6QixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtSb3V0ZXJFdmVudHMsIFN1YnNjcmlwdGlvblNlcnZpY2V9IGZyb20gJ0BhYnAvbmcuY29yZSc7XHJcbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGZyb21FdmVudCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IGVUaGVtZUJhc2ljQ29tcG9uZW50cyB9IGZyb20gJy4uL2VudW1zJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIExheW91dFNlcnZpY2Uge1xyXG4gIGlzQ29sbGFwc2VkID0gdHJ1ZTtcclxuXHJcbiAgc21hbGxTY3JlZW4hOiBib29sZWFuOyAvLyBkbyBub3Qgc2V0IHRydWUgb3IgZmFsc2VcclxuXHJcbiAgbG9nb0NvbXBvbmVudEtleSA9IGVUaGVtZUJhc2ljQ29tcG9uZW50cy5Mb2dvO1xyXG5cclxuICByb3V0ZXNDb21wb25lbnRLZXkgPSBlVGhlbWVCYXNpY0NvbXBvbmVudHMuUm91dGVzO1xyXG5cclxuICBuYXZJdGVtc0NvbXBvbmVudEtleSA9IGVUaGVtZUJhc2ljQ29tcG9uZW50cy5OYXZJdGVtcztcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvblNlcnZpY2UsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBjZFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICAgICAgICAgICAgcm91dGVyRXZlbnRzOlJvdXRlckV2ZW50cykge1xyXG4gICAgc3Vic2NyaXB0aW9uLmFkZE9uZShyb3V0ZXJFdmVudHMuZ2V0TmF2aWdhdGlvbkV2ZW50cyhcIkVuZFwiKSwoKSA9PiB7XHJcbiAgICAgIHRoaXMuaXNDb2xsYXBzZWQgPSB0cnVlO1xyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2hlY2tXaW5kb3dXaWR0aCgpIHtcclxuICAgIGNvbnN0IGlzU21hbGxTY3JlZW4gPSB3aW5kb3cuaW5uZXJXaWR0aCA8IDk5MjtcclxuICAgIGlmIChpc1NtYWxsU2NyZWVuICYmIHRoaXMuc21hbGxTY3JlZW4gPT09IGZhbHNlKSB7XHJcbiAgICAgIHRoaXMuaXNDb2xsYXBzZWQgPSBmYWxzZTtcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5pc0NvbGxhcHNlZCA9IHRydWU7XHJcbiAgICAgIH0sIDEwMCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnNtYWxsU2NyZWVuID0gaXNTbWFsbFNjcmVlbjtcclxuICAgIHRoaXMuY2RSZWYuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gIH1cclxuXHJcbiAgc3Vic2NyaWJlV2luZG93U2l6ZSgpIHtcclxuICAgIHRoaXMuY2hlY2tXaW5kb3dXaWR0aCgpO1xyXG5cclxuICAgIGNvbnN0IHJlc2l6ZSQgPSBmcm9tRXZlbnQod2luZG93LCAncmVzaXplJykucGlwZShkZWJvdW5jZVRpbWUoMTUwKSk7XHJcbiAgICB0aGlzLnN1YnNjcmlwdGlvbi5hZGRPbmUocmVzaXplJCwgKCkgPT4gdGhpcy5jaGVja1dpbmRvd1dpZHRoKCkpO1xyXG4gIH1cclxufVxyXG4iXX0=
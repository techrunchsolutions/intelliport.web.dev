import { BaseThemeBasicModule, BASIC_THEME_NAV_ITEM_PROVIDERS, BASIC_THEME_STYLES_PROVIDERS, ValidationErrorComponent, } from '@abp/ng.theme.basic';
import { NgModule } from '@angular/core';
import { VALIDATION_ERROR_TEMPLATE, VALIDATION_INVALID_CLASSES, VALIDATION_TARGET_SELECTOR, } from '@ngx-validate/core';
import * as i0 from "@angular/core";
export class ThemeBasicTestingModule {
    static withConfig() {
        return {
            ngModule: ThemeBasicTestingModule,
            providers: [
                BASIC_THEME_NAV_ITEM_PROVIDERS,
                BASIC_THEME_STYLES_PROVIDERS,
                {
                    provide: VALIDATION_ERROR_TEMPLATE,
                    useValue: ValidationErrorComponent,
                },
                {
                    provide: VALIDATION_TARGET_SELECTOR,
                    useValue: '.form-group',
                },
                {
                    provide: VALIDATION_INVALID_CLASSES,
                    useValue: 'is-invalid',
                },
            ],
        };
    }
}
ThemeBasicTestingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ThemeBasicTestingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ThemeBasicTestingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ThemeBasicTestingModule, imports: [BaseThemeBasicModule], exports: [BaseThemeBasicModule] });
ThemeBasicTestingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ThemeBasicTestingModule, imports: [[BaseThemeBasicModule], BaseThemeBasicModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ThemeBasicTestingModule, decorators: [{
            type: NgModule,
            args: [{
                    exports: [BaseThemeBasicModule],
                    imports: [BaseThemeBasicModule],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlbWUtYmFzaWMtdGVzdGluZy5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy90aGVtZS1iYXNpYy90ZXN0aW5nL3NyYy9saWIvdGhlbWUtYmFzaWMtdGVzdGluZy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLG9CQUFvQixFQUNwQiw4QkFBOEIsRUFDOUIsNEJBQTRCLEVBQzVCLHdCQUF3QixHQUN6QixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFDTCx5QkFBeUIsRUFDekIsMEJBQTBCLEVBQzFCLDBCQUEwQixHQUMzQixNQUFNLG9CQUFvQixDQUFDOztBQU01QixNQUFNLE9BQU8sdUJBQXVCO0lBQ2xDLE1BQU0sQ0FBQyxVQUFVO1FBQ2YsT0FBTztZQUNMLFFBQVEsRUFBRSx1QkFBdUI7WUFDakMsU0FBUyxFQUFFO2dCQUNULDhCQUE4QjtnQkFDOUIsNEJBQTRCO2dCQUM1QjtvQkFDRSxPQUFPLEVBQUUseUJBQXlCO29CQUNsQyxRQUFRLEVBQUUsd0JBQXdCO2lCQUNuQztnQkFDRDtvQkFDRSxPQUFPLEVBQUUsMEJBQTBCO29CQUNuQyxRQUFRLEVBQUUsYUFBYTtpQkFDeEI7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLDBCQUEwQjtvQkFDbkMsUUFBUSxFQUFFLFlBQVk7aUJBQ3ZCO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzs7b0hBckJVLHVCQUF1QjtxSEFBdkIsdUJBQXVCLFlBRnhCLG9CQUFvQixhQURwQixvQkFBb0I7cUhBR25CLHVCQUF1QixZQUZ6QixDQUFDLG9CQUFvQixDQUFDLEVBRHJCLG9CQUFvQjsyRkFHbkIsdUJBQXVCO2tCQUpuQyxRQUFRO21CQUFDO29CQUNSLE9BQU8sRUFBRSxDQUFDLG9CQUFvQixDQUFDO29CQUMvQixPQUFPLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztpQkFDaEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIEJhc2VUaGVtZUJhc2ljTW9kdWxlLFxyXG4gIEJBU0lDX1RIRU1FX05BVl9JVEVNX1BST1ZJREVSUyxcclxuICBCQVNJQ19USEVNRV9TVFlMRVNfUFJPVklERVJTLFxyXG4gIFZhbGlkYXRpb25FcnJvckNvbXBvbmVudCxcclxufSBmcm9tICdAYWJwL25nLnRoZW1lLmJhc2ljJztcclxuaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtcclxuICBWQUxJREFUSU9OX0VSUk9SX1RFTVBMQVRFLFxyXG4gIFZBTElEQVRJT05fSU5WQUxJRF9DTEFTU0VTLFxyXG4gIFZBTElEQVRJT05fVEFSR0VUX1NFTEVDVE9SLFxyXG59IGZyb20gJ0BuZ3gtdmFsaWRhdGUvY29yZSc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGV4cG9ydHM6IFtCYXNlVGhlbWVCYXNpY01vZHVsZV0sXHJcbiAgaW1wb3J0czogW0Jhc2VUaGVtZUJhc2ljTW9kdWxlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIFRoZW1lQmFzaWNUZXN0aW5nTW9kdWxlIHtcclxuICBzdGF0aWMgd2l0aENvbmZpZygpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPFRoZW1lQmFzaWNUZXN0aW5nTW9kdWxlPiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuZ01vZHVsZTogVGhlbWVCYXNpY1Rlc3RpbmdNb2R1bGUsXHJcbiAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIEJBU0lDX1RIRU1FX05BVl9JVEVNX1BST1ZJREVSUyxcclxuICAgICAgICBCQVNJQ19USEVNRV9TVFlMRVNfUFJPVklERVJTLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3ZpZGU6IFZBTElEQVRJT05fRVJST1JfVEVNUExBVEUsXHJcbiAgICAgICAgICB1c2VWYWx1ZTogVmFsaWRhdGlvbkVycm9yQ29tcG9uZW50LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcHJvdmlkZTogVkFMSURBVElPTl9UQVJHRVRfU0VMRUNUT1IsXHJcbiAgICAgICAgICB1c2VWYWx1ZTogJy5mb3JtLWdyb3VwJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3ZpZGU6IFZBTElEQVRJT05fSU5WQUxJRF9DTEFTU0VTLFxyXG4gICAgICAgICAgdXNlVmFsdWU6ICdpcy1pbnZhbGlkJyxcclxuICAgICAgICB9LFxyXG4gICAgICBdLFxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19
import * as i0 from '@angular/core';
import { Injectable, Component, Input, ViewChildren, ViewEncapsulation, Inject, ChangeDetectionStrategy, InjectionToken, APP_INITIALIZER, Injector, NgModule } from '@angular/core';
import * as i1 from '@abp/ng.core';
import { SubscriptionService, NAVIGATE_TO_MANAGE_PROFILE, LazyLoadService, LOADING_STRATEGY, DomInsertionService, ReplaceableComponentsService, CONTENT_STRATEGY, AuthService, CoreModule, noop } from '@abp/ng.core';
import { fromEvent } from 'rxjs';
import { debounceTime, map } from 'rxjs/operators';
import * as i2 from '@angular/router';
import * as i2$1 from '@angular/common';
import * as i4 from '@ng-bootstrap/ng-bootstrap';
import { NgbCollapseModule, NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';
import * as i1$1 from '@abp/ng.theme.shared';
import { slideFromBottom, collapseWithMargin, DocumentDirHandlerService, NavItemsService, UserMenuService, ThemeSharedModule } from '@abp/ng.theme.shared';
import * as i1$2 from '@abp/ng.account.core';
import { TenantBoxService, AuthWrapperService } from '@abp/ng.account.core';
import * as i4$1 from '@angular/forms';
import { ValidationErrorComponent as ValidationErrorComponent$1, NgxValidateCoreModule, VALIDATION_ERROR_TEMPLATE, VALIDATION_TARGET_SELECTOR, VALIDATION_INVALID_CLASSES } from '@ngx-validate/core';

class LayoutService {
    constructor(subscription, cdRef, routerEvents) {
        this.subscription = subscription;
        this.cdRef = cdRef;
        this.isCollapsed = true;
        this.logoComponentKey = "Theme.LogoComponent" /* Logo */;
        this.routesComponentKey = "Theme.RoutesComponent" /* Routes */;
        this.navItemsComponentKey = "Theme.NavItemsComponent" /* NavItems */;
        subscription.addOne(routerEvents.getNavigationEvents("End"), () => {
            this.isCollapsed = true;
        });
    }
    checkWindowWidth() {
        const isSmallScreen = window.innerWidth < 992;
        if (isSmallScreen && this.smallScreen === false) {
            this.isCollapsed = false;
            setTimeout(() => {
                this.isCollapsed = true;
            }, 100);
        }
        this.smallScreen = isSmallScreen;
        this.cdRef.detectChanges();
    }
    subscribeWindowSize() {
        this.checkWindowWidth();
        const resize$ = fromEvent(window, 'resize').pipe(debounceTime(150));
        this.subscription.addOne(resize$, () => this.checkWindowWidth());
    }
}
LayoutService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LayoutService, deps: [{ token: i1.SubscriptionService }, { token: i0.ChangeDetectorRef }, { token: i1.RouterEvents }], target: i0.ɵɵFactoryTarget.Injectable });
LayoutService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LayoutService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LayoutService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.SubscriptionService }, { type: i0.ChangeDetectorRef }, { type: i1.RouterEvents }]; } });

class LogoComponent {
    constructor(environment) {
        this.environment = environment;
    }
    get appInfo() {
        return this.environment.getEnvironment().application;
    }
}
LogoComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LogoComponent, deps: [{ token: i1.EnvironmentService }], target: i0.ɵɵFactoryTarget.Component });
LogoComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: LogoComponent, selector: "abp-logo", ngImport: i0, template: `
    <a class="navbar-brand" routerLink="/">
      <img
        *ngIf="appInfo.logoUrl; else appName"
        [src]="appInfo.logoUrl"
        [alt]="appInfo.name"
        width="100%"
        height="auto"
      />
    </a>

    <ng-template #appName>
      {{ appInfo.name }}
    </ng-template>
  `, isInline: true, directives: [{ type: i2.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo", "routerLink"] }, { type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LogoComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'abp-logo',
                    template: `
    <a class="navbar-brand" routerLink="/">
      <img
        *ngIf="appInfo.logoUrl; else appName"
        [src]="appInfo.logoUrl"
        [alt]="appInfo.name"
        width="100%"
        height="auto"
      />
    </a>

    <ng-template #appName>
      {{ appInfo.name }}
    </ng-template>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i1.EnvironmentService }]; } });

class RoutesComponent {
    constructor(routesService, renderer) {
        this.routesService = routesService;
        this.renderer = renderer;
        this.rootDropdownExpand = {};
        this.trackByFn = (_, item) => item.name;
    }
    isDropdown(node) {
        return !(node === null || node === void 0 ? void 0 : node.isLeaf) || this.routesService.hasChildren(node.name);
    }
    closeDropdown() {
        this.childrenContainers.forEach(({ nativeElement }) => {
            this.renderer.addClass(nativeElement, 'd-none');
            setTimeout(() => this.renderer.removeClass(nativeElement, 'd-none'), 0);
        });
    }
}
RoutesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: RoutesComponent, deps: [{ token: i1.RoutesService }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
RoutesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: RoutesComponent, selector: "abp-routes", inputs: { smallScreen: "smallScreen" }, viewQueries: [{ propertyName: "childrenContainers", predicate: ["childrenContainer"], descendants: true }], ngImport: i0, template: "<ul class=\"navbar-nav\">\r\n  <ng-container\r\n    *ngFor=\"let route of routesService.visible$ | async; trackBy: trackByFn\"\r\n    [ngTemplateOutlet]=\"isDropdown(route) ? dropdownLink : defaultLink\"\r\n    [ngTemplateOutletContext]=\"{ $implicit: route }\"\r\n  >\r\n  </ng-container>\r\n\r\n  <ng-template #defaultLink let-route>\r\n    <li class=\"nav-item\" *abpPermission=\"route.requiredPolicy\">\r\n      <a class=\"nav-link\" [routerLink]=\"[route.path]\"\r\n        ><i *ngIf=\"route.iconClass\" [ngClass]=\"route.iconClass\"></i>\r\n        {{ route.name | abpLocalization }}</a\r\n      >\r\n    </li>\r\n  </ng-template>\r\n\r\n  <ng-template #dropdownLink let-route>\r\n    <ng-container *ngIf=\"route.children?.length\">\r\n      <li\r\n        class=\"nav-item dropdown\"\r\n        display=\"static\"\r\n        *abpPermission=\"route.requiredPolicy\"\r\n        (click)=\"\r\n          rootDropdownExpand[route.name]\r\n            ? (rootDropdownExpand[route.name] = false)\r\n            : (rootDropdownExpand[route.name] = true)\r\n        \"\r\n      >\r\n        <a\r\n          class=\"nav-link dropdown-toggle\"\r\n          data-toggle=\"dropdown\"\r\n          aria-haspopup=\"true\"\r\n          aria-expanded=\"false\"\r\n          href=\"javascript:void(0)\"\r\n        >\r\n          <i *ngIf=\"route.iconClass\" [ngClass]=\"route.iconClass\"></i>\r\n          {{ route.name | abpLocalization }}\r\n        </a>\r\n        <div\r\n          #routeContainer\r\n          class=\"dropdown-menu border-0 shadow-sm\"\r\n          (click)=\"$event.preventDefault(); $event.stopPropagation()\"\r\n          [class.d-block]=\"smallScreen && rootDropdownExpand[route.name]\"\r\n        >\r\n          <ng-container\r\n            *ngTemplateOutlet=\"forTemplate; context: { $implicit: route }\"\r\n          ></ng-container>\r\n        </div>\r\n      </li>\r\n    </ng-container>\r\n  </ng-template>\r\n\r\n  <ng-template #forTemplate let-route>\r\n    <ng-container *ngFor=\"let child of route.children\">\r\n      <ng-template\r\n        [ngTemplateOutlet]=\"child.children?.length ? dropdownChild : defaultChild\"\r\n        [ngTemplateOutletContext]=\"{ $implicit: child }\"\r\n      ></ng-template>\r\n    </ng-container>\r\n  </ng-template>\r\n\r\n  <ng-template #defaultChild let-child>\r\n    <ng-container *ngIf=\"child.path\">\r\n      <div class=\"dropdown-submenu\" *abpPermission=\"child.requiredPolicy\">\r\n        <a class=\"dropdown-item\" [routerLink]=\"[child.path]\" (click)=\"closeDropdown()\">\r\n          <i *ngIf=\"child.iconClass\" [ngClass]=\"child.iconClass\"></i>\r\n          {{ child.name | abpLocalization }}</a\r\n        >\r\n      </div>\r\n    </ng-container>\r\n  </ng-template>\r\n\r\n  <ng-template #dropdownChild let-child>\r\n    <div\r\n      class=\"dropdown-submenu\"\r\n      ngbDropdown\r\n      #dropdownSubmenu=\"ngbDropdown\"\r\n      placement=\"right-top\"\r\n      [autoClose]=\"true\"\r\n      *abpPermission=\"child.requiredPolicy\"\r\n    >\r\n      <div ngbDropdownToggle [class.dropdown-toggle]=\"false\">\r\n        <a\r\n          abpEllipsis=\"210px\"\r\n          [abpEllipsisEnabled]=\"!smallScreen\"\r\n          role=\"button\"\r\n          class=\"btn d-block text-start dropdown-toggle\"\r\n        >\r\n          <i *ngIf=\"child.iconClass\" [ngClass]=\"child.iconClass\"></i>\r\n          {{ child.name | abpLocalization }}\r\n        </a>\r\n      </div>\r\n      <div\r\n        #childrenContainer\r\n        class=\"dropdown-menu dropdown-menu-start border-0 shadow-sm\"\r\n        [class.d-block]=\"smallScreen && dropdownSubmenu.isOpen()\"\r\n      >\r\n        <ng-container *ngTemplateOutlet=\"forTemplate; context: { $implicit: child }\"></ng-container>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n</ul>\r\n", directives: [{ type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i1.PermissionDirective, selector: "[abpPermission]", inputs: ["abpPermission", "abpPermissionRunChangeDetection"] }, { type: i2.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo", "routerLink"] }, { type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.NgbDropdown, selector: "[ngbDropdown]", inputs: ["autoClose", "dropdownClass", "open", "placement", "container", "display"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i4.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i1$1.EllipsisDirective, selector: "[abpEllipsis]", inputs: ["abpEllipsis", "title", "abpEllipsisEnabled"] }], pipes: { "async": i2$1.AsyncPipe, "abpLocalization": i1.LocalizationPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: RoutesComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-routes', template: "<ul class=\"navbar-nav\">\r\n  <ng-container\r\n    *ngFor=\"let route of routesService.visible$ | async; trackBy: trackByFn\"\r\n    [ngTemplateOutlet]=\"isDropdown(route) ? dropdownLink : defaultLink\"\r\n    [ngTemplateOutletContext]=\"{ $implicit: route }\"\r\n  >\r\n  </ng-container>\r\n\r\n  <ng-template #defaultLink let-route>\r\n    <li class=\"nav-item\" *abpPermission=\"route.requiredPolicy\">\r\n      <a class=\"nav-link\" [routerLink]=\"[route.path]\"\r\n        ><i *ngIf=\"route.iconClass\" [ngClass]=\"route.iconClass\"></i>\r\n        {{ route.name | abpLocalization }}</a\r\n      >\r\n    </li>\r\n  </ng-template>\r\n\r\n  <ng-template #dropdownLink let-route>\r\n    <ng-container *ngIf=\"route.children?.length\">\r\n      <li\r\n        class=\"nav-item dropdown\"\r\n        display=\"static\"\r\n        *abpPermission=\"route.requiredPolicy\"\r\n        (click)=\"\r\n          rootDropdownExpand[route.name]\r\n            ? (rootDropdownExpand[route.name] = false)\r\n            : (rootDropdownExpand[route.name] = true)\r\n        \"\r\n      >\r\n        <a\r\n          class=\"nav-link dropdown-toggle\"\r\n          data-toggle=\"dropdown\"\r\n          aria-haspopup=\"true\"\r\n          aria-expanded=\"false\"\r\n          href=\"javascript:void(0)\"\r\n        >\r\n          <i *ngIf=\"route.iconClass\" [ngClass]=\"route.iconClass\"></i>\r\n          {{ route.name | abpLocalization }}\r\n        </a>\r\n        <div\r\n          #routeContainer\r\n          class=\"dropdown-menu border-0 shadow-sm\"\r\n          (click)=\"$event.preventDefault(); $event.stopPropagation()\"\r\n          [class.d-block]=\"smallScreen && rootDropdownExpand[route.name]\"\r\n        >\r\n          <ng-container\r\n            *ngTemplateOutlet=\"forTemplate; context: { $implicit: route }\"\r\n          ></ng-container>\r\n        </div>\r\n      </li>\r\n    </ng-container>\r\n  </ng-template>\r\n\r\n  <ng-template #forTemplate let-route>\r\n    <ng-container *ngFor=\"let child of route.children\">\r\n      <ng-template\r\n        [ngTemplateOutlet]=\"child.children?.length ? dropdownChild : defaultChild\"\r\n        [ngTemplateOutletContext]=\"{ $implicit: child }\"\r\n      ></ng-template>\r\n    </ng-container>\r\n  </ng-template>\r\n\r\n  <ng-template #defaultChild let-child>\r\n    <ng-container *ngIf=\"child.path\">\r\n      <div class=\"dropdown-submenu\" *abpPermission=\"child.requiredPolicy\">\r\n        <a class=\"dropdown-item\" [routerLink]=\"[child.path]\" (click)=\"closeDropdown()\">\r\n          <i *ngIf=\"child.iconClass\" [ngClass]=\"child.iconClass\"></i>\r\n          {{ child.name | abpLocalization }}</a\r\n        >\r\n      </div>\r\n    </ng-container>\r\n  </ng-template>\r\n\r\n  <ng-template #dropdownChild let-child>\r\n    <div\r\n      class=\"dropdown-submenu\"\r\n      ngbDropdown\r\n      #dropdownSubmenu=\"ngbDropdown\"\r\n      placement=\"right-top\"\r\n      [autoClose]=\"true\"\r\n      *abpPermission=\"child.requiredPolicy\"\r\n    >\r\n      <div ngbDropdownToggle [class.dropdown-toggle]=\"false\">\r\n        <a\r\n          abpEllipsis=\"210px\"\r\n          [abpEllipsisEnabled]=\"!smallScreen\"\r\n          role=\"button\"\r\n          class=\"btn d-block text-start dropdown-toggle\"\r\n        >\r\n          <i *ngIf=\"child.iconClass\" [ngClass]=\"child.iconClass\"></i>\r\n          {{ child.name | abpLocalization }}\r\n        </a>\r\n      </div>\r\n      <div\r\n        #childrenContainer\r\n        class=\"dropdown-menu dropdown-menu-start border-0 shadow-sm\"\r\n        [class.d-block]=\"smallScreen && dropdownSubmenu.isOpen()\"\r\n      >\r\n        <ng-container *ngTemplateOutlet=\"forTemplate; context: { $implicit: child }\"></ng-container>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n</ul>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.RoutesService }, { type: i0.Renderer2 }]; }, propDecorators: { smallScreen: [{
                type: Input
            }], childrenContainers: [{
                type: ViewChildren,
                args: ['childrenContainer']
            }] } });

class NavItemsComponent {
    constructor(navItems) {
        this.navItems = navItems;
        this.trackByFn = (_, element) => element.id;
    }
}
NavItemsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: NavItemsComponent, deps: [{ token: i1$1.NavItemsService }], target: i0.ɵɵFactoryTarget.Component });
NavItemsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: NavItemsComponent, selector: "abp-nav-items", ngImport: i0, template: "<ul class=\"navbar-nav\">\r\n  <ng-container *ngFor=\"let item of navItems.items$ | async; trackBy: trackByFn\">\r\n    <ng-container *ngIf=\"item.visible && item.visible()\">\r\n      <li class=\"nav-item d-flex align-items-center\" *abpPermission=\"item.requiredPolicy\">\r\n        <ng-container\r\n          *ngIf=\"item.component; else htmlTemplate\"\r\n          [ngComponentOutlet]=\"item.component\"\r\n          [ngComponentOutletInjector]=\"item | toInjector\"\r\n        ></ng-container>\r\n\r\n        <ng-template #htmlTemplate>\r\n          <div [innerHTML]=\"item.html\" (click)=\"item.action ? item.action() : null\"></div>\r\n        </ng-template>\r\n      </li>\r\n    </ng-container>\r\n  </ng-container>\r\n</ul>\r\n", directives: [{ type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.PermissionDirective, selector: "[abpPermission]", inputs: ["abpPermission", "abpPermissionRunChangeDetection"] }, { type: i2$1.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModuleFactory"] }], pipes: { "async": i2$1.AsyncPipe, "toInjector": i1.ToInjectorPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: NavItemsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-nav-items', template: "<ul class=\"navbar-nav\">\r\n  <ng-container *ngFor=\"let item of navItems.items$ | async; trackBy: trackByFn\">\r\n    <ng-container *ngIf=\"item.visible && item.visible()\">\r\n      <li class=\"nav-item d-flex align-items-center\" *abpPermission=\"item.requiredPolicy\">\r\n        <ng-container\r\n          *ngIf=\"item.component; else htmlTemplate\"\r\n          [ngComponentOutlet]=\"item.component\"\r\n          [ngComponentOutletInjector]=\"item | toInjector\"\r\n        ></ng-container>\r\n\r\n        <ng-template #htmlTemplate>\r\n          <div [innerHTML]=\"item.html\" (click)=\"item.action ? item.action() : null\"></div>\r\n        </ng-template>\r\n      </li>\r\n    </ng-container>\r\n  </ng-container>\r\n</ul>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1$1.NavItemsService }]; } });

class PageAlertContainerComponent {
    constructor(service) {
        this.service = service;
    }
}
PageAlertContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: PageAlertContainerComponent, deps: [{ token: i1$1.PageAlertService }], target: i0.ɵɵFactoryTarget.Component });
PageAlertContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: PageAlertContainerComponent, selector: "abp-page-alert-container", ngImport: i0, template: "<ng-container *ngFor=\"let alert of service.alerts$ | async; let i = index\">\r\n  <div\r\n    class=\"alert alert-{{ alert.type }} fade show\"\r\n    [ngClass]=\"{ 'alert-dismissible fade show': alert.dismissible }\"\r\n    role=\"alert\"\r\n  >\r\n    <h4 class=\"alert-heading\" *ngIf=\"alert.title\">\r\n      {{ alert.title | abpLocalization: alert.titleLocalizationParams }}\r\n    </h4>\r\n    {{ alert.message | abpLocalization: alert.messageLocalizationParams }}\r\n    <button\r\n      *ngIf=\"alert.dismissible\"\r\n      type=\"button\"\r\n      class=\"btn-close\"\r\n      data-dismiss=\"alert\"\r\n      aria-label=\"Close\"\r\n      (click)=\"service.remove(i)\"\r\n    ></button>\r\n  </div>\r\n</ng-container>\r\n", directives: [{ type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i2$1.AsyncPipe, "abpLocalization": i1.LocalizationPipe }, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: PageAlertContainerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-page-alert-container', encapsulation: ViewEncapsulation.None, template: "<ng-container *ngFor=\"let alert of service.alerts$ | async; let i = index\">\r\n  <div\r\n    class=\"alert alert-{{ alert.type }} fade show\"\r\n    [ngClass]=\"{ 'alert-dismissible fade show': alert.dismissible }\"\r\n    role=\"alert\"\r\n  >\r\n    <h4 class=\"alert-heading\" *ngIf=\"alert.title\">\r\n      {{ alert.title | abpLocalization: alert.titleLocalizationParams }}\r\n    </h4>\r\n    {{ alert.message | abpLocalization: alert.messageLocalizationParams }}\r\n    <button\r\n      *ngIf=\"alert.dismissible\"\r\n      type=\"button\"\r\n      class=\"btn-close\"\r\n      data-dismiss=\"alert\"\r\n      aria-label=\"Close\"\r\n      (click)=\"service.remove(i)\"\r\n    ></button>\r\n  </div>\r\n</ng-container>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1$1.PageAlertService }]; } });

class TenantBoxComponent {
    constructor(service) {
        this.service = service;
    }
}
TenantBoxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: TenantBoxComponent, deps: [{ token: i1$2.TenantBoxService }], target: i0.ɵɵFactoryTarget.Component });
TenantBoxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: TenantBoxComponent, selector: "abp-tenant-box", providers: [TenantBoxService], ngImport: i0, template: "<ng-container *ngIf=\"(service.currentTenant$ | async) || { name: '' } as currentTenant\">\r\n  <div class=\"card shadow-sm rounded mb-3\">\r\n    <div class=\"card-body px-5\">\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <span style=\"font-size: 0.8em\" class=\"text-uppercase text-muted\">{{\r\n            'AbpUiMultiTenancy::Tenant' | abpLocalization\r\n          }}</span\r\n          ><br />\r\n          <h6 class=\"m-0 d-inline-block\">\r\n            <i>{{ currentTenant.name || ('AbpUiMultiTenancy::NotSelected' | abpLocalization) }}</i>\r\n          </h6>\r\n        </div>\r\n        <div class=\"col-auto\">\r\n          <a\r\n            id=\"AbpTenantSwitchLink\"\r\n            href=\"javascript:void(0);\"\r\n            class=\"btn btn-sm mt-3 btn-outline-primary\"\r\n            (click)=\"service.onSwitch()\"\r\n            >{{ 'AbpUiMultiTenancy::Switch' | abpLocalization }}</a\r\n          >\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <abp-modal [(visible)]=\"service.isModalVisible\" [busy]=\"service.modalBusy\">\r\n    <ng-template #abpHeader>\r\n      <h5>Switch Tenant</h5>\r\n    </ng-template>\r\n    <ng-template #abpBody>\r\n      <form (ngSubmit)=\"service.save()\">\r\n        <div class=\"mt-2\">\r\n          <div class=\"mb-3 form-group\">\r\n            <label for=\"name\" class=\"form-label\">{{\r\n              'AbpUiMultiTenancy::Name' | abpLocalization\r\n            }}</label>\r\n            <input\r\n              [(ngModel)]=\"service.name\"\r\n              type=\"text\"\r\n              id=\"name\"\r\n              name=\"tenant\"\r\n              class=\"form-control\"\r\n              autofocus\r\n            />\r\n          </div>\r\n          <p>{{ 'AbpUiMultiTenancy::SwitchTenantHint' | abpLocalization }}</p>\r\n        </div>\r\n      </form>\r\n    </ng-template>\r\n    <ng-template #abpFooter>\r\n      <button abpClose type=\"button\" class=\"btn btn-secondary\">\r\n        {{ 'AbpTenantManagement::Cancel' | abpLocalization }}\r\n      </button>\r\n      <abp-button\r\n        type=\"abp-button\"\r\n        iconClass=\"fa fa-check\"\r\n        (click)=\"service.save()\"\r\n        [disabled]=\"currentTenant?.name === service.name\"\r\n      >\r\n        <span>{{ 'AbpTenantManagement::Save' | abpLocalization }}</span>\r\n      </abp-button>\r\n    </ng-template>\r\n  </abp-modal>\r\n</ng-container>\r\n", components: [{ type: i1$1.ModalComponent, selector: "abp-modal", inputs: ["visible", "busy", "options", "suppressUnsavedChangesWarning"], outputs: ["visibleChange", "init", "appear", "disappear"] }, { type: i1$1.ButtonComponent, selector: "abp-button", inputs: ["buttonId", "buttonClass", "buttonType", "formName", "iconClass", "loading", "disabled", "attributes"], outputs: ["click", "focus", "blur", "abpClick", "abpFocus", "abpBlur"] }], directives: [{ type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i4$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4$1.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i1.AutofocusDirective, selector: "[autofocus]", inputs: ["autofocus"] }, { type: i4$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1$1.ModalCloseDirective, selector: "[abpClose]" }], pipes: { "async": i2$1.AsyncPipe, "abpLocalization": i1.LocalizationPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: TenantBoxComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-tenant-box', providers: [TenantBoxService], template: "<ng-container *ngIf=\"(service.currentTenant$ | async) || { name: '' } as currentTenant\">\r\n  <div class=\"card shadow-sm rounded mb-3\">\r\n    <div class=\"card-body px-5\">\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <span style=\"font-size: 0.8em\" class=\"text-uppercase text-muted\">{{\r\n            'AbpUiMultiTenancy::Tenant' | abpLocalization\r\n          }}</span\r\n          ><br />\r\n          <h6 class=\"m-0 d-inline-block\">\r\n            <i>{{ currentTenant.name || ('AbpUiMultiTenancy::NotSelected' | abpLocalization) }}</i>\r\n          </h6>\r\n        </div>\r\n        <div class=\"col-auto\">\r\n          <a\r\n            id=\"AbpTenantSwitchLink\"\r\n            href=\"javascript:void(0);\"\r\n            class=\"btn btn-sm mt-3 btn-outline-primary\"\r\n            (click)=\"service.onSwitch()\"\r\n            >{{ 'AbpUiMultiTenancy::Switch' | abpLocalization }}</a\r\n          >\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <abp-modal [(visible)]=\"service.isModalVisible\" [busy]=\"service.modalBusy\">\r\n    <ng-template #abpHeader>\r\n      <h5>Switch Tenant</h5>\r\n    </ng-template>\r\n    <ng-template #abpBody>\r\n      <form (ngSubmit)=\"service.save()\">\r\n        <div class=\"mt-2\">\r\n          <div class=\"mb-3 form-group\">\r\n            <label for=\"name\" class=\"form-label\">{{\r\n              'AbpUiMultiTenancy::Name' | abpLocalization\r\n            }}</label>\r\n            <input\r\n              [(ngModel)]=\"service.name\"\r\n              type=\"text\"\r\n              id=\"name\"\r\n              name=\"tenant\"\r\n              class=\"form-control\"\r\n              autofocus\r\n            />\r\n          </div>\r\n          <p>{{ 'AbpUiMultiTenancy::SwitchTenantHint' | abpLocalization }}</p>\r\n        </div>\r\n      </form>\r\n    </ng-template>\r\n    <ng-template #abpFooter>\r\n      <button abpClose type=\"button\" class=\"btn btn-secondary\">\r\n        {{ 'AbpTenantManagement::Cancel' | abpLocalization }}\r\n      </button>\r\n      <abp-button\r\n        type=\"abp-button\"\r\n        iconClass=\"fa fa-check\"\r\n        (click)=\"service.save()\"\r\n        [disabled]=\"currentTenant?.name === service.name\"\r\n      >\r\n        <span>{{ 'AbpTenantManagement::Save' | abpLocalization }}</span>\r\n      </abp-button>\r\n    </ng-template>\r\n  </abp-modal>\r\n</ng-container>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1$2.TenantBoxService }]; } });

class AuthWrapperComponent {
    constructor(service) {
        this.service = service;
    }
}
AuthWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: AuthWrapperComponent, deps: [{ token: i1$2.AuthWrapperService }], target: i0.ɵɵFactoryTarget.Component });
AuthWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: AuthWrapperComponent, selector: "abp-auth-wrapper", providers: [AuthWrapperService], ngImport: i0, template: "<div class=\"row\">\r\n  <div class=\"mx-auto col col-md-5\">\r\n    <ng-container *ngIf=\"(service.isMultiTenancyEnabled$ | async) && service.isTenantBoxVisible\">\r\n      <abp-tenant-box\r\n        *abpReplaceableTemplate=\"{ componentKey: service.tenantBoxKey }\"\r\n      ></abp-tenant-box>\r\n    </ng-container>\r\n\r\n    <div class=\"abp-account-container\">\r\n      <div\r\n        *ngIf=\"service.enableLocalLogin$ | async; else disableLocalLoginTemplate\"\r\n        class=\"card mt-3 shadow-sm rounded\"\r\n      >\r\n        <div class=\"card-body p-5\">\r\n          <ng-content></ng-content>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #disableLocalLoginTemplate>\r\n  <div class=\"alert alert-warning\">\r\n    <strong>{{ 'AbpAccount::InvalidLoginRequest' | abpLocalization }}</strong>\r\n    {{ 'AbpAccount::ThereAreNoLoginSchemesConfiguredForThisClient' | abpLocalization }}\r\n  </div>\r\n</ng-template>\r\n", components: [{ type: TenantBoxComponent, selector: "abp-tenant-box" }], directives: [{ type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.ReplaceableTemplateDirective, selector: "[abpReplaceableTemplate]", inputs: ["abpReplaceableTemplate"] }], pipes: { "async": i2$1.AsyncPipe, "abpLocalization": i1.LocalizationPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: AuthWrapperComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-auth-wrapper', providers: [AuthWrapperService], template: "<div class=\"row\">\r\n  <div class=\"mx-auto col col-md-5\">\r\n    <ng-container *ngIf=\"(service.isMultiTenancyEnabled$ | async) && service.isTenantBoxVisible\">\r\n      <abp-tenant-box\r\n        *abpReplaceableTemplate=\"{ componentKey: service.tenantBoxKey }\"\r\n      ></abp-tenant-box>\r\n    </ng-container>\r\n\r\n    <div class=\"abp-account-container\">\r\n      <div\r\n        *ngIf=\"service.enableLocalLogin$ | async; else disableLocalLoginTemplate\"\r\n        class=\"card mt-3 shadow-sm rounded\"\r\n      >\r\n        <div class=\"card-body p-5\">\r\n          <ng-content></ng-content>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #disableLocalLoginTemplate>\r\n  <div class=\"alert alert-warning\">\r\n    <strong>{{ 'AbpAccount::InvalidLoginRequest' | abpLocalization }}</strong>\r\n    {{ 'AbpAccount::ThereAreNoLoginSchemesConfiguredForThisClient' | abpLocalization }}\r\n  </div>\r\n</ng-template>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1$2.AuthWrapperService }]; } });

class AccountLayoutComponent {
    constructor(service) {
        this.service = service;
        this.authWrapperKey = 'Account.AuthWrapperComponent';
    }
    ngAfterViewInit() {
        this.service.subscribeWindowSize();
    }
}
// required for dynamic component
AccountLayoutComponent.type = "account" /* account */;
AccountLayoutComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: AccountLayoutComponent, deps: [{ token: LayoutService }], target: i0.ɵɵFactoryTarget.Component });
AccountLayoutComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: AccountLayoutComponent, selector: "abp-layout-account", providers: [LayoutService, SubscriptionService], ngImport: i0, template: "<nav\r\n  class=\"navbar navbar-expand-lg navbar-dark bg-dark shadow-sm flex-column flex-md-row mb-4\"\r\n  id=\"main-navbar\"\r\n  style=\"min-height: 4rem\"\r\n>\r\n  <div class=\"container\">\r\n    <abp-logo *abpReplaceableTemplate=\"{ componentKey: service.logoComponentKey }\"></abp-logo>\r\n    <button\r\n      class=\"navbar-toggler\"\r\n      type=\"button\"\r\n      [attr.aria-expanded]=\"!service.isCollapsed\"\r\n      (click)=\"service.isCollapsed = !service.isCollapsed\"\r\n    >\r\n      <span class=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div\r\n      class=\"navbar-collapse\"\r\n      [class.overflow-hidden]=\"service.smallScreen\"\r\n      id=\"main-navbar-collapse\"\r\n    >\r\n      <ng-container *ngTemplateOutlet=\"!service.smallScreen ? navigations : null\"></ng-container>\r\n\r\n      <div\r\n        *ngIf=\"service.smallScreen\"\r\n        [@collapseWithMargin]=\"service.isCollapsed ? 'collapsed' : 'expanded'\"\r\n      >\r\n        <ng-container *ngTemplateOutlet=\"navigations\"></ng-container>\r\n      </div>\r\n\r\n      <ng-template #navigations>\r\n        <abp-routes\r\n          *abpReplaceableTemplate=\"{\r\n            componentKey: service.routesComponentKey,\r\n            inputs: {\r\n              smallScreen: { value: service.smallScreen }\r\n            }\r\n          }\"\r\n          class=\"mx-auto\"\r\n          [smallScreen]=\"service.smallScreen\"\r\n        ></abp-routes>\r\n\r\n        <abp-nav-items\r\n          *abpReplaceableTemplate=\"{\r\n            componentKey: service.navItemsComponentKey\r\n          }\"\r\n        ></abp-nav-items>\r\n      </ng-template>\r\n    </div>\r\n  </div>\r\n</nav>\r\n\r\n<!-- [@slideFromBottom]=\"outlet.isActivated && outlet.activatedRoute?.routeConfig?.path\" TODO: throws ExpressionChangedAfterItHasBeenCheck when animation is active. It should be fixed -->\r\n<div class=\"container\">\r\n  <abp-page-alert-container></abp-page-alert-container>\r\n  <abp-auth-wrapper\r\n    *abpReplaceableTemplate=\"{\r\n      componentKey: authWrapperKey\r\n    }\"\r\n  >\r\n    <router-outlet #outlet=\"outlet\"></router-outlet>\r\n  </abp-auth-wrapper>\r\n</div>\r\n", components: [{ type: LogoComponent, selector: "abp-logo" }, { type: RoutesComponent, selector: "abp-routes", inputs: ["smallScreen"] }, { type: NavItemsComponent, selector: "abp-nav-items" }, { type: PageAlertContainerComponent, selector: "abp-page-alert-container" }, { type: AuthWrapperComponent, selector: "abp-auth-wrapper" }], directives: [{ type: i4.NgbNavbar, selector: ".navbar" }, { type: i1.ReplaceableTemplateDirective, selector: "[abpReplaceableTemplate]", inputs: ["abpReplaceableTemplate"] }, { type: i2$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate", "attach", "detach"], exportAs: ["outlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: AccountLayoutComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-layout-account', providers: [LayoutService, SubscriptionService], template: "<nav\r\n  class=\"navbar navbar-expand-lg navbar-dark bg-dark shadow-sm flex-column flex-md-row mb-4\"\r\n  id=\"main-navbar\"\r\n  style=\"min-height: 4rem\"\r\n>\r\n  <div class=\"container\">\r\n    <abp-logo *abpReplaceableTemplate=\"{ componentKey: service.logoComponentKey }\"></abp-logo>\r\n    <button\r\n      class=\"navbar-toggler\"\r\n      type=\"button\"\r\n      [attr.aria-expanded]=\"!service.isCollapsed\"\r\n      (click)=\"service.isCollapsed = !service.isCollapsed\"\r\n    >\r\n      <span class=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div\r\n      class=\"navbar-collapse\"\r\n      [class.overflow-hidden]=\"service.smallScreen\"\r\n      id=\"main-navbar-collapse\"\r\n    >\r\n      <ng-container *ngTemplateOutlet=\"!service.smallScreen ? navigations : null\"></ng-container>\r\n\r\n      <div\r\n        *ngIf=\"service.smallScreen\"\r\n        [@collapseWithMargin]=\"service.isCollapsed ? 'collapsed' : 'expanded'\"\r\n      >\r\n        <ng-container *ngTemplateOutlet=\"navigations\"></ng-container>\r\n      </div>\r\n\r\n      <ng-template #navigations>\r\n        <abp-routes\r\n          *abpReplaceableTemplate=\"{\r\n            componentKey: service.routesComponentKey,\r\n            inputs: {\r\n              smallScreen: { value: service.smallScreen }\r\n            }\r\n          }\"\r\n          class=\"mx-auto\"\r\n          [smallScreen]=\"service.smallScreen\"\r\n        ></abp-routes>\r\n\r\n        <abp-nav-items\r\n          *abpReplaceableTemplate=\"{\r\n            componentKey: service.navItemsComponentKey\r\n          }\"\r\n        ></abp-nav-items>\r\n      </ng-template>\r\n    </div>\r\n  </div>\r\n</nav>\r\n\r\n<!-- [@slideFromBottom]=\"outlet.isActivated && outlet.activatedRoute?.routeConfig?.path\" TODO: throws ExpressionChangedAfterItHasBeenCheck when animation is active. It should be fixed -->\r\n<div class=\"container\">\r\n  <abp-page-alert-container></abp-page-alert-container>\r\n  <abp-auth-wrapper\r\n    *abpReplaceableTemplate=\"{\r\n      componentKey: authWrapperKey\r\n    }\"\r\n  >\r\n    <router-outlet #outlet=\"outlet\"></router-outlet>\r\n  </abp-auth-wrapper>\r\n</div>\r\n" }]
        }], ctorParameters: function () { return [{ type: LayoutService }]; } });

class ApplicationLayoutComponent {
    constructor(service) {
        this.service = service;
    }
    ngAfterViewInit() {
        this.service.subscribeWindowSize();
    }
}
// required for dynamic component
ApplicationLayoutComponent.type = "application" /* application */;
ApplicationLayoutComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ApplicationLayoutComponent, deps: [{ token: LayoutService }], target: i0.ɵɵFactoryTarget.Component });
ApplicationLayoutComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: ApplicationLayoutComponent, selector: "abp-layout-application", providers: [LayoutService, SubscriptionService], ngImport: i0, template: "<nav\r\n  class=\"navbar navbar-expand-lg navbar-dark bg-dark shadow-sm flex-column flex-md-row mb-4\"\r\n  id=\"main-navbar\"\r\n  style=\"min-height: 4rem\"\r\n>\r\n  <div class=\"container\">\r\n    <abp-logo *abpReplaceableTemplate=\"{ componentKey: service.logoComponentKey }\"></abp-logo>\r\n    <button\r\n      class=\"navbar-toggler\"\r\n      type=\"button\"\r\n      [attr.aria-expanded]=\"!service.isCollapsed\"\r\n      (click)=\"service.isCollapsed = !service.isCollapsed\"\r\n    >\r\n      <span class=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div class=\"navbar-collapse\" [class.overflow-hidden]=\"service.smallScreen\" id=\"main-navbar-collapse\">\r\n      <ng-container *ngTemplateOutlet=\"!service.smallScreen ? navigations : null\"></ng-container>\r\n\r\n      <div *ngIf=\"service.smallScreen\" [@collapseWithMargin]=\"service.isCollapsed ? 'collapsed' : 'expanded'\">\r\n        <ng-container *ngTemplateOutlet=\"navigations\"></ng-container>\r\n      </div>\r\n\r\n      <ng-template #navigations>\r\n        <abp-routes\r\n          *abpReplaceableTemplate=\"{\r\n            componentKey: service.routesComponentKey,\r\n            inputs: {\r\n              smallScreen: { value: service.smallScreen }\r\n            }\r\n          }\"\r\n          class=\"mx-auto\"\r\n          [smallScreen]=\"service.smallScreen\"\r\n        ></abp-routes>\r\n\r\n        <abp-nav-items\r\n          *abpReplaceableTemplate=\"{\r\n            componentKey: service.navItemsComponentKey\r\n          }\"\r\n        ></abp-nav-items>\r\n      </ng-template>\r\n    </div>\r\n  </div>\r\n</nav>\r\n\r\n<!-- [@slideFromBottom]=\"outlet.isActivated && outlet.activatedRoute?.routeConfig?.path\" TODO: throws ExpressionChangedAfterItHasBeenCheck when animation is active. It should be fixed -->\r\n<div class=\"container\">\r\n  <abp-page-alert-container></abp-page-alert-container>\r\n\r\n  <router-outlet #outlet=\"outlet\"></router-outlet>\r\n</div>\r\n", components: [{ type: LogoComponent, selector: "abp-logo" }, { type: RoutesComponent, selector: "abp-routes", inputs: ["smallScreen"] }, { type: NavItemsComponent, selector: "abp-nav-items" }, { type: PageAlertContainerComponent, selector: "abp-page-alert-container" }], directives: [{ type: i4.NgbNavbar, selector: ".navbar" }, { type: i1.ReplaceableTemplateDirective, selector: "[abpReplaceableTemplate]", inputs: ["abpReplaceableTemplate"] }, { type: i2$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate", "attach", "detach"], exportAs: ["outlet"] }], animations: [slideFromBottom, collapseWithMargin] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ApplicationLayoutComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-layout-application', animations: [slideFromBottom, collapseWithMargin], providers: [LayoutService, SubscriptionService], template: "<nav\r\n  class=\"navbar navbar-expand-lg navbar-dark bg-dark shadow-sm flex-column flex-md-row mb-4\"\r\n  id=\"main-navbar\"\r\n  style=\"min-height: 4rem\"\r\n>\r\n  <div class=\"container\">\r\n    <abp-logo *abpReplaceableTemplate=\"{ componentKey: service.logoComponentKey }\"></abp-logo>\r\n    <button\r\n      class=\"navbar-toggler\"\r\n      type=\"button\"\r\n      [attr.aria-expanded]=\"!service.isCollapsed\"\r\n      (click)=\"service.isCollapsed = !service.isCollapsed\"\r\n    >\r\n      <span class=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div class=\"navbar-collapse\" [class.overflow-hidden]=\"service.smallScreen\" id=\"main-navbar-collapse\">\r\n      <ng-container *ngTemplateOutlet=\"!service.smallScreen ? navigations : null\"></ng-container>\r\n\r\n      <div *ngIf=\"service.smallScreen\" [@collapseWithMargin]=\"service.isCollapsed ? 'collapsed' : 'expanded'\">\r\n        <ng-container *ngTemplateOutlet=\"navigations\"></ng-container>\r\n      </div>\r\n\r\n      <ng-template #navigations>\r\n        <abp-routes\r\n          *abpReplaceableTemplate=\"{\r\n            componentKey: service.routesComponentKey,\r\n            inputs: {\r\n              smallScreen: { value: service.smallScreen }\r\n            }\r\n          }\"\r\n          class=\"mx-auto\"\r\n          [smallScreen]=\"service.smallScreen\"\r\n        ></abp-routes>\r\n\r\n        <abp-nav-items\r\n          *abpReplaceableTemplate=\"{\r\n            componentKey: service.navItemsComponentKey\r\n          }\"\r\n        ></abp-nav-items>\r\n      </ng-template>\r\n    </div>\r\n  </div>\r\n</nav>\r\n\r\n<!-- [@slideFromBottom]=\"outlet.isActivated && outlet.activatedRoute?.routeConfig?.path\" TODO: throws ExpressionChangedAfterItHasBeenCheck when animation is active. It should be fixed -->\r\n<div class=\"container\">\r\n  <abp-page-alert-container></abp-page-alert-container>\r\n\r\n  <router-outlet #outlet=\"outlet\"></router-outlet>\r\n</div>\r\n" }]
        }], ctorParameters: function () { return [{ type: LayoutService }]; } });

class EmptyLayoutComponent {
}
EmptyLayoutComponent.type = "empty" /* empty */;
EmptyLayoutComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: EmptyLayoutComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
EmptyLayoutComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: EmptyLayoutComponent, selector: "abp-layout-empty", ngImport: i0, template: `
    <router-outlet></router-outlet>
    <abp-confirmation></abp-confirmation>
  `, isInline: true, components: [{ type: i1$1.ConfirmationComponent, selector: "abp-confirmation" }], directives: [{ type: i2.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate", "attach", "detach"], exportAs: ["outlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: EmptyLayoutComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'abp-layout-empty',
                    template: `
    <router-outlet></router-outlet>
    <abp-confirmation></abp-confirmation>
  `,
                }]
        }] });

class CurrentUserComponent {
    constructor(navigateToManageProfile, userMenu, authService, configState, sessionState) {
        this.navigateToManageProfile = navigateToManageProfile;
        this.userMenu = userMenu;
        this.authService = authService;
        this.configState = configState;
        this.sessionState = sessionState;
        this.currentUser$ = this.configState.getOne$('currentUser');
        this.selectedTenant$ = this.sessionState.getTenant$();
        this.trackByFn = (_, element) => element.id;
    }
    get smallScreen() {
        return window.innerWidth < 992;
    }
    navigateToLogin() {
        this.authService.navigateToLogin();
    }
    logout() {
        this.authService.logout().subscribe();
    }
}
CurrentUserComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: CurrentUserComponent, deps: [{ token: NAVIGATE_TO_MANAGE_PROFILE }, { token: i1$1.UserMenuService }, { token: i1.AuthService }, { token: i1.ConfigStateService }, { token: i1.SessionStateService }], target: i0.ɵɵFactoryTarget.Component });
CurrentUserComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: CurrentUserComponent, selector: "abp-current-user", ngImport: i0, template: "<ng-template #loginBtn>\r\n  <a role=\"button\" class=\"nav-link pointer\" (click)=\"navigateToLogin()\">{{\r\n    'AbpAccount::Login' | abpLocalization\r\n  }}</a>\r\n</ng-template>\r\n<div\r\n  *ngIf=\"(currentUser$ | async)?.isAuthenticated; else loginBtn\"\r\n  ngbDropdown\r\n  class=\"dropdown\"\r\n  #currentUserDropdown=\"ngbDropdown\"\r\n  display=\"static\"\r\n>\r\n  <a\r\n    ngbDropdownToggle\r\n    class=\"nav-link\"\r\n    href=\"javascript:void(0)\"\r\n    role=\"button\"\r\n    id=\"dropdownMenuLink\"\r\n    data-toggle=\"dropdown\"\r\n    aria-haspopup=\"true\"\r\n    aria-expanded=\"false\"\r\n  >\r\n    <small *ngIf=\"(selectedTenant$ | async)?.name as tenantName\"\r\n      ><i>{{ tenantName }}</i\r\n      >\\</small\r\n    >\r\n    <strong>{{ (currentUser$ | async)?.userName }}</strong>\r\n  </a>\r\n  <div\r\n    class=\"dropdown-menu dropdown-menu-end border-0 shadow-sm\"\r\n    aria-labelledby=\"dropdownMenuLink\"\r\n    [class.d-block]=\"smallScreen && currentUserDropdown.isOpen()\"\r\n  >\r\n    <ng-container *ngFor=\"let item of userMenu.items$ | async; trackBy: trackByFn\">\r\n      <ng-container *ngIf=\"item.visible && item.visible()\">\r\n        <li class=\"nav-item d-flex align-items-center\" *abpPermission=\"item.requiredPolicy\">\r\n          <ng-container\r\n            *ngIf=\"item.component; else htmlTemplate\"\r\n            [ngComponentOutlet]=\"item.component\"\r\n            [ngComponentOutletInjector]=\"item | toInjector\"\r\n          ></ng-container>\r\n\r\n          <ng-template #htmlTemplate>\r\n            <div\r\n              *ngIf=\"item.html; else textTemplate\"\r\n              [innerHTML]=\"item.html\"\r\n              (click)=\"item.action ? item.action() : null\"\r\n            ></div>\r\n          </ng-template>\r\n\r\n          <ng-template #textTemplate>\r\n            <a\r\n              *ngIf=\"item.textTemplate\"\r\n              (click)=\"item.action ? item.action() : null\"\r\n              class=\"dropdown-item pointer\"\r\n            >\r\n              <i *ngIf=\"item.textTemplate.icon\" class=\"me-1 {{ item.textTemplate.icon }}\"></i>\r\n              {{ item.textTemplate.text | abpLocalization }}</a\r\n            >\r\n          </ng-template>\r\n        </li>\r\n      </ng-container>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n", directives: [{ type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgbDropdown, selector: "[ngbDropdown]", inputs: ["autoClose", "dropdownClass", "open", "placement", "container", "display"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i4.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.PermissionDirective, selector: "[abpPermission]", inputs: ["abpPermission", "abpPermissionRunChangeDetection"] }, { type: i2$1.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModuleFactory"] }], pipes: { "abpLocalization": i1.LocalizationPipe, "async": i2$1.AsyncPipe, "toInjector": i1.ToInjectorPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: CurrentUserComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-current-user', template: "<ng-template #loginBtn>\r\n  <a role=\"button\" class=\"nav-link pointer\" (click)=\"navigateToLogin()\">{{\r\n    'AbpAccount::Login' | abpLocalization\r\n  }}</a>\r\n</ng-template>\r\n<div\r\n  *ngIf=\"(currentUser$ | async)?.isAuthenticated; else loginBtn\"\r\n  ngbDropdown\r\n  class=\"dropdown\"\r\n  #currentUserDropdown=\"ngbDropdown\"\r\n  display=\"static\"\r\n>\r\n  <a\r\n    ngbDropdownToggle\r\n    class=\"nav-link\"\r\n    href=\"javascript:void(0)\"\r\n    role=\"button\"\r\n    id=\"dropdownMenuLink\"\r\n    data-toggle=\"dropdown\"\r\n    aria-haspopup=\"true\"\r\n    aria-expanded=\"false\"\r\n  >\r\n    <small *ngIf=\"(selectedTenant$ | async)?.name as tenantName\"\r\n      ><i>{{ tenantName }}</i\r\n      >\\</small\r\n    >\r\n    <strong>{{ (currentUser$ | async)?.userName }}</strong>\r\n  </a>\r\n  <div\r\n    class=\"dropdown-menu dropdown-menu-end border-0 shadow-sm\"\r\n    aria-labelledby=\"dropdownMenuLink\"\r\n    [class.d-block]=\"smallScreen && currentUserDropdown.isOpen()\"\r\n  >\r\n    <ng-container *ngFor=\"let item of userMenu.items$ | async; trackBy: trackByFn\">\r\n      <ng-container *ngIf=\"item.visible && item.visible()\">\r\n        <li class=\"nav-item d-flex align-items-center\" *abpPermission=\"item.requiredPolicy\">\r\n          <ng-container\r\n            *ngIf=\"item.component; else htmlTemplate\"\r\n            [ngComponentOutlet]=\"item.component\"\r\n            [ngComponentOutletInjector]=\"item | toInjector\"\r\n          ></ng-container>\r\n\r\n          <ng-template #htmlTemplate>\r\n            <div\r\n              *ngIf=\"item.html; else textTemplate\"\r\n              [innerHTML]=\"item.html\"\r\n              (click)=\"item.action ? item.action() : null\"\r\n            ></div>\r\n          </ng-template>\r\n\r\n          <ng-template #textTemplate>\r\n            <a\r\n              *ngIf=\"item.textTemplate\"\r\n              (click)=\"item.action ? item.action() : null\"\r\n              class=\"dropdown-item pointer\"\r\n            >\r\n              <i *ngIf=\"item.textTemplate.icon\" class=\"me-1 {{ item.textTemplate.icon }}\"></i>\r\n              {{ item.textTemplate.text | abpLocalization }}</a\r\n            >\r\n          </ng-template>\r\n        </li>\r\n      </ng-container>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n" }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Inject,
                        args: [NAVIGATE_TO_MANAGE_PROFILE]
                    }] }, { type: i1$1.UserMenuService }, { type: i1.AuthService }, { type: i1.ConfigStateService }, { type: i1.SessionStateService }];
    } });

class LanguagesComponent {
    constructor(sessionState, configState) {
        this.sessionState = sessionState;
        this.configState = configState;
        this.languages$ = this.configState.getDeep$('localization.languages');
    }
    get smallScreen() {
        return window.innerWidth < 992;
    }
    get defaultLanguage$() {
        return this.languages$.pipe(map(languages => { var _a; return ((_a = languages === null || languages === void 0 ? void 0 : languages.find(lang => lang.cultureName === this.selectedLangCulture)) === null || _a === void 0 ? void 0 : _a.displayName) || ''; }));
    }
    get dropdownLanguages$() {
        return this.languages$.pipe(map(languages => (languages === null || languages === void 0 ? void 0 : languages.filter(lang => lang.cultureName !== this.selectedLangCulture)) || []));
    }
    get selectedLangCulture() {
        return this.sessionState.getLanguage();
    }
    onChangeLang(cultureName) {
        this.sessionState.setLanguage(cultureName);
    }
}
LanguagesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LanguagesComponent, deps: [{ token: i1.SessionStateService }, { token: i1.ConfigStateService }], target: i0.ɵɵFactoryTarget.Component });
LanguagesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: LanguagesComponent, selector: "abp-languages", ngImport: i0, template: `
    <div
      *ngIf="((dropdownLanguages$ | async)?.length || 0) > 0"
      class="dropdown"
      ngbDropdown
      #languageDropdown="ngbDropdown"
      display="static"
    >
      <a
        ngbDropdownToggle
        class="nav-link"
        href="javascript:void(0)"
        role="button"
        id="dropdownMenuLink"
        data-toggle="dropdown"
        aria-haspopup="true"
        aria-expanded="false"
      >
        {{ defaultLanguage$ | async }}
      </a>
      <div
        class="dropdown-menu dropdown-menu-end border-0 shadow-sm"
        aria-labelledby="dropdownMenuLink"
        [class.d-block]="smallScreen && languageDropdown.isOpen()"
      >
        <a
          *ngFor="let lang of dropdownLanguages$ | async"
          href="javascript:void(0)"
          class="dropdown-item"
          (click)="onChangeLang(lang.cultureName || '')"
          >{{ lang?.displayName }}</a
        >
      </div>
    </div>
  `, isInline: true, directives: [{ type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgbDropdown, selector: "[ngbDropdown]", inputs: ["autoClose", "dropdownClass", "open", "placement", "container", "display"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i4.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i2$1.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LanguagesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'abp-languages',
                    template: `
    <div
      *ngIf="((dropdownLanguages$ | async)?.length || 0) > 0"
      class="dropdown"
      ngbDropdown
      #languageDropdown="ngbDropdown"
      display="static"
    >
      <a
        ngbDropdownToggle
        class="nav-link"
        href="javascript:void(0)"
        role="button"
        id="dropdownMenuLink"
        data-toggle="dropdown"
        aria-haspopup="true"
        aria-expanded="false"
      >
        {{ defaultLanguage$ | async }}
      </a>
      <div
        class="dropdown-menu dropdown-menu-end border-0 shadow-sm"
        aria-labelledby="dropdownMenuLink"
        [class.d-block]="smallScreen && languageDropdown.isOpen()"
      >
        <a
          *ngFor="let lang of dropdownLanguages$ | async"
          href="javascript:void(0)"
          class="dropdown-item"
          (click)="onChangeLang(lang.cultureName || '')"
          >{{ lang?.displayName }}</a
        >
      </div>
    </div>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i1.SessionStateService }, { type: i1.ConfigStateService }]; } });

class ValidationErrorComponent extends ValidationErrorComponent$1 {
    get abpErrors() {
        if (!this.errors || !this.errors.length)
            return [];
        return this.errors.map(error => {
            if (!error.message)
                return error;
            const index = error.message.indexOf('[');
            if (index > -1) {
                return Object.assign(Object.assign({}, error), { message: error.message.slice(0, index), interpoliteParams: error.message.slice(index + 1, error.message.length - 1).split(',') });
            }
            return error;
        });
    }
}
ValidationErrorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ValidationErrorComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
ValidationErrorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: ValidationErrorComponent, selector: "abp-validation-error", usesInheritance: true, ngImport: i0, template: `
    <div class="invalid-feedback" *ngFor="let error of abpErrors; trackBy: trackByFn">
      {{ error.message | abpLocalization: error.interpoliteParams }}
    </div>
  `, isInline: true, directives: [{ type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "abpLocalization": i1.LocalizationPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ValidationErrorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'abp-validation-error',
                    template: `
    <div class="invalid-feedback" *ngFor="let error of abpErrors; trackBy: trackByFn">
      {{ error.message | abpLocalization: error.interpoliteParams }}
    </div>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                }]
        }] });

const LAZY_STYLES = new InjectionToken('LAZY_STYLES');

const BOOTSTRAP = 'bootstrap-{{dir}}.min.css';
class LazyStyleHandler {
    constructor(injector) {
        this._dir = 'ltr';
        this.loaded = new Map();
        this.setStyles(injector);
        this.setLazyLoad(injector);
        this.listenToDirectionChanges(injector);
    }
    set dir(dir) {
        if (dir === this._dir)
            return;
        this.switchCSS(dir);
        this._dir = dir;
    }
    get dir() {
        return this._dir;
    }
    getHrefFromLink(link) {
        if (!link)
            return '';
        const a = document.createElement('a');
        a.href = link.href;
        return a.pathname.replace(/^\//, '');
    }
    getLoadedBootstrap() {
        const href = createLazyStyleHref(BOOTSTRAP, this.dir);
        const selector = `[href*="${href.replace(/\.css$/, '')}"]`;
        const link = document.querySelector(selector);
        return { href, link };
    }
    listenToDirectionChanges(injector) {
        const docDirHandler = injector.get(DocumentDirHandlerService);
        // will always listen, no need to unsubscribe
        docDirHandler.dir$.subscribe(dir => {
            this.dir = dir;
        });
    }
    setLazyLoad(injector) {
        this.lazyLoad = injector.get(LazyLoadService);
        const { href, link } = this.getLoadedBootstrap();
        this.lazyLoad.loaded.set(href, link);
    }
    setStyles(injector) {
        this.styles = injector.get(LAZY_STYLES, [BOOTSTRAP]);
    }
    switchCSS(dir) {
        this.styles.forEach(style => {
            const oldHref = createLazyStyleHref(style, this.dir);
            const newHref = createLazyStyleHref(style, dir);
            const link = this.loaded.get(newHref);
            const href = this.getHrefFromLink(link) || newHref;
            const strategy = LOADING_STRATEGY.PrependAnonymousStyleToHead(href);
            this.lazyLoad.load(strategy).subscribe(() => {
                const oldLink = this.lazyLoad.loaded.get(oldHref);
                this.loaded.delete(newHref);
                this.loaded.set(oldHref, oldLink);
                const newLink = this.lazyLoad.loaded.get(href);
                this.lazyLoad.loaded.delete(href);
                this.lazyLoad.loaded.set(newHref, newLink);
                this.lazyLoad.remove(oldHref);
            });
        });
    }
}
LazyStyleHandler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LazyStyleHandler, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
LazyStyleHandler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LazyStyleHandler });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LazyStyleHandler, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });
function createLazyStyleHref(style, dir) {
    return style.replace(/{{\s*dir\s*}}/g, dir);
}
function initLazyStyleHandler(injector) {
    return () => new LazyStyleHandler(injector);
}

const BASIC_THEME_NAV_ITEM_PROVIDERS = [
    {
        provide: APP_INITIALIZER,
        useFactory: configureNavItems,
        deps: [NavItemsService],
        multi: true,
    },
];
function configureNavItems(navItems) {
    return () => {
        navItems.addItems([
            {
                id: "Theme.LanguagesComponent" /* Languages */,
                order: 100,
                component: LanguagesComponent,
            },
            {
                id: "Theme.CurrentUserComponent" /* CurrentUser */,
                order: 100,
                component: CurrentUserComponent,
            },
        ]);
    };
}

var styles = `
.content-header-title {
    font-size: 24px;
}
.entry-row {
    margin-bottom: 15px;
}
#main-navbar-tools a.dropdown-toggle {
    text-decoration: none;
    color: #fff;
}
.navbar .dropdown-submenu {
    position: relative;
}
.navbar .dropdown-menu {
    margin: 0;
    padding: 0;
}
.navbar .dropdown-menu a {
    font-size: .9em;
    padding: 10px 15px;
    display: block;
    min-width: 210px;
    text-align: left;
    border-radius: 0.25rem;
    min-height: 44px;
}
[dir=rtl] .navbar .dropdown-menu a {
    text-align: right!important;
}
.navbar .dropdown-submenu a::after {
    transform: rotate(-90deg);
    position: absolute;
    right: 16px;
    top: 18px;
}
[dir=rtl] .navbar .dropdown-submenu a::after {
    transform: rotate(90deg);
    left: 16px;
    right: auto;
    top: 20px;
}
.navbar .dropdown-submenu .dropdown-menu {
    top: 0;
    left: 100%;
}
/* work around for rtl. Track https://github.com/ng-bootstrap/ng-bootstrap/issues/4100 issue */
[dir=rtl] .navbar .dropdown-submenu .dropdown-menu {
    top: 0;
    right: 100%;
}
.card-header .btn {
    padding: 2px 6px;
}
.card-header h5 {
    margin: 0;
}
.container > .card {
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;
}
@media screen and (min-width: 992px) {
    .navbar .dropdown:hover > .dropdown-menu {
        display: block;
    }

    .navbar .dropdown-submenu:hover > .dropdown-menu {
        display: block;
    }
}
.input-validation-error {
    border-color: #dc3545;
}
.field-validation-error {
    font-size: 0.8em;
}
.ui-table .ui-table-tbody > tr.empty-row > div.empty-row-content {
    border: 1px solid #c8c8c8;
  }
.abp-loading {
    background: rgba(0, 0, 0, 0.05);
}
.modal-backdrop {
background-color: rgba(0, 0, 0, 0.6);
}

.confirmation .confirmation-backdrop {
	 background: rgba(0, 0, 0, 0.7) !important;
}
 .confirmation .confirmation-dialog {
	 border: none;
	 border-radius: 10px;
	 background-color: #fff;
	 box-shadow: 0 0 10px -5px rgba(0, 0, 0, 0.5);
}
 .confirmation .confirmation-dialog .icon-container .icon {
	 stroke: #fff;
	 color: #fff;
}
 .confirmation .confirmation-dialog .icon-container.info .icon {
	 stroke: #2f96b4;
	 color: #2f96b4;
}
 .confirmation .confirmation-dialog .icon-container.success .icon {
	 stroke: #51a351;
	 color: #51a351;
}
 .confirmation .confirmation-dialog .icon-container.warning .icon {
	 stroke: #f89406;
	 color: #f89406;
}
 .confirmation .confirmation-dialog .icon-container.error .icon {
	 stroke: #bd362f;
	 color: #bd362f;
}
 .confirmation .confirmation-dialog .content .title {
	 color: #222;
}
 .confirmation .confirmation-dialog .content .message {
	 color: #777;
}
 .confirmation .confirmation-dialog .footer {
	 background: transparent;
}
 .confirmation .confirmation-dialog .footer .confirmation-button {
	 background-color: #eee;
	 color: #777;
}
 .confirmation .confirmation-dialog .footer .confirmation-button:hover, .confirmation .confirmation-dialog .footer .confirmation-button:focus, .confirmation .confirmation-dialog .footer .confirmation-button:active {
	 background-color: #bbb;
}
 .confirmation .confirmation-dialog .footer .confirmation-button--confirm {
	 background-color: #2f96b4;
	 color: #fff;
}
 .confirmation .confirmation-dialog .footer .confirmation-button--confirm:hover {
	 background-color: #2e819b;
}
.ui-table .pagination-wrapper {
    background-color: #f4f4f4;
    border: 1px solid #c8c8c8;
}
.bordered .datatable-body-row {
    border-top: 1px solid #eee;
    margin-top: -1px;
}
.breadcrumb {
    background-color: transparent;
    padding: 0.27rem;
}
`;

const BASIC_THEME_STYLES_PROVIDERS = [
    {
        provide: APP_INITIALIZER,
        useFactory: configureStyles,
        deps: [DomInsertionService, ReplaceableComponentsService],
        multi: true,
    },
];
function configureStyles(domInsertion, replaceableComponents) {
    return () => {
        domInsertion.insertContent(CONTENT_STRATEGY.AppendStyleToHead(styles));
        initLayouts(replaceableComponents);
    };
}
function initLayouts(replaceableComponents) {
    replaceableComponents.add({
        key: "Theme.ApplicationLayoutComponent" /* ApplicationLayout */,
        component: ApplicationLayoutComponent,
    });
    replaceableComponents.add({
        key: "Theme.AccountLayoutComponent" /* AccountLayout */,
        component: AccountLayoutComponent,
    });
    replaceableComponents.add({
        key: "Theme.EmptyLayoutComponent" /* EmptyLayout */,
        component: EmptyLayoutComponent,
    });
}

const BASIC_THEME_USER_MENU_PROVIDERS = [
    {
        provide: APP_INITIALIZER,
        useFactory: configureUserMenu,
        deps: [Injector],
        multi: true,
    },
];
function configureUserMenu(injector) {
    const userMenu = injector.get(UserMenuService);
    const authService = injector.get(AuthService);
    const navigateToManageProfile = injector.get(NAVIGATE_TO_MANAGE_PROFILE);
    return () => {
        userMenu.addItems([
            {
                id: "UserMenu.MyAccount" /* MyAccount */,
                order: 100,
                textTemplate: {
                    text: 'AbpAccount::MyAccount',
                    icon: 'fa fa-cog',
                },
                action: () => navigateToManageProfile(),
            },
            {
                id: "UserMenu.Logout" /* Logout */,
                order: 101,
                textTemplate: {
                    text: 'AbpUi::Logout',
                    icon: 'fa fa-power-off',
                },
                action: () => {
                    authService.logout().subscribe();
                },
            },
        ]);
    };
}

const LAYOUTS = [ApplicationLayoutComponent, AccountLayoutComponent, EmptyLayoutComponent];
class BaseThemeBasicModule {
}
BaseThemeBasicModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: BaseThemeBasicModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
BaseThemeBasicModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: BaseThemeBasicModule, declarations: [ApplicationLayoutComponent, AccountLayoutComponent, EmptyLayoutComponent, ValidationErrorComponent,
        LogoComponent,
        NavItemsComponent,
        RoutesComponent,
        CurrentUserComponent,
        LanguagesComponent,
        PageAlertContainerComponent,
        TenantBoxComponent,
        AuthWrapperComponent], imports: [CoreModule,
        ThemeSharedModule,
        NgbCollapseModule,
        NgbDropdownModule,
        NgxValidateCoreModule], exports: [ApplicationLayoutComponent, AccountLayoutComponent, EmptyLayoutComponent, ValidationErrorComponent,
        LogoComponent,
        NavItemsComponent,
        RoutesComponent,
        CurrentUserComponent,
        LanguagesComponent,
        PageAlertContainerComponent] });
BaseThemeBasicModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: BaseThemeBasicModule, imports: [[
            CoreModule,
            ThemeSharedModule,
            NgbCollapseModule,
            NgbDropdownModule,
            NgxValidateCoreModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: BaseThemeBasicModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        ...LAYOUTS,
                        ValidationErrorComponent,
                        LogoComponent,
                        NavItemsComponent,
                        RoutesComponent,
                        CurrentUserComponent,
                        LanguagesComponent,
                        PageAlertContainerComponent,
                        TenantBoxComponent,
                        AuthWrapperComponent,
                    ],
                    exports: [
                        ...LAYOUTS,
                        ValidationErrorComponent,
                        LogoComponent,
                        NavItemsComponent,
                        RoutesComponent,
                        CurrentUserComponent,
                        LanguagesComponent,
                        PageAlertContainerComponent,
                    ],
                    imports: [
                        CoreModule,
                        ThemeSharedModule,
                        NgbCollapseModule,
                        NgbDropdownModule,
                        NgxValidateCoreModule,
                    ]
                }]
        }] });
class ThemeBasicModule {
    static forRoot() {
        return {
            ngModule: ThemeBasicModule,
            providers: [
                BASIC_THEME_NAV_ITEM_PROVIDERS,
                BASIC_THEME_USER_MENU_PROVIDERS,
                BASIC_THEME_STYLES_PROVIDERS,
                {
                    provide: VALIDATION_ERROR_TEMPLATE,
                    useValue: ValidationErrorComponent,
                },
                {
                    provide: VALIDATION_TARGET_SELECTOR,
                    useValue: '.form-group',
                },
                {
                    provide: VALIDATION_INVALID_CLASSES,
                    useValue: 'is-invalid',
                },
                LazyStyleHandler,
                {
                    provide: APP_INITIALIZER,
                    useFactory: noop,
                    multi: true,
                    deps: [LazyStyleHandler],
                },
            ],
        };
    }
}
ThemeBasicModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ThemeBasicModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ThemeBasicModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ThemeBasicModule, imports: [BaseThemeBasicModule], exports: [BaseThemeBasicModule] });
ThemeBasicModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ThemeBasicModule, imports: [[BaseThemeBasicModule], BaseThemeBasicModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ThemeBasicModule, decorators: [{
            type: NgModule,
            args: [{
                    exports: [BaseThemeBasicModule],
                    imports: [BaseThemeBasicModule],
                }]
        }] });

/*
 * Public API Surface of theme-basic
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AccountLayoutComponent, ApplicationLayoutComponent, AuthWrapperComponent, BASIC_THEME_NAV_ITEM_PROVIDERS, BASIC_THEME_STYLES_PROVIDERS, BASIC_THEME_USER_MENU_PROVIDERS, BOOTSTRAP, BaseThemeBasicModule, CurrentUserComponent, EmptyLayoutComponent, LAYOUTS, LAZY_STYLES, LanguagesComponent, LazyStyleHandler, LogoComponent, NavItemsComponent, PageAlertContainerComponent, RoutesComponent, TenantBoxComponent, ThemeBasicModule, ValidationErrorComponent, configureNavItems, configureStyles, configureUserMenu, createLazyStyleHref, initLazyStyleHandler };
//# sourceMappingURL=abp-ng.theme.basic.mjs.map

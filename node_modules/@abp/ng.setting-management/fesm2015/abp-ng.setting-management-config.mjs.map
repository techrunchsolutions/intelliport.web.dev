{"version":3,"file":"abp-ng.setting-management-config.mjs","sources":["../../../../packages/setting-management/config/src/proxy/email-settings.service.ts","../../../../packages/setting-management/config/src/components/email-setting-group/email-setting-group.component.ts","../../../../packages/setting-management/config/src/components/email-setting-group/email-setting-group.component.html","../../../../packages/setting-management/config/src/services/settings-tabs.service.ts","../../../../packages/setting-management/config/src/providers/route.provider.ts","../../../../packages/setting-management/config/src/providers/setting-tab.provider.ts","../../../../packages/setting-management/config/src/providers/features.token.ts","../../../../packages/setting-management/config/src/providers/visible.provider.ts","../../../../packages/setting-management/config/src/setting-management-config.module.ts","../../../../packages/setting-management/config/src/abp-ng.setting-management-config.ts"],"sourcesContent":["import type { EmailSettingsDto, UpdateEmailSettingsDto } from './models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class EmailSettingsService {\r\n  apiName = 'SettingManagement';\r\n\r\n  get = () =>\r\n    this.restService.request<any, EmailSettingsDto>(\r\n      {\r\n        method: 'GET',\r\n        url: '/api/setting-management/emailing',\r\n      },\r\n      { apiName: this.apiName },\r\n    );\r\n\r\n  update = (input: UpdateEmailSettingsDto) =>\r\n    this.restService.request<any, void>(\r\n      {\r\n        method: 'POST',\r\n        url: '/api/setting-management/emailing',\r\n        body: input,\r\n      },\r\n      { apiName: this.apiName },\r\n    );\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import { collapse, ToasterService } from '@abp/ng.theme.shared';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { EmailSettingsService } from '../../proxy/email-settings.service';\r\nimport { EmailSettingsDto } from '../../proxy/models';\r\n\r\n@Component({\r\n  selector: 'abp-email-setting-group',\r\n  templateUrl: 'email-setting-group.component.html',\r\n  animations: [collapse],\r\n})\r\nexport class EmailSettingGroupComponent implements OnInit {\r\n  form!: FormGroup;\r\n\r\n  saving = false;\r\n\r\n  constructor(\r\n    private emailSettingsService: EmailSettingsService,\r\n    private fb: FormBuilder,\r\n    private toasterService: ToasterService,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.getData();\r\n  }\r\n\r\n  private getData() {\r\n    this.emailSettingsService.get().subscribe(res => {\r\n      this.buildForm(res);\r\n    });\r\n  }\r\n\r\n  private buildForm(emailSettings: EmailSettingsDto) {\r\n    this.form = this.fb.group({\r\n      defaultFromDisplayName: [emailSettings.defaultFromDisplayName, [Validators.required]],\r\n      defaultFromAddress: [emailSettings.defaultFromAddress, [Validators.required]],\r\n      smtpHost: [emailSettings.smtpHost],\r\n      smtpPort: [emailSettings.smtpPort, [Validators.required]],\r\n      smtpEnableSsl: [emailSettings.smtpEnableSsl],\r\n      smtpUseDefaultCredentials: [emailSettings.smtpUseDefaultCredentials],\r\n      smtpDomain: [emailSettings.smtpDomain],\r\n      smtpUserName: [emailSettings.smtpUserName],\r\n      smtpPassword: [emailSettings.smtpPassword],\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    if (this.saving || this.form.invalid) return;\r\n\r\n    this.saving = true;\r\n    this.emailSettingsService\r\n      .update(this.form.value)\r\n      .pipe(finalize(() => (this.saving = false)))\r\n      .subscribe(() => {\r\n        this.toasterService.success('AbpSettingManagement::SuccessfullySaved');\r\n        this.getData();\r\n      });\r\n  }\r\n}\r\n","<h2>{{ 'AbpSettingManagement::Menu:Emailing' | abpLocalization }}</h2>\r\n\r\n<hr class=\"my-3\" />\r\n\r\n<form *ngIf=\"form\" [formGroup]=\"form\" (ngSubmit)=\"submit()\" [validateOnSubmit]=\"true\">\r\n  <div class=\"mb-3 form-group\">\r\n    <label class=\"form-label\">{{\r\n      'AbpSettingManagement::DefaultFromDisplayName' | abpLocalization\r\n    }}</label>\r\n    <input type=\"text\" class=\"form-control\" formControlName=\"defaultFromDisplayName\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label class=\"form-label\">{{\r\n      'AbpSettingManagement::DefaultFromAddress' | abpLocalization\r\n    }}</label>\r\n    <input type=\"text\" class=\"form-control\" formControlName=\"defaultFromAddress\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpHost' | abpLocalization }}</label>\r\n    <input type=\"text\" class=\"form-control\" formControlName=\"smtpHost\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpPort' | abpLocalization }}</label>\r\n    <input type=\"number\" class=\"form-control\" formControlName=\"smtpPort\" />\r\n  </div>\r\n\r\n  <div class=\"form-check mb-2\">\r\n    <input\r\n      type=\"checkbox\"\r\n      id=\"smtp-enable-ssl\"\r\n      class=\"form-check-input\"\r\n      formControlName=\"smtpEnableSsl\"\r\n    />\r\n    <label class=\"form-check-label\" for=\"smtp-enable-ssl\">{{\r\n      'AbpSettingManagement::SmtpEnableSsl' | abpLocalization\r\n    }}</label>\r\n  </div>\r\n  <div class=\"form-check mb-2\">\r\n    <input\r\n      type=\"checkbox\"\r\n      id=\"smtp-use-default-credentials\"\r\n      class=\"form-check-input\"\r\n      formControlName=\"smtpUseDefaultCredentials\"\r\n    />\r\n    <label class=\"form-check-label\" for=\"smtp-use-default-credentials\">{{\r\n      'AbpSettingManagement::SmtpUseDefaultCredentials' | abpLocalization\r\n    }}</label>\r\n  </div>\r\n\r\n  <div\r\n    [@collapse]=\"{\r\n      value: form.get('smtpUseDefaultCredentials')?.value ? 'collapsed' : 'expanded',\r\n      params: { time: '200ms', easing: 'linear' }\r\n    }\"\r\n  >\r\n    <div class=\"mb-3 form-group\">\r\n      <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpDomain' | abpLocalization }}</label>\r\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpDomain\" />\r\n    </div>\r\n\r\n    <div class=\"mb-3 form-group\">\r\n      <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpUserName' | abpLocalization }}</label>\r\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpUserName\" />\r\n    </div>\r\n\r\n    <div class=\"mb-3 form-group\">\r\n      <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpPassword' | abpLocalization }}</label>\r\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpPassword\" />\r\n    </div>\r\n  </div>\r\n\r\n  <hr />\r\n\r\n  <button type=\"submit\" class=\"btn btn-primary\">\r\n    {{ 'AbpSettingManagement::Save' | abpLocalization }}\r\n  </button>\r\n</form>\r\n","import { Injectable } from '@angular/core';\r\nimport { ABP, AbstractNavTreeService } from '@abp/ng.core';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SettingTabsService extends AbstractNavTreeService<ABP.Tab> {}\r\n","import { eLayoutType, noop, RoutesService } from '@abp/ng.core';\r\nimport { eThemeSharedRouteNames } from '@abp/ng.theme.shared';\r\nimport { APP_INITIALIZER, inject, InjectionToken } from '@angular/core';\r\nimport { debounceTime, map } from 'rxjs/operators';\r\nimport { eSettingManagementRouteNames } from '../enums/route-names';\r\nimport { SettingTabsService } from '../services/settings-tabs.service';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport function configureRoutes(routesService: RoutesService) {\r\n  return () => {\r\n    routesService.add([\r\n      {\r\n        name: eSettingManagementRouteNames.Settings,\r\n        path: '/setting-management',\r\n        parentName: eThemeSharedRouteNames.Administration,\r\n        layout: eLayoutType.application,\r\n        order: 100,\r\n        iconClass: 'fa fa-cog',\r\n      },\r\n    ]);\r\n  };\r\n}\r\n\r\nexport const SETTING_MANAGEMENT_HAS_SETTING = new InjectionToken<Observable<boolean>>(\r\n  'SETTING_MANAGEMENT_HAS_SETTING',\r\n  {\r\n    factory: () => {\r\n      const settingTabsService = inject(SettingTabsService);\r\n      return settingTabsService.visible$.pipe(\r\n        debounceTime(0),\r\n        map(nodes => !!nodes.length),\r\n      );\r\n    },\r\n  },\r\n);\r\n\r\nexport const SETTING_MANAGEMENT_ROUTE_PROVIDERS = [\r\n  { provide: APP_INITIALIZER, useFactory: configureRoutes, deps: [RoutesService], multi: true },\r\n  {\r\n    provide: APP_INITIALIZER,\r\n    useFactory: noop,\r\n    deps: [SETTING_MANAGEMENT_HAS_SETTING],\r\n    multi: true,\r\n  },\r\n];\r\n","import { APP_INITIALIZER } from '@angular/core';\r\nimport { EmailSettingGroupComponent } from '../components/email-setting-group/email-setting-group.component';\r\nimport { eSettingManamagementSettingTabNames } from '../enums/setting-tab-names';\r\nimport { SettingTabsService } from '../services/settings-tabs.service';\r\n\r\nexport const SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS = [\r\n  {\r\n    provide: APP_INITIALIZER,\r\n    useFactory: configureSettingTabs,\r\n    deps: [SettingTabsService],\r\n    multi: true,\r\n  },\r\n];\r\n\r\nexport function configureSettingTabs(settingTabs: SettingTabsService) {\r\n  return () => {\r\n    settingTabs.add([\r\n      {\r\n        name: eSettingManamagementSettingTabNames.EmailSettingGroup,\r\n        order: 100,\r\n        requiredPolicy: 'SettingManagement.Emailing',\r\n        component: EmailSettingGroupComponent,\r\n      },\r\n    ]);\r\n  };\r\n}\r\n","import { ConfigStateService, featuresFactory, noop } from '@abp/ng.core';\r\nimport { APP_INITIALIZER, inject, InjectionToken } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nexport const SETTING_MANAGEMENT_FEATURES = new InjectionToken<Observable<{ enable: boolean }>>(\r\n  'SETTING_MANAGEMENT_FEATURES',\r\n  {\r\n    providedIn: 'root',\r\n    factory: () => {\r\n      const configState = inject(ConfigStateService);\r\n      const featureKey = 'SettingManagement.Enable';\r\n      const mapFn = (features: Record<string, string>) => ({\r\n        enable: features[featureKey].toLowerCase() !== 'false',\r\n      });\r\n      return featuresFactory(configState, [featureKey], mapFn);\r\n    },\r\n  },\r\n);\r\n\r\nexport const SETTING_MANAGEMENT_ROUTE_VISIBILITY = new InjectionToken<Observable<boolean>>(\r\n  'SETTING_MANAGEMENT_ROUTE_VISIBILITY',\r\n  {\r\n    providedIn: 'root',\r\n    factory: () => {\r\n      const stream = inject(SETTING_MANAGEMENT_FEATURES);\r\n      return stream.pipe(map(features => features.enable));\r\n    },\r\n  },\r\n);\r\n\r\nexport const SETTING_MANAGEMENT_FEATURES_PROVIDERS = [\r\n  {\r\n    provide: APP_INITIALIZER,\r\n    useFactory: noop,\r\n    deps: [SETTING_MANAGEMENT_ROUTE_VISIBILITY],\r\n    multi: true,\r\n  },\r\n];\r\n","import { APP_INITIALIZER, Injector } from '@angular/core';\r\nimport { combineLatest } from 'rxjs';\r\nimport { RoutesService } from '@abp/ng.core';\r\nimport { SETTING_MANAGEMENT_HAS_SETTING } from './route.provider';\r\nimport { SETTING_MANAGEMENT_ROUTE_VISIBILITY } from './features.token';\r\nimport { eSettingManagementRouteNames } from '../enums';\r\n\r\nexport const SETTING_MANAGEMENT_VISIBLE_PROVIDERS = [\r\n  {\r\n    provide: APP_INITIALIZER,\r\n    useFactory: setSettingManagementVisibility,\r\n    deps: [Injector],\r\n    multi: true,\r\n  },\r\n];\r\n\r\nexport function setSettingManagementVisibility(injector: Injector) {\r\n  return () => {\r\n    const settingManagementHasSetting$ = injector.get(SETTING_MANAGEMENT_HAS_SETTING);\r\n    const isSettingManagementFeatureEnable$ = injector.get(SETTING_MANAGEMENT_ROUTE_VISIBILITY);\r\n    const routes = injector.get(RoutesService);\r\n    combineLatest([settingManagementHasSetting$, isSettingManagementFeatureEnable$]).subscribe(\r\n      ([settingManagementHasSetting, isSettingManagementFeatureEnable]) => {\r\n        routes.patch(eSettingManagementRouteNames.Settings, {\r\n          invisible: !(settingManagementHasSetting && isSettingManagementFeatureEnable),\r\n        });\r\n      },\r\n    );\r\n  };\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CoreModule } from '@abp/ng.core';\r\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\r\nimport { SETTING_MANAGEMENT_FEATURES_PROVIDERS } from './providers/features.token';\r\nimport { SETTING_MANAGEMENT_VISIBLE_PROVIDERS } from './providers/visible.provider';\r\nimport { SETTING_MANAGEMENT_ROUTE_PROVIDERS } from './providers/route.provider';\r\nimport { SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS } from './providers/setting-tab.provider';\r\nimport { EmailSettingGroupComponent } from './components/email-setting-group/email-setting-group.component';\r\n\r\n@NgModule({\r\n  imports: [CoreModule, NgxValidateCoreModule],\r\n  declarations: [EmailSettingGroupComponent],\r\n  exports: [EmailSettingGroupComponent],\r\n})\r\nexport class SettingManagementConfigModule {\r\n  static forRoot(): ModuleWithProviders<SettingManagementConfigModule> {\r\n    return {\r\n      ngModule: SettingManagementConfigModule,\r\n      providers: [\r\n        SETTING_MANAGEMENT_ROUTE_PROVIDERS,\r\n        SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS,\r\n        SETTING_MANAGEMENT_FEATURES_PROVIDERS,\r\n        SETTING_MANAGEMENT_VISIBLE_PROVIDERS,\r\n      ],\r\n    };\r\n  }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.EmailSettingsService","i5"],"mappings":"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"}
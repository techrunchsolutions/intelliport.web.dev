import { collapse, ToasterService } from '@abp/ng.theme.shared';
import { Component } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { finalize } from 'rxjs/operators';
import { EmailSettingsService } from '../../proxy/email-settings.service';
import * as i0 from "@angular/core";
import * as i1 from "../../proxy/email-settings.service";
import * as i2 from "@angular/forms";
import * as i3 from "@abp/ng.theme.shared";
import * as i4 from "@angular/common";
import * as i5 from "@abp/ng.core";
import * as i6 from "@ngx-validate/core";
export class EmailSettingGroupComponent {
    constructor(emailSettingsService, fb, toasterService) {
        this.emailSettingsService = emailSettingsService;
        this.fb = fb;
        this.toasterService = toasterService;
        this.saving = false;
    }
    ngOnInit() {
        this.getData();
    }
    getData() {
        this.emailSettingsService.get().subscribe(res => {
            this.buildForm(res);
        });
    }
    buildForm(emailSettings) {
        this.form = this.fb.group({
            defaultFromDisplayName: [emailSettings.defaultFromDisplayName, [Validators.required]],
            defaultFromAddress: [emailSettings.defaultFromAddress, [Validators.required]],
            smtpHost: [emailSettings.smtpHost],
            smtpPort: [emailSettings.smtpPort, [Validators.required]],
            smtpEnableSsl: [emailSettings.smtpEnableSsl],
            smtpUseDefaultCredentials: [emailSettings.smtpUseDefaultCredentials],
            smtpDomain: [emailSettings.smtpDomain],
            smtpUserName: [emailSettings.smtpUserName],
            smtpPassword: [emailSettings.smtpPassword],
        });
    }
    submit() {
        if (this.saving || this.form.invalid)
            return;
        this.saving = true;
        this.emailSettingsService
            .update(this.form.value)
            .pipe(finalize(() => (this.saving = false)))
            .subscribe(() => {
            this.toasterService.success('AbpSettingManagement::SuccessfullySaved');
            this.getData();
        });
    }
}
EmailSettingGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: EmailSettingGroupComponent, deps: [{ token: i1.EmailSettingsService }, { token: i2.FormBuilder }, { token: i3.ToasterService }], target: i0.ɵɵFactoryTarget.Component });
EmailSettingGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: EmailSettingGroupComponent, selector: "abp-email-setting-group", ngImport: i0, template: "<h2>{{ 'AbpSettingManagement::Menu:Emailing' | abpLocalization }}</h2>\r\n\r\n<hr class=\"my-3\" />\r\n\r\n<form *ngIf=\"form\" [formGroup]=\"form\" (ngSubmit)=\"submit()\" [validateOnSubmit]=\"true\">\r\n  <div class=\"mb-3 form-group\">\r\n    <label class=\"form-label\">{{\r\n      'AbpSettingManagement::DefaultFromDisplayName' | abpLocalization\r\n    }}</label>\r\n    <input type=\"text\" class=\"form-control\" formControlName=\"defaultFromDisplayName\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label class=\"form-label\">{{\r\n      'AbpSettingManagement::DefaultFromAddress' | abpLocalization\r\n    }}</label>\r\n    <input type=\"text\" class=\"form-control\" formControlName=\"defaultFromAddress\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpHost' | abpLocalization }}</label>\r\n    <input type=\"text\" class=\"form-control\" formControlName=\"smtpHost\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpPort' | abpLocalization }}</label>\r\n    <input type=\"number\" class=\"form-control\" formControlName=\"smtpPort\" />\r\n  </div>\r\n\r\n  <div class=\"form-check mb-2\">\r\n    <input\r\n      type=\"checkbox\"\r\n      id=\"smtp-enable-ssl\"\r\n      class=\"form-check-input\"\r\n      formControlName=\"smtpEnableSsl\"\r\n    />\r\n    <label class=\"form-check-label\" for=\"smtp-enable-ssl\">{{\r\n      'AbpSettingManagement::SmtpEnableSsl' | abpLocalization\r\n    }}</label>\r\n  </div>\r\n  <div class=\"form-check mb-2\">\r\n    <input\r\n      type=\"checkbox\"\r\n      id=\"smtp-use-default-credentials\"\r\n      class=\"form-check-input\"\r\n      formControlName=\"smtpUseDefaultCredentials\"\r\n    />\r\n    <label class=\"form-check-label\" for=\"smtp-use-default-credentials\">{{\r\n      'AbpSettingManagement::SmtpUseDefaultCredentials' | abpLocalization\r\n    }}</label>\r\n  </div>\r\n\r\n  <div\r\n    [@collapse]=\"{\r\n      value: form.get('smtpUseDefaultCredentials')?.value ? 'collapsed' : 'expanded',\r\n      params: { time: '200ms', easing: 'linear' }\r\n    }\"\r\n  >\r\n    <div class=\"mb-3 form-group\">\r\n      <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpDomain' | abpLocalization }}</label>\r\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpDomain\" />\r\n    </div>\r\n\r\n    <div class=\"mb-3 form-group\">\r\n      <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpUserName' | abpLocalization }}</label>\r\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpUserName\" />\r\n    </div>\r\n\r\n    <div class=\"mb-3 form-group\">\r\n      <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpPassword' | abpLocalization }}</label>\r\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpPassword\" />\r\n    </div>\r\n  </div>\r\n\r\n  <hr />\r\n\r\n  <button type=\"submit\" class=\"btn btn-primary\">\r\n    {{ 'AbpSettingManagement::Save' | abpLocalization }}\r\n  </button>\r\n</form>\r\n", directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormSubmitDirective, selector: "form[ngSubmit][formGroup]", inputs: ["debounce", "notValidateOnSubmit", "markAsDirtyWhenSubmit"], outputs: ["ngSubmit"] }, { type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i6.ValidationGroupDirective, selector: "[formGroup],[formGroupName]", exportAs: ["validationGroup"] }, { type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: i6.ValidationDirective, selector: "[formControl],[formControlName]", exportAs: ["validationDirective"] }, { type: i2.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }], pipes: { "abpLocalization": i5.LocalizationPipe }, animations: [collapse] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: EmailSettingGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-email-setting-group', animations: [collapse], template: "<h2>{{ 'AbpSettingManagement::Menu:Emailing' | abpLocalization }}</h2>\r\n\r\n<hr class=\"my-3\" />\r\n\r\n<form *ngIf=\"form\" [formGroup]=\"form\" (ngSubmit)=\"submit()\" [validateOnSubmit]=\"true\">\r\n  <div class=\"mb-3 form-group\">\r\n    <label class=\"form-label\">{{\r\n      'AbpSettingManagement::DefaultFromDisplayName' | abpLocalization\r\n    }}</label>\r\n    <input type=\"text\" class=\"form-control\" formControlName=\"defaultFromDisplayName\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label class=\"form-label\">{{\r\n      'AbpSettingManagement::DefaultFromAddress' | abpLocalization\r\n    }}</label>\r\n    <input type=\"text\" class=\"form-control\" formControlName=\"defaultFromAddress\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpHost' | abpLocalization }}</label>\r\n    <input type=\"text\" class=\"form-control\" formControlName=\"smtpHost\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpPort' | abpLocalization }}</label>\r\n    <input type=\"number\" class=\"form-control\" formControlName=\"smtpPort\" />\r\n  </div>\r\n\r\n  <div class=\"form-check mb-2\">\r\n    <input\r\n      type=\"checkbox\"\r\n      id=\"smtp-enable-ssl\"\r\n      class=\"form-check-input\"\r\n      formControlName=\"smtpEnableSsl\"\r\n    />\r\n    <label class=\"form-check-label\" for=\"smtp-enable-ssl\">{{\r\n      'AbpSettingManagement::SmtpEnableSsl' | abpLocalization\r\n    }}</label>\r\n  </div>\r\n  <div class=\"form-check mb-2\">\r\n    <input\r\n      type=\"checkbox\"\r\n      id=\"smtp-use-default-credentials\"\r\n      class=\"form-check-input\"\r\n      formControlName=\"smtpUseDefaultCredentials\"\r\n    />\r\n    <label class=\"form-check-label\" for=\"smtp-use-default-credentials\">{{\r\n      'AbpSettingManagement::SmtpUseDefaultCredentials' | abpLocalization\r\n    }}</label>\r\n  </div>\r\n\r\n  <div\r\n    [@collapse]=\"{\r\n      value: form.get('smtpUseDefaultCredentials')?.value ? 'collapsed' : 'expanded',\r\n      params: { time: '200ms', easing: 'linear' }\r\n    }\"\r\n  >\r\n    <div class=\"mb-3 form-group\">\r\n      <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpDomain' | abpLocalization }}</label>\r\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpDomain\" />\r\n    </div>\r\n\r\n    <div class=\"mb-3 form-group\">\r\n      <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpUserName' | abpLocalization }}</label>\r\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpUserName\" />\r\n    </div>\r\n\r\n    <div class=\"mb-3 form-group\">\r\n      <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpPassword' | abpLocalization }}</label>\r\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpPassword\" />\r\n    </div>\r\n  </div>\r\n\r\n  <hr />\r\n\r\n  <button type=\"submit\" class=\"btn btn-primary\">\r\n    {{ 'AbpSettingManagement::Save' | abpLocalization }}\r\n  </button>\r\n</form>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.EmailSettingsService }, { type: i2.FormBuilder }, { type: i3.ToasterService }]; } });
//# sourceMappingURL=data:application/json;base64,
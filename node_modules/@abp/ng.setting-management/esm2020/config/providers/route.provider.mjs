import { noop, RoutesService } from '@abp/ng.core';
import { APP_INITIALIZER, inject, InjectionToken } from '@angular/core';
import { debounceTime, map } from 'rxjs/operators';
import { SettingTabsService } from '../services/settings-tabs.service';
export function configureRoutes(routesService) {
    return () => {
        routesService.add([
            {
                name: "AbpSettingManagement::Settings" /* Settings */,
                path: '/setting-management',
                parentName: "AbpUiNavigation::Menu:Administration" /* Administration */,
                layout: "application" /* application */,
                order: 100,
                iconClass: 'fa fa-cog',
            },
        ]);
    };
}
export const SETTING_MANAGEMENT_HAS_SETTING = new InjectionToken('SETTING_MANAGEMENT_HAS_SETTING', {
    factory: () => {
        const settingTabsService = inject(SettingTabsService);
        return settingTabsService.visible$.pipe(debounceTime(0), map(nodes => !!nodes.length));
    },
});
export const SETTING_MANAGEMENT_ROUTE_PROVIDERS = [
    { provide: APP_INITIALIZER, useFactory: configureRoutes, deps: [RoutesService], multi: true },
    {
        provide: APP_INITIALIZER,
        useFactory: noop,
        deps: [SETTING_MANAGEMENT_HAS_SETTING],
        multi: true,
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGUucHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9zZXR0aW5nLW1hbmFnZW1lbnQvY29uZmlnL3NyYy9wcm92aWRlcnMvcm91dGUucHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFlLElBQUksRUFBRSxhQUFhLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFaEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbkQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFHdkUsTUFBTSxVQUFVLGVBQWUsQ0FBQyxhQUE0QjtJQUMxRCxPQUFPLEdBQUcsRUFBRTtRQUNWLGFBQWEsQ0FBQyxHQUFHLENBQUM7WUFDaEI7Z0JBQ0UsSUFBSSxpREFBdUM7Z0JBQzNDLElBQUksRUFBRSxxQkFBcUI7Z0JBQzNCLFVBQVUsNkRBQXVDO2dCQUNqRCxNQUFNLGlDQUF5QjtnQkFDL0IsS0FBSyxFQUFFLEdBQUc7Z0JBQ1YsU0FBUyxFQUFFLFdBQVc7YUFDdkI7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQUcsSUFBSSxjQUFjLENBQzlELGdDQUFnQyxFQUNoQztJQUNFLE9BQU8sRUFBRSxHQUFHLEVBQUU7UUFDWixNQUFNLGtCQUFrQixHQUFHLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3RELE9BQU8sa0JBQWtCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDckMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUNmLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQzdCLENBQUM7SUFDSixDQUFDO0NBQ0YsQ0FDRixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sa0NBQWtDLEdBQUc7SUFDaEQsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtJQUM3RjtRQUNFLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLFVBQVUsRUFBRSxJQUFJO1FBQ2hCLElBQUksRUFBRSxDQUFDLDhCQUE4QixDQUFDO1FBQ3RDLEtBQUssRUFBRSxJQUFJO0tBQ1o7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZUxheW91dFR5cGUsIG5vb3AsIFJvdXRlc1NlcnZpY2UgfSBmcm9tICdAYWJwL25nLmNvcmUnO1xyXG5pbXBvcnQgeyBlVGhlbWVTaGFyZWRSb3V0ZU5hbWVzIH0gZnJvbSAnQGFicC9uZy50aGVtZS5zaGFyZWQnO1xyXG5pbXBvcnQgeyBBUFBfSU5JVElBTElaRVIsIGluamVjdCwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgZGVib3VuY2VUaW1lLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IGVTZXR0aW5nTWFuYWdlbWVudFJvdXRlTmFtZXMgfSBmcm9tICcuLi9lbnVtcy9yb3V0ZS1uYW1lcyc7XHJcbmltcG9ydCB7IFNldHRpbmdUYWJzU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3NldHRpbmdzLXRhYnMuc2VydmljZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmVSb3V0ZXMocm91dGVzU2VydmljZTogUm91dGVzU2VydmljZSkge1xyXG4gIHJldHVybiAoKSA9PiB7XHJcbiAgICByb3V0ZXNTZXJ2aWNlLmFkZChbXHJcbiAgICAgIHtcclxuICAgICAgICBuYW1lOiBlU2V0dGluZ01hbmFnZW1lbnRSb3V0ZU5hbWVzLlNldHRpbmdzLFxyXG4gICAgICAgIHBhdGg6ICcvc2V0dGluZy1tYW5hZ2VtZW50JyxcclxuICAgICAgICBwYXJlbnROYW1lOiBlVGhlbWVTaGFyZWRSb3V0ZU5hbWVzLkFkbWluaXN0cmF0aW9uLFxyXG4gICAgICAgIGxheW91dDogZUxheW91dFR5cGUuYXBwbGljYXRpb24sXHJcbiAgICAgICAgb3JkZXI6IDEwMCxcclxuICAgICAgICBpY29uQ2xhc3M6ICdmYSBmYS1jb2cnLFxyXG4gICAgICB9LFxyXG4gICAgXSk7XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNFVFRJTkdfTUFOQUdFTUVOVF9IQVNfU0VUVElORyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxPYnNlcnZhYmxlPGJvb2xlYW4+PihcclxuICAnU0VUVElOR19NQU5BR0VNRU5UX0hBU19TRVRUSU5HJyxcclxuICB7XHJcbiAgICBmYWN0b3J5OiAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHNldHRpbmdUYWJzU2VydmljZSA9IGluamVjdChTZXR0aW5nVGFic1NlcnZpY2UpO1xyXG4gICAgICByZXR1cm4gc2V0dGluZ1RhYnNTZXJ2aWNlLnZpc2libGUkLnBpcGUoXHJcbiAgICAgICAgZGVib3VuY2VUaW1lKDApLFxyXG4gICAgICAgIG1hcChub2RlcyA9PiAhIW5vZGVzLmxlbmd0aCksXHJcbiAgICAgICk7XHJcbiAgICB9LFxyXG4gIH0sXHJcbik7XHJcblxyXG5leHBvcnQgY29uc3QgU0VUVElOR19NQU5BR0VNRU5UX1JPVVRFX1BST1ZJREVSUyA9IFtcclxuICB7IHByb3ZpZGU6IEFQUF9JTklUSUFMSVpFUiwgdXNlRmFjdG9yeTogY29uZmlndXJlUm91dGVzLCBkZXBzOiBbUm91dGVzU2VydmljZV0sIG11bHRpOiB0cnVlIH0sXHJcbiAge1xyXG4gICAgcHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLFxyXG4gICAgdXNlRmFjdG9yeTogbm9vcCxcclxuICAgIGRlcHM6IFtTRVRUSU5HX01BTkFHRU1FTlRfSEFTX1NFVFRJTkddLFxyXG4gICAgbXVsdGk6IHRydWUsXHJcbiAgfSxcclxuXTtcclxuIl19
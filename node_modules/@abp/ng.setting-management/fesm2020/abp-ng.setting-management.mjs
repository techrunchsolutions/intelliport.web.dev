import * as i2 from '@abp/ng.components/page';
import { PageModule } from '@abp/ng.components/page';
import * as i3 from '@abp/ng.core';
import { RouterOutletComponent, AuthGuard, ReplaceableRouteContainerComponent, LazyModuleFactory, CoreModule } from '@abp/ng.core';
import { ThemeSharedModule } from '@abp/ng.theme.shared';
import * as i0 from '@angular/core';
import { Component, NgModule } from '@angular/core';
import * as i1 from '@abp/ng.setting-management/config';
import { Subscription } from 'rxjs';
import * as i4 from '@angular/common';
import * as i1$1 from '@angular/router';
import { RouterModule } from '@angular/router';

class SettingManagementComponent {
    constructor(settingTabsService) {
        this.settingTabsService = settingTabsService;
        this.subscription = new Subscription();
        this.settings = [];
        this.trackByFn = (_, item) => item.name;
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    ngOnInit() {
        this.subscription.add(this.settingTabsService.visible$.subscribe(settings => {
            this.settings = settings;
            if (!this.selected)
                this.selected = this.settings[0];
        }));
    }
}
SettingManagementComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: SettingManagementComponent, deps: [{ token: i1.SettingTabsService }], target: i0.ɵɵFactoryTarget.Component });
SettingManagementComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: SettingManagementComponent, selector: "abp-setting-management", ngImport: i0, template: "<abp-page [title]=\"'AbpSettingManagement::Settings' | abpLocalization\">\r\n  <div id=\"SettingManagementWrapper\">\r\n    <div class=\"card\">\r\n      <div class=\"card-body\">\r\n        <div class=\"row\">\r\n          <div class=\"col-12 col-md-3 mb-2 mb-md-0\">\r\n            <ul class=\"nav flex-column nav-pills\" id=\"nav-tab\" role=\"tablist\">\r\n              <ng-container *abpFor=\"let setting of settings; trackBy: trackByFn\">\r\n                <li\r\n                  (click)=\"selected = setting\"\r\n                  class=\"nav-item pointer\"\r\n                  *abpPermission=\"setting.requiredPolicy\"\r\n                >\r\n                  <a\r\n                    class=\"nav-link\"\r\n                    [id]=\"setting.name + '-tab'\"\r\n                    role=\"tab\"\r\n                    [class.active]=\"setting.name === selected.name\"\r\n                    >{{ setting.name | abpLocalization }}</a\r\n                  >\r\n                </li>\r\n              </ng-container>\r\n            </ul>\r\n          </div>\r\n          <div class=\"col-12 col-md-9\">\r\n            <div *ngIf=\"settings.length\" class=\"tab-content\">\r\n              <div class=\"tab-pane fade show active\" [id]=\"selected.name + '-tab'\" role=\"tabpanel\">\r\n                <ng-container *ngComponentOutlet=\"selected.component\"></ng-container>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</abp-page>\r\n", components: [{ type: i2.PageComponent, selector: "abp-page", inputs: ["title", "toolbar", "breadcrumb"] }], directives: [{ type: i3.ForDirective, selector: "[abpFor]", inputs: ["abpForOf", "abpForOrderBy", "abpForOrderDir", "abpForFilterBy", "abpForFilterVal", "abpForTrackBy", "abpForCompareBy", "abpForEmptyRef"] }, { type: i3.PermissionDirective, selector: "[abpPermission]", inputs: ["abpPermission", "abpPermissionRunChangeDetection"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModuleFactory"] }], pipes: { "abpLocalization": i3.LocalizationPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: SettingManagementComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-setting-management', template: "<abp-page [title]=\"'AbpSettingManagement::Settings' | abpLocalization\">\r\n  <div id=\"SettingManagementWrapper\">\r\n    <div class=\"card\">\r\n      <div class=\"card-body\">\r\n        <div class=\"row\">\r\n          <div class=\"col-12 col-md-3 mb-2 mb-md-0\">\r\n            <ul class=\"nav flex-column nav-pills\" id=\"nav-tab\" role=\"tablist\">\r\n              <ng-container *abpFor=\"let setting of settings; trackBy: trackByFn\">\r\n                <li\r\n                  (click)=\"selected = setting\"\r\n                  class=\"nav-item pointer\"\r\n                  *abpPermission=\"setting.requiredPolicy\"\r\n                >\r\n                  <a\r\n                    class=\"nav-link\"\r\n                    [id]=\"setting.name + '-tab'\"\r\n                    role=\"tab\"\r\n                    [class.active]=\"setting.name === selected.name\"\r\n                    >{{ setting.name | abpLocalization }}</a\r\n                  >\r\n                </li>\r\n              </ng-container>\r\n            </ul>\r\n          </div>\r\n          <div class=\"col-12 col-md-9\">\r\n            <div *ngIf=\"settings.length\" class=\"tab-content\">\r\n              <div class=\"tab-pane fade show active\" [id]=\"selected.name + '-tab'\" role=\"tabpanel\">\r\n                <ng-container *ngComponentOutlet=\"selected.component\"></ng-container>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</abp-page>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.SettingTabsService }]; } });

const routes = [
    {
        path: '',
        component: RouterOutletComponent,
        canActivate: [AuthGuard],
        children: [
            {
                path: '',
                component: ReplaceableRouteContainerComponent,
                data: {
                    requiredPolicy: 'AbpAccount.SettingManagement',
                    replaceableComponent: {
                        key: "SettingManagement.SettingManagementComponent" /* SettingManagement */,
                        defaultComponent: SettingManagementComponent,
                    },
                },
            },
        ],
    },
];
class SettingManagementRoutingModule {
}
SettingManagementRoutingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: SettingManagementRoutingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
SettingManagementRoutingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: SettingManagementRoutingModule, imports: [i1$1.RouterModule], exports: [RouterModule] });
SettingManagementRoutingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: SettingManagementRoutingModule, imports: [[RouterModule.forChild(routes)], RouterModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: SettingManagementRoutingModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [RouterModule.forChild(routes)],
                    exports: [RouterModule],
                }]
        }] });

class SettingManagementModule {
    static forChild() {
        return {
            ngModule: SettingManagementModule,
            providers: [],
        };
    }
    static forLazy() {
        return new LazyModuleFactory(SettingManagementModule.forChild());
    }
}
SettingManagementModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: SettingManagementModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
SettingManagementModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: SettingManagementModule, declarations: [SettingManagementComponent], imports: [SettingManagementRoutingModule, CoreModule, ThemeSharedModule, PageModule], exports: [SettingManagementComponent] });
SettingManagementModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: SettingManagementModule, imports: [[SettingManagementRoutingModule, CoreModule, ThemeSharedModule, PageModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: SettingManagementModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [SettingManagementComponent],
                    exports: [SettingManagementComponent],
                    imports: [SettingManagementRoutingModule, CoreModule, ThemeSharedModule, PageModule],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { SettingManagementComponent, SettingManagementModule };
//# sourceMappingURL=abp-ng.setting-management.mjs.map

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveProject = exports.readWorkspaceSchema = exports.readEnvironment = exports.isLibrary = void 0;
/* eslint-disable no-empty */
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const angular_1 = require("./angular");
const ast_1 = require("./ast");
const common_1 = require("./common");
function isLibrary(project) {
    return project.extensions['projectType'] === angular_1.ProjectType.Library;
}
exports.isLibrary = isLibrary;
function readEnvironment(tree, project) {
    if (isLibrary(project))
        return undefined;
    const srcPath = project.sourceRoot || `${project.root}/src`;
    const envPath = srcPath + '/environments/environment.ts';
    const source = common_1.readFileInTree(tree, envPath);
    return ast_1.findEnvironmentExpression(source);
}
exports.readEnvironment = readEnvironment;
function readWorkspaceSchema(tree) {
    if (!tree.exists('/angular.json'))
        throw new schematics_1.SchematicsException("[Workspace Not Found] Make sure you are running schematics at the root directory of your workspace and it has an angular.json file." /* NoWorkspace */);
    let workspaceSchema;
    try {
        workspaceSchema = angular_1.getWorkspaceSchema(tree);
    }
    catch (_) {
        throw new schematics_1.SchematicsException("[Invalid Workspace] The angular.json should be a valid JSON file." /* InvalidWorkspace */);
    }
    return workspaceSchema;
}
exports.readWorkspaceSchema = readWorkspaceSchema;
async function resolveProject(tree, name) {
    name = name || readWorkspaceSchema(tree).defaultProject;
    const workspace = await angular_1.getWorkspace(tree);
    let definition;
    try {
        definition = workspace.projects.get(name);
    }
    catch (_) { }
    if (!definition)
        try {
            name = core_1.strings.dasherize(name);
            definition = workspace.projects.get(name);
        }
        catch (_) { }
    if (!definition)
        try {
            name = core_1.strings.camelize(name);
            definition = workspace.projects.get(name);
        }
        catch (_) { }
    if (!definition)
        try {
            name = core_1.strings.classify(name);
            definition = workspace.projects.get(name);
        }
        catch (_) { }
    if (!definition)
        throw new schematics_1.SchematicsException("[Project Not Found] Either define a default project in your workspace or specify the project name in schematics options." /* NoProject */);
    return { name, definition };
}
exports.resolveProject = resolveProject;
//# sourceMappingURL=workspace.js.map
import { eMethodModifier } from '../enums';
import { ParameterInBody } from './api-definition';
import { Property } from './model';
import { Omissible } from './util';
export declare class Method {
    body: Body;
    signature: Signature;
    constructor(options: MethodOptions);
}
export declare type MethodOptions = Method;
export declare class Signature {
    generics: string;
    modifier: eMethodModifier;
    name: string;
    parameters: Property[];
    returnType: string;
    constructor(options: SignatureOptions);
}
export declare type SignatureOptions = Omissible<Signature, 'generics' | 'modifier' | 'parameters' | 'returnType'>;
export declare class Body {
    body?: string;
    method: string;
    params: string[];
    requestType: string;
    responseType: string;
    url: string;
    registerActionParameter: (param: ParameterInBody) => void;
    constructor(options: BodyOptions);
    private setUrlQuotes;
}
export declare type BodyOptions = Omissible<Omit<Body, 'registerActionParameter'>, 'params' | 'requestType'>;

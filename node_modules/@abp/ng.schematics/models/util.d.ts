export declare type Omissible<T, K extends keyof T> = Partial<Pick<T, K>> & Omit<T, K>;
declare type ExcludeKeys<Type, Excluded> = Exclude<{
    [Key in keyof Type]: Type[Key] extends Excluded ? never : Key;
}[keyof Type], never>;
declare type ExcludeMethods<Type> = Pick<Type, ExcludeKeys<Type, Function>>;
export declare type Options<T, K extends keyof ExcludeMethods<T>> = Omissible<ExcludeMethods<T>, K>;
export {};

import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import * as i0 from "@angular/core";
let Chart;
export class ChartComponent {
    constructor(el, cdr) {
        this.el = el;
        this.cdr = cdr;
        this.data = {};
        this.options = {};
        this.plugins = [];
        this.responsive = true;
        this.dataSelect = new EventEmitter();
        this.initialized = new EventEmitter();
        this.initChart = () => {
            const opts = this.options || {};
            opts.responsive = this.responsive;
            // allows chart to resize in responsive mode
            if (opts.responsive && (this.height || this.width)) {
                opts.maintainAspectRatio = false;
            }
            this.chart = new Chart(this.canvas.nativeElement, {
                type: this.type,
                data: this.data,
                options: this.options,
            });
        };
        this.getCanvas = () => {
            return this.canvas.nativeElement;
        };
        this.getBase64Image = () => {
            return this.chart.toBase64Image();
        };
        this.generateLegend = () => {
            if (this.chart) {
                return this.chart.generateLegend();
            }
        };
        this.refresh = () => {
            if (this.chart) {
                this.chart.update();
                this.cdr.detectChanges();
            }
        };
        this.reinit = () => {
            if (!this.chart)
                return;
            this.chart.destroy();
            this.initChart();
        };
    }
    ngAfterViewInit() {
        import('chart.js/auto').then(module => {
            Chart = module.default;
            this.initChart();
            this.initialized.emit(true);
        });
    }
    onCanvasClick(event) {
        if (this.chart) {
            const element = this.chart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, false);
            const dataset = this.chart.getElementsAtEventForMode(event, 'dataset', { intersect: true }, false);
            if (element && element[0] && dataset) {
                this.dataSelect.emit({ originalEvent: event, element: element[0], dataset: dataset });
            }
        }
    }
    ngOnDestroy() {
        if (this.chart) {
            this.chart.destroy();
            this.chart = null;
        }
    }
    ngOnChanges(changes) {
        if (!this.chart)
            return;
        if (changes.data?.currentValue || changes.options?.currentValue) {
            this.chart.destroy();
            this.initChart();
        }
    }
}
ChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ChartComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
ChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: ChartComponent, selector: "abp-chart", inputs: { type: "type", data: "data", options: "options", plugins: "plugins", width: "width", height: "height", responsive: "responsive" }, outputs: { dataSelect: "dataSelect", initialized: "initialized" }, viewQueries: [{ propertyName: "canvas", first: true, predicate: ["canvas"], descendants: true }], exportAs: ["abpChart"], usesOnChanges: true, ngImport: i0, template: `
    <div
      style="position:relative"
      [style.width]="responsive && !width ? null : width"
      [style.height]="responsive && !height ? null : height"
    >
      <canvas
        #canvas
        [attr.width]="responsive && !width ? null : width"
        [attr.height]="responsive && !height ? null : height"
        (click)="onCanvasClick($event)"
      ></canvas>
    </div>
  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ChartComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'abp-chart',
                    template: `
    <div
      style="position:relative"
      [style.width]="responsive && !width ? null : width"
      [style.height]="responsive && !height ? null : height"
    >
      <canvas
        #canvas
        [attr.width]="responsive && !width ? null : width"
        [attr.height]="responsive && !height ? null : height"
        (click)="onCanvasClick($event)"
      ></canvas>
    </div>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    exportAs: 'abpChart',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { type: [{
                type: Input
            }], data: [{
                type: Input
            }], options: [{
                type: Input
            }], plugins: [{
                type: Input
            }], width: [{
                type: Input
            }], height: [{
                type: Input
            }], responsive: [{
                type: Input
            }], dataSelect: [{
                type: Output
            }], initialized: [{
                type: Output
            }], canvas: [{
                type: ViewChild,
                args: ['canvas']
            }] } });
//# sourceMappingURL=data:application/json;base64,
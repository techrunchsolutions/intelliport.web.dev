import { Directive, TemplateRef, ViewContainerRef, Input, InjectionToken, Optional, Inject, Injector, } from '@angular/core';
import { Observable, of } from 'rxjs';
import * as i0 from "@angular/core";
export const PAGE_RENDER_STRATEGY = new InjectionToken('PAGE_RENDER_STRATEGY');
export class PagePartDirective {
    constructor(templateRef, viewContainer, renderLogic, injector) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.renderLogic = renderLogic;
        this.injector = injector;
        this.hasRendered = false;
        this.render = (shouldRender) => {
            if (shouldRender && !this.hasRendered) {
                this.viewContainer.createEmbeddedView(this.templateRef);
                this.hasRendered = true;
            }
            else if (!shouldRender && this.hasRendered) {
                this.viewContainer.clear();
                this.hasRendered = false;
            }
        };
    }
    set abpPagePart(type) {
        this.type = type;
        this.createRenderStream(type);
    }
    ngOnChanges({ context }) {
        if (this.renderLogic?.onContextUpdate) {
            this.renderLogic.onContextUpdate(context);
        }
    }
    ngOnInit() {
        if (this.renderLogic?.onInit) {
            this.renderLogic.onInit(this.type, this.injector, this.context);
        }
    }
    ngOnDestroy() {
        this.clearSubscription();
        if (this.renderLogic?.onDestroy) {
            this.renderLogic.onDestroy(this.type, this.injector, this.context);
        }
    }
    shouldRender(type) {
        if (this.renderLogic) {
            const willRender = this.renderLogic.shouldRender(type);
            return willRender instanceof Observable ? willRender : of(willRender);
        }
        return of(true);
    }
    createRenderStream(type) {
        this.clearSubscription();
        this.subscription = this.shouldRender(type).subscribe(this.render);
    }
    clearSubscription() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
PagePartDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: PagePartDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: PAGE_RENDER_STRATEGY, optional: true }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Directive });
PagePartDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.6", type: PagePartDirective, selector: "[abpPagePart]", inputs: { context: ["abpPagePartContext", "context"], abpPagePart: "abpPagePart" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: PagePartDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[abpPagePart]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PAGE_RENDER_STRATEGY]
                }] }, { type: i0.Injector }]; }, propDecorators: { context: [{
                type: Input,
                args: ['abpPagePartContext']
            }], abpPagePart: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS1wYXJ0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvbXBvbmVudHMvcGFnZS9zcmMvcGFnZS1wYXJ0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFdBQVcsRUFDWCxnQkFBZ0IsRUFDaEIsS0FBSyxFQUNMLGNBQWMsRUFDZCxRQUFRLEVBQ1IsTUFBTSxFQUdOLFFBQVEsR0FJVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsVUFBVSxFQUFnQixFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7O0FBU3BELE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLElBQUksY0FBYyxDQUFxQixzQkFBc0IsQ0FBQyxDQUFDO0FBR25HLE1BQU0sT0FBTyxpQkFBaUI7SUFxQjVCLFlBQ1UsV0FBNkIsRUFDN0IsYUFBK0IsRUFDVyxXQUErQixFQUN6RSxRQUFrQjtRQUhsQixnQkFBVyxHQUFYLFdBQVcsQ0FBa0I7UUFDN0Isa0JBQWEsR0FBYixhQUFhLENBQWtCO1FBQ1csZ0JBQVcsR0FBWCxXQUFXLENBQW9CO1FBQ3pFLGFBQVEsR0FBUixRQUFRLENBQVU7UUF4QjVCLGdCQUFXLEdBQUcsS0FBSyxDQUFDO1FBVXBCLFdBQU0sR0FBRyxDQUFDLFlBQXFCLEVBQUUsRUFBRTtZQUNqQyxJQUFJLFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQ3JDLElBQUksQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUN4RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQzthQUN6QjtpQkFBTSxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQzVDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQzNCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO2FBQzFCO1FBQ0gsQ0FBQyxDQUFDO0lBT0MsQ0FBQztJQXBCSixJQUFhLFdBQVcsQ0FBQyxJQUFZO1FBQ25DLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBbUJELFdBQVcsQ0FBQyxFQUFFLE9BQU8sRUFBaUI7UUFDcEMsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLGVBQWUsRUFBRTtZQUNyQyxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMzQztJQUNILENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLE1BQU0sRUFBRTtZQUM1QixJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2pFO0lBQ0gsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUV6QixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsU0FBUyxFQUFFO1lBQy9CLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDcEU7SUFDSCxDQUFDO0lBRUQsWUFBWSxDQUFDLElBQVk7UUFDdkIsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3BCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3ZELE9BQU8sVUFBVSxZQUFZLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDdkU7UUFDRCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQixDQUFDO0lBRVMsa0JBQWtCLENBQUMsSUFBWTtRQUN2QyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUV6QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRVMsaUJBQWlCO1FBQ3pCLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQzs7OEdBbEVVLGlCQUFpQiw2RUF3Qk4sb0JBQW9CO2tHQXhCL0IsaUJBQWlCOzJGQUFqQixpQkFBaUI7a0JBRDdCLFNBQVM7bUJBQUMsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFOzswQkF5Qm5DLFFBQVE7OzBCQUFJLE1BQU07MkJBQUMsb0JBQW9CO21FQW5CYixPQUFPO3NCQUFuQyxLQUFLO3VCQUFDLG9CQUFvQjtnQkFDZCxXQUFXO3NCQUF2QixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBEaXJlY3RpdmUsXHJcbiAgVGVtcGxhdGVSZWYsXHJcbiAgVmlld0NvbnRhaW5lclJlZixcclxuICBJbnB1dCxcclxuICBJbmplY3Rpb25Ub2tlbixcclxuICBPcHRpb25hbCxcclxuICBJbmplY3QsXHJcbiAgT25Jbml0LFxyXG4gIE9uRGVzdHJveSxcclxuICBJbmplY3RvcixcclxuICBPbkNoYW5nZXMsXHJcbiAgU2ltcGxlQ2hhbmdlcyxcclxuICBTaW1wbGVDaGFuZ2UsXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiwgb2YgfSBmcm9tICdyeGpzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUGFnZVJlbmRlclN0cmF0ZWd5IHtcclxuICBzaG91bGRSZW5kZXIodHlwZT86IHN0cmluZyk6IGJvb2xlYW4gfCBPYnNlcnZhYmxlPGJvb2xlYW4+O1xyXG4gIG9uSW5pdD8odHlwZT86IHN0cmluZywgaW5qZWN0b3I/OiBJbmplY3RvciwgY29udGV4dD86IGFueSk6IHZvaWQ7XHJcbiAgb25EZXN0cm95Pyh0eXBlPzogc3RyaW5nLCBpbmplY3Rvcj86IEluamVjdG9yLCBjb250ZXh0PzogYW55KTogdm9pZDtcclxuICBvbkNvbnRleHRVcGRhdGU/KGNoYW5nZT86IFNpbXBsZUNoYW5nZSk6IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBQQUdFX1JFTkRFUl9TVFJBVEVHWSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxQYWdlUmVuZGVyU3RyYXRlZ3k+KCdQQUdFX1JFTkRFUl9TVFJBVEVHWScpO1xyXG5cclxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW2FicFBhZ2VQYXJ0XScgfSlcclxuZXhwb3J0IGNsYXNzIFBhZ2VQYXJ0RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcyB7XHJcbiAgaGFzUmVuZGVyZWQgPSBmYWxzZTtcclxuICB0eXBlOiBzdHJpbmc7XHJcbiAgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XHJcblxyXG4gIEBJbnB1dCgnYWJwUGFnZVBhcnRDb250ZXh0JykgY29udGV4dDogYW55O1xyXG4gIEBJbnB1dCgpIHNldCBhYnBQYWdlUGFydCh0eXBlOiBzdHJpbmcpIHtcclxuICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICB0aGlzLmNyZWF0ZVJlbmRlclN0cmVhbSh0eXBlKTtcclxuICB9XHJcblxyXG4gIHJlbmRlciA9IChzaG91bGRSZW5kZXI6IGJvb2xlYW4pID0+IHtcclxuICAgIGlmIChzaG91bGRSZW5kZXIgJiYgIXRoaXMuaGFzUmVuZGVyZWQpIHtcclxuICAgICAgdGhpcy52aWV3Q29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlUmVmKTtcclxuICAgICAgdGhpcy5oYXNSZW5kZXJlZCA9IHRydWU7XHJcbiAgICB9IGVsc2UgaWYgKCFzaG91bGRSZW5kZXIgJiYgdGhpcy5oYXNSZW5kZXJlZCkge1xyXG4gICAgICB0aGlzLnZpZXdDb250YWluZXIuY2xlYXIoKTtcclxuICAgICAgdGhpcy5oYXNSZW5kZXJlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PixcclxuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcclxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoUEFHRV9SRU5ERVJfU1RSQVRFR1kpIHByaXZhdGUgcmVuZGVyTG9naWM6IFBhZ2VSZW5kZXJTdHJhdGVneSxcclxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICkge31cclxuXHJcbiAgbmdPbkNoYW5nZXMoeyBjb250ZXh0IH06IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLnJlbmRlckxvZ2ljPy5vbkNvbnRleHRVcGRhdGUpIHtcclxuICAgICAgdGhpcy5yZW5kZXJMb2dpYy5vbkNvbnRleHRVcGRhdGUoY29udGV4dCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIGlmICh0aGlzLnJlbmRlckxvZ2ljPy5vbkluaXQpIHtcclxuICAgICAgdGhpcy5yZW5kZXJMb2dpYy5vbkluaXQodGhpcy50eXBlLCB0aGlzLmluamVjdG9yLCB0aGlzLmNvbnRleHQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICB0aGlzLmNsZWFyU3Vic2NyaXB0aW9uKCk7XHJcblxyXG4gICAgaWYgKHRoaXMucmVuZGVyTG9naWM/Lm9uRGVzdHJveSkge1xyXG4gICAgICB0aGlzLnJlbmRlckxvZ2ljLm9uRGVzdHJveSh0aGlzLnR5cGUsIHRoaXMuaW5qZWN0b3IsIHRoaXMuY29udGV4dCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzaG91bGRSZW5kZXIodHlwZTogc3RyaW5nKSB7XHJcbiAgICBpZiAodGhpcy5yZW5kZXJMb2dpYykge1xyXG4gICAgICBjb25zdCB3aWxsUmVuZGVyID0gdGhpcy5yZW5kZXJMb2dpYy5zaG91bGRSZW5kZXIodHlwZSk7XHJcbiAgICAgIHJldHVybiB3aWxsUmVuZGVyIGluc3RhbmNlb2YgT2JzZXJ2YWJsZSA/IHdpbGxSZW5kZXIgOiBvZih3aWxsUmVuZGVyKTtcclxuICAgIH1cclxuICAgIHJldHVybiBvZih0cnVlKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBjcmVhdGVSZW5kZXJTdHJlYW0odHlwZTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLmNsZWFyU3Vic2NyaXB0aW9uKCk7XHJcblxyXG4gICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLnNob3VsZFJlbmRlcih0eXBlKS5zdWJzY3JpYmUodGhpcy5yZW5kZXIpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGNsZWFyU3Vic2NyaXB0aW9uKCkge1xyXG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==
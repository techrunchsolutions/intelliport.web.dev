import { CoreModule } from '@abp/ng.core';
import * as i1 from '@abp/ng.theme.shared';
import { ThemeSharedModule } from '@abp/ng.theme.shared';
import * as i2 from '@abp/ng.theme.shared/extensions';
import { UiExtensionsModule } from '@abp/ng.theme.shared/extensions';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { InjectionToken, Directive, Optional, Inject, Input, Component, ViewEncapsulation, ContentChild, NgModule } from '@angular/core';
import { Observable, of } from 'rxjs';

const PAGE_RENDER_STRATEGY = new InjectionToken('PAGE_RENDER_STRATEGY');
class PagePartDirective {
    constructor(templateRef, viewContainer, renderLogic, injector) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.renderLogic = renderLogic;
        this.injector = injector;
        this.hasRendered = false;
        this.render = (shouldRender) => {
            if (shouldRender && !this.hasRendered) {
                this.viewContainer.createEmbeddedView(this.templateRef);
                this.hasRendered = true;
            }
            else if (!shouldRender && this.hasRendered) {
                this.viewContainer.clear();
                this.hasRendered = false;
            }
        };
    }
    set abpPagePart(type) {
        this.type = type;
        this.createRenderStream(type);
    }
    ngOnChanges({ context }) {
        if (this.renderLogic?.onContextUpdate) {
            this.renderLogic.onContextUpdate(context);
        }
    }
    ngOnInit() {
        if (this.renderLogic?.onInit) {
            this.renderLogic.onInit(this.type, this.injector, this.context);
        }
    }
    ngOnDestroy() {
        this.clearSubscription();
        if (this.renderLogic?.onDestroy) {
            this.renderLogic.onDestroy(this.type, this.injector, this.context);
        }
    }
    shouldRender(type) {
        if (this.renderLogic) {
            const willRender = this.renderLogic.shouldRender(type);
            return willRender instanceof Observable ? willRender : of(willRender);
        }
        return of(true);
    }
    createRenderStream(type) {
        this.clearSubscription();
        this.subscription = this.shouldRender(type).subscribe(this.render);
    }
    clearSubscription() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
PagePartDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: PagePartDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: PAGE_RENDER_STRATEGY, optional: true }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Directive });
PagePartDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.6", type: PagePartDirective, selector: "[abpPagePart]", inputs: { context: ["abpPagePartContext", "context"], abpPagePart: "abpPagePart" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: PagePartDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[abpPagePart]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PAGE_RENDER_STRATEGY]
                }] }, { type: i0.Injector }]; }, propDecorators: { context: [{
                type: Input,
                args: ['abpPagePartContext']
            }], abpPagePart: [{
                type: Input
            }] } });

var PageParts;
(function (PageParts) {
    PageParts["title"] = "PageTitleContainerComponent";
    PageParts["breadcrumb"] = "PageBreadcrumbContainerComponent";
    PageParts["toolbar"] = "PageToolbarContainerComponent";
})(PageParts || (PageParts = {}));
class PageTitleContainerComponent {
}
PageTitleContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: PageTitleContainerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PageTitleContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: PageTitleContainerComponent, selector: "abp-page-title-container", ngImport: i0, template: ` <ng-content></ng-content> `, isInline: true, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: PageTitleContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'abp-page-title-container',
                    template: ` <ng-content></ng-content> `,
                    encapsulation: ViewEncapsulation.None,
                }]
        }] });
class PageBreadcrumbContainerComponent {
}
PageBreadcrumbContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: PageBreadcrumbContainerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PageBreadcrumbContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: PageBreadcrumbContainerComponent, selector: "abp-page-breadcrumb-container", ngImport: i0, template: ` <ng-content></ng-content> `, isInline: true, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: PageBreadcrumbContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'abp-page-breadcrumb-container',
                    template: ` <ng-content></ng-content> `,
                    encapsulation: ViewEncapsulation.None,
                }]
        }] });
class PageToolbarContainerComponent {
}
PageToolbarContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: PageToolbarContainerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PageToolbarContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: PageToolbarContainerComponent, selector: "abp-page-toolbar-container", ngImport: i0, template: ` <ng-content></ng-content> `, isInline: true, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: PageToolbarContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'abp-page-toolbar-container',
                    template: ` <ng-content></ng-content> `,
                    encapsulation: ViewEncapsulation.None,
                }]
        }] });

class PageComponent {
    constructor() {
        this.toolbarVisible = false;
        this.breadcrumbVisible = true;
        this.pageParts = {
            title: PageParts.title,
            breadcrumb: PageParts.breadcrumb,
            toolbar: PageParts.toolbar,
        };
    }
    set toolbarData(val) {
        this._toolbarData = val;
        this.toolbarVisible = true;
    }
    get toolbarData() {
        return this._toolbarData;
    }
    get shouldRenderRow() {
        return !!(this.title ||
            this.toolbarVisible ||
            this.breadcrumbVisible ||
            this.customTitle ||
            this.customBreadcrumb ||
            this.customToolbar);
    }
}
PageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: PageComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: PageComponent, selector: "abp-page", inputs: { title: "title", toolbarData: ["toolbar", "toolbarData"], breadcrumbVisible: ["breadcrumb", "breadcrumbVisible"] }, queries: [{ propertyName: "customTitle", first: true, predicate: PageTitleContainerComponent, descendants: true }, { propertyName: "customBreadcrumb", first: true, predicate: PageBreadcrumbContainerComponent, descendants: true }, { propertyName: "customToolbar", first: true, predicate: PageToolbarContainerComponent, descendants: true }], ngImport: i0, template: "<div class=\"row entry-row\" *ngIf=\"shouldRenderRow\">\r\n  <ng-container *ngIf=\"customTitle; else defaultTitleTemplate\">\r\n    <ng-content select=\"abp-page-title-container\"></ng-content>\r\n  </ng-container>\r\n\r\n  <ng-container *ngIf=\"customBreadcrumb; else defaultBreadcrumbTemplate\">\r\n    <ng-content select=\"abp-page-breadcrumb-container\"></ng-content>\r\n  </ng-container>\r\n\r\n  <ng-container *ngIf=\"customToolbar; else defaultPageToolbarTemplate\">\r\n    <ng-content select=\"abp-page-toolbar-container\"></ng-content>\r\n  </ng-container>\r\n</div>\r\n\r\n<ng-content></ng-content>\r\n\r\n<ng-template #defaultTitleTemplate>\r\n  <ng-container *ngIf=\"title\">\r\n    <div class=\"col-auto\" *abpPagePart=\"pageParts.title\">\r\n      <h1 class=\"content-header-title\">\r\n        {{ title }}\r\n      </h1>\r\n    </div>\r\n  </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #defaultBreadcrumbTemplate>\r\n  <ng-container *ngIf=\"breadcrumbVisible\">\r\n    <div class=\"col-lg-auto ps-lg-0\" *abpPagePart=\"pageParts.breadcrumb\">\r\n      <abp-breadcrumb></abp-breadcrumb>\r\n    </div>\r\n  </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #defaultPageToolbarTemplate>\r\n  <ng-container *ngIf=\"toolbarVisible\">\r\n    <div class=\"col\" *abpPagePart=\"pageParts.toolbar; context: toolbarData\">\r\n      <abp-page-toolbar [record]=\"toolbarData\"></abp-page-toolbar>\r\n    </div>\r\n  </ng-container>\r\n</ng-template>\r\n", components: [{ type: i1.BreadcrumbComponent, selector: "abp-breadcrumb" }, { type: i2.PageToolbarComponent, selector: "abp-page-toolbar", exportAs: ["abpPageToolbar"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: PagePartDirective, selector: "[abpPagePart]", inputs: ["abpPagePartContext", "abpPagePart"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: PageComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-page', encapsulation: ViewEncapsulation.None, template: "<div class=\"row entry-row\" *ngIf=\"shouldRenderRow\">\r\n  <ng-container *ngIf=\"customTitle; else defaultTitleTemplate\">\r\n    <ng-content select=\"abp-page-title-container\"></ng-content>\r\n  </ng-container>\r\n\r\n  <ng-container *ngIf=\"customBreadcrumb; else defaultBreadcrumbTemplate\">\r\n    <ng-content select=\"abp-page-breadcrumb-container\"></ng-content>\r\n  </ng-container>\r\n\r\n  <ng-container *ngIf=\"customToolbar; else defaultPageToolbarTemplate\">\r\n    <ng-content select=\"abp-page-toolbar-container\"></ng-content>\r\n  </ng-container>\r\n</div>\r\n\r\n<ng-content></ng-content>\r\n\r\n<ng-template #defaultTitleTemplate>\r\n  <ng-container *ngIf=\"title\">\r\n    <div class=\"col-auto\" *abpPagePart=\"pageParts.title\">\r\n      <h1 class=\"content-header-title\">\r\n        {{ title }}\r\n      </h1>\r\n    </div>\r\n  </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #defaultBreadcrumbTemplate>\r\n  <ng-container *ngIf=\"breadcrumbVisible\">\r\n    <div class=\"col-lg-auto ps-lg-0\" *abpPagePart=\"pageParts.breadcrumb\">\r\n      <abp-breadcrumb></abp-breadcrumb>\r\n    </div>\r\n  </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #defaultPageToolbarTemplate>\r\n  <ng-container *ngIf=\"toolbarVisible\">\r\n    <div class=\"col\" *abpPagePart=\"pageParts.toolbar; context: toolbarData\">\r\n      <abp-page-toolbar [record]=\"toolbarData\"></abp-page-toolbar>\r\n    </div>\r\n  </ng-container>\r\n</ng-template>\r\n" }]
        }], propDecorators: { title: [{
                type: Input
            }], toolbarData: [{
                type: Input,
                args: ['toolbar']
            }], breadcrumbVisible: [{
                type: Input,
                args: ['breadcrumb']
            }], customTitle: [{
                type: ContentChild,
                args: [PageTitleContainerComponent]
            }], customBreadcrumb: [{
                type: ContentChild,
                args: [PageBreadcrumbContainerComponent]
            }], customToolbar: [{
                type: ContentChild,
                args: [PageToolbarContainerComponent]
            }] } });

const exportedDeclarations = [
    PageComponent,
    PageTitleContainerComponent,
    PageBreadcrumbContainerComponent,
    PageToolbarContainerComponent,
    PagePartDirective,
];
class PageModule {
}
PageModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: PageModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
PageModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: PageModule, declarations: [PageComponent,
        PageTitleContainerComponent,
        PageBreadcrumbContainerComponent,
        PageToolbarContainerComponent,
        PagePartDirective], imports: [CommonModule, UiExtensionsModule, CoreModule, ThemeSharedModule], exports: [PageComponent,
        PageTitleContainerComponent,
        PageBreadcrumbContainerComponent,
        PageToolbarContainerComponent,
        PagePartDirective, UiExtensionsModule] });
PageModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: PageModule, imports: [[CommonModule, UiExtensionsModule, CoreModule, ThemeSharedModule], UiExtensionsModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: PageModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...exportedDeclarations],
                    imports: [CommonModule, UiExtensionsModule, CoreModule, ThemeSharedModule],
                    exports: [...exportedDeclarations, UiExtensionsModule],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { PAGE_RENDER_STRATEGY, PageBreadcrumbContainerComponent, PageComponent, PageModule, PagePartDirective, PageParts, PageTitleContainerComponent, PageToolbarContainerComponent };
//# sourceMappingURL=abp-ng.components-page.mjs.map

import * as i0 from '@angular/core';
import { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

let Chart;
class ChartComponent {
    constructor(el, cdr) {
        this.el = el;
        this.cdr = cdr;
        this.data = {};
        this.options = {};
        this.plugins = [];
        this.responsive = true;
        this.dataSelect = new EventEmitter();
        this.initialized = new EventEmitter();
        this.initChart = () => {
            const opts = this.options || {};
            opts.responsive = this.responsive;
            // allows chart to resize in responsive mode
            if (opts.responsive && (this.height || this.width)) {
                opts.maintainAspectRatio = false;
            }
            this.chart = new Chart(this.canvas.nativeElement, {
                type: this.type,
                data: this.data,
                options: this.options,
            });
        };
        this.getCanvas = () => {
            return this.canvas.nativeElement;
        };
        this.getBase64Image = () => {
            return this.chart.toBase64Image();
        };
        this.generateLegend = () => {
            if (this.chart) {
                return this.chart.generateLegend();
            }
        };
        this.refresh = () => {
            if (this.chart) {
                this.chart.update();
                this.cdr.detectChanges();
            }
        };
        this.reinit = () => {
            if (!this.chart)
                return;
            this.chart.destroy();
            this.initChart();
        };
    }
    ngAfterViewInit() {
        import('chart.js/auto').then(module => {
            Chart = module.default;
            this.initChart();
            this.initialized.emit(true);
        });
    }
    onCanvasClick(event) {
        if (this.chart) {
            const element = this.chart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, false);
            const dataset = this.chart.getElementsAtEventForMode(event, 'dataset', { intersect: true }, false);
            if (element && element[0] && dataset) {
                this.dataSelect.emit({ originalEvent: event, element: element[0], dataset: dataset });
            }
        }
    }
    ngOnDestroy() {
        if (this.chart) {
            this.chart.destroy();
            this.chart = null;
        }
    }
    ngOnChanges(changes) {
        if (!this.chart)
            return;
        if (changes.data?.currentValue || changes.options?.currentValue) {
            this.chart.destroy();
            this.initChart();
        }
    }
}
ChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ChartComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
ChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: ChartComponent, selector: "abp-chart", inputs: { type: "type", data: "data", options: "options", plugins: "plugins", width: "width", height: "height", responsive: "responsive" }, outputs: { dataSelect: "dataSelect", initialized: "initialized" }, viewQueries: [{ propertyName: "canvas", first: true, predicate: ["canvas"], descendants: true }], exportAs: ["abpChart"], usesOnChanges: true, ngImport: i0, template: `
    <div
      style="position:relative"
      [style.width]="responsive && !width ? null : width"
      [style.height]="responsive && !height ? null : height"
    >
      <canvas
        #canvas
        [attr.width]="responsive && !width ? null : width"
        [attr.height]="responsive && !height ? null : height"
        (click)="onCanvasClick($event)"
      ></canvas>
    </div>
  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ChartComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'abp-chart',
                    template: `
    <div
      style="position:relative"
      [style.width]="responsive && !width ? null : width"
      [style.height]="responsive && !height ? null : height"
    >
      <canvas
        #canvas
        [attr.width]="responsive && !width ? null : width"
        [attr.height]="responsive && !height ? null : height"
        (click)="onCanvasClick($event)"
      ></canvas>
    </div>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    exportAs: 'abpChart',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { type: [{
                type: Input
            }], data: [{
                type: Input
            }], options: [{
                type: Input
            }], plugins: [{
                type: Input
            }], width: [{
                type: Input
            }], height: [{
                type: Input
            }], responsive: [{
                type: Input
            }], dataSelect: [{
                type: Output
            }], initialized: [{
                type: Output
            }], canvas: [{
                type: ViewChild,
                args: ['canvas']
            }] } });

class ChartModule {
}
ChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ChartModule, declarations: [ChartComponent], imports: [CommonModule], exports: [ChartComponent] });
ChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ChartModule, providers: [], imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ChartModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    exports: [ChartComponent],
                    declarations: [ChartComponent],
                    providers: [],
                }]
        }] });

function getRandomBackgroundColor(count) {
    const colors = [];
    for (let i = 0; i < count; i++) {
        const r = ((i + 5) * (i + 5) * 474) % 255;
        const g = ((i + 5) * (i + 5) * 1600) % 255;
        const b = ((i + 5) * (i + 5) * 84065) % 255;
        colors.push('rgba(' + r + ', ' + g + ', ' + b + ', 0.7)');
    }
    return colors;
}

/**
 * Generated bundle index. Do not edit.
 */

export { ChartComponent, ChartModule, getRandomBackgroundColor };
//# sourceMappingURL=abp-ng.components-chart.js.mjs.map

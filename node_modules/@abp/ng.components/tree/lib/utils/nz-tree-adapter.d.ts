export declare abstract class BaseNode {
    id: string;
    parentId: string | null;
    name?: string;
    displayName?: string;
    constructor(id: string, parentId: string | null);
}
declare class TreeNode<T extends BaseNode> extends BaseNode {
    entity: T;
    private nameResolver;
    title: string | undefined;
    key: string;
    icon: string | null;
    children: TreeNode<T>[];
    isLeaf: boolean;
    checked: boolean;
    selected: boolean;
    expanded: boolean;
    selectable: boolean;
    disabled: boolean;
    disableCheckbox: boolean;
    parentNode?: TreeNode<T> | null;
    constructor(entity: T, nameResolver?: (ent: any) => any);
}
export declare class TreeAdapter<T extends BaseNode = BaseNode> {
    private list;
    private tree;
    constructor(list?: T[]);
    getList(): T[];
    getTree(): TreeNode<T>[];
    handleDrop({ key, parentNode }: TreeNode<T>): void;
    handleRemove({ key }: TreeNode<T>): void;
    handleUpdate({ key, children }: {
        key: string;
        children: T[];
    }): void;
    updateTreeFromList(list: T[]): T[];
}
export {};

import { RestService } from '@abp/ng.core';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@abp/ng.core";
export class TenantService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpTenantManagement';
        this.create = (input) => this.restService.request({
            method: 'POST',
            url: '/api/multi-tenancy/tenants',
            body: input,
        }, { apiName: this.apiName });
        this.delete = (id) => this.restService.request({
            method: 'DELETE',
            url: `/api/multi-tenancy/tenants/${id}`,
        }, { apiName: this.apiName });
        this.deleteDefaultConnectionString = (id) => this.restService.request({
            method: 'DELETE',
            url: `/api/multi-tenancy/tenants/${id}/default-connection-string`,
        }, { apiName: this.apiName });
        this.get = (id) => this.restService.request({
            method: 'GET',
            url: `/api/multi-tenancy/tenants/${id}`,
        }, { apiName: this.apiName });
        this.getDefaultConnectionString = (id) => this.restService.request({
            method: 'GET',
            responseType: 'text',
            url: `/api/multi-tenancy/tenants/${id}/default-connection-string`,
        }, { apiName: this.apiName });
        this.getList = (input) => this.restService.request({
            method: 'GET',
            url: '/api/multi-tenancy/tenants',
            params: { filter: input.filter, sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },
        }, { apiName: this.apiName });
        this.update = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/multi-tenancy/tenants/${id}`,
            body: input,
        }, { apiName: this.apiName });
        this.updateDefaultConnectionString = (id, defaultConnectionString) => this.restService.request({
            method: 'PUT',
            url: `/api/multi-tenancy/tenants/${id}/default-connection-string`,
            params: { defaultConnectionString },
        }, { apiName: this.apiName });
    }
}
TenantService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: TenantService, deps: [{ token: i1.RestService }], target: i0.ɵɵFactoryTarget.Injectable });
TenantService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: TenantService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: TenantService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.RestService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuYW50LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy90ZW5hbnQtbWFuYWdlbWVudC9wcm94eS9zcmMvbGliL3Byb3h5L3RlbmFudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBSzNDLE1BQU0sT0FBTyxhQUFhO0lBZ0V4QixZQUFvQixXQUF3QjtRQUF4QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQS9ENUMsWUFBTyxHQUFHLHFCQUFxQixDQUFDO1FBRWhDLFdBQU0sR0FBRyxDQUFDLEtBQXNCLEVBQUUsRUFBRSxDQUNsQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBaUI7WUFDdkMsTUFBTSxFQUFFLE1BQU07WUFDZCxHQUFHLEVBQUUsNEJBQTRCO1lBQ2pDLElBQUksRUFBRSxLQUFLO1NBQ1osRUFDRCxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUU3QixXQUFNLEdBQUcsQ0FBQyxFQUFVLEVBQUUsRUFBRSxDQUN0QixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBWTtZQUNsQyxNQUFNLEVBQUUsUUFBUTtZQUNoQixHQUFHLEVBQUUsOEJBQThCLEVBQUUsRUFBRTtTQUN4QyxFQUNELEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBRTdCLGtDQUE2QixHQUFHLENBQUMsRUFBVSxFQUFFLEVBQUUsQ0FDN0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQVk7WUFDbEMsTUFBTSxFQUFFLFFBQVE7WUFDaEIsR0FBRyxFQUFFLDhCQUE4QixFQUFFLDRCQUE0QjtTQUNsRSxFQUNELEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBRTdCLFFBQUcsR0FBRyxDQUFDLEVBQVUsRUFBRSxFQUFFLENBQ25CLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFpQjtZQUN2QyxNQUFNLEVBQUUsS0FBSztZQUNiLEdBQUcsRUFBRSw4QkFBOEIsRUFBRSxFQUFFO1NBQ3hDLEVBQ0QsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFFN0IsK0JBQTBCLEdBQUcsQ0FBQyxFQUFVLEVBQUUsRUFBRSxDQUMxQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBYztZQUNwQyxNQUFNLEVBQUUsS0FBSztZQUNiLFlBQVksRUFBRSxNQUFNO1lBQ3BCLEdBQUcsRUFBRSw4QkFBOEIsRUFBRSw0QkFBNEI7U0FDbEUsRUFDRCxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUU3QixZQUFPLEdBQUcsQ0FBQyxLQUFzQixFQUFFLEVBQUUsQ0FDbkMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQWlDO1lBQ3ZELE1BQU0sRUFBRSxLQUFLO1lBQ2IsR0FBRyxFQUFFLDRCQUE0QjtZQUNqQyxNQUFNLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsRUFBRSxjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWMsRUFBRTtTQUMzSCxFQUNELEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBRTdCLFdBQU0sR0FBRyxDQUFDLEVBQVUsRUFBRSxLQUFzQixFQUFFLEVBQUUsQ0FDOUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQWlCO1lBQ3ZDLE1BQU0sRUFBRSxLQUFLO1lBQ2IsR0FBRyxFQUFFLDhCQUE4QixFQUFFLEVBQUU7WUFDdkMsSUFBSSxFQUFFLEtBQUs7U0FDWixFQUNELEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBRTdCLGtDQUE2QixHQUFHLENBQUMsRUFBVSxFQUFFLHVCQUErQixFQUFFLEVBQUUsQ0FDOUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQVk7WUFDbEMsTUFBTSxFQUFFLEtBQUs7WUFDYixHQUFHLEVBQUUsOEJBQThCLEVBQUUsNEJBQTRCO1lBQ2pFLE1BQU0sRUFBRSxFQUFFLHVCQUF1QixFQUFFO1NBQ3BDLEVBQ0QsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFFa0IsQ0FBQzs7MEdBaEVyQyxhQUFhOzhHQUFiLGFBQWEsY0FGWixNQUFNOzJGQUVQLGFBQWE7a0JBSHpCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBHZXRUZW5hbnRzSW5wdXQsIFRlbmFudENyZWF0ZUR0bywgVGVuYW50RHRvLCBUZW5hbnRVcGRhdGVEdG8gfSBmcm9tICcuL21vZGVscyc7XHJcbmltcG9ydCB7IFJlc3RTZXJ2aWNlIH0gZnJvbSAnQGFicC9uZy5jb3JlJztcclxuaW1wb3J0IHR5cGUgeyBQYWdlZFJlc3VsdER0byB9IGZyb20gJ0BhYnAvbmcuY29yZSc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUZW5hbnRTZXJ2aWNlIHtcclxuICBhcGlOYW1lID0gJ0FicFRlbmFudE1hbmFnZW1lbnQnO1xyXG5cclxuICBjcmVhdGUgPSAoaW5wdXQ6IFRlbmFudENyZWF0ZUR0bykgPT5cclxuICAgIHRoaXMucmVzdFNlcnZpY2UucmVxdWVzdDxhbnksIFRlbmFudER0bz4oe1xyXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgdXJsOiAnL2FwaS9tdWx0aS10ZW5hbmN5L3RlbmFudHMnLFxyXG4gICAgICBib2R5OiBpbnB1dCxcclxuICAgIH0sXHJcbiAgICB7IGFwaU5hbWU6IHRoaXMuYXBpTmFtZSB9KTtcclxuXHJcbiAgZGVsZXRlID0gKGlkOiBzdHJpbmcpID0+XHJcbiAgICB0aGlzLnJlc3RTZXJ2aWNlLnJlcXVlc3Q8YW55LCB2b2lkPih7XHJcbiAgICAgIG1ldGhvZDogJ0RFTEVURScsXHJcbiAgICAgIHVybDogYC9hcGkvbXVsdGktdGVuYW5jeS90ZW5hbnRzLyR7aWR9YCxcclxuICAgIH0sXHJcbiAgICB7IGFwaU5hbWU6IHRoaXMuYXBpTmFtZSB9KTtcclxuXHJcbiAgZGVsZXRlRGVmYXVsdENvbm5lY3Rpb25TdHJpbmcgPSAoaWQ6IHN0cmluZykgPT5cclxuICAgIHRoaXMucmVzdFNlcnZpY2UucmVxdWVzdDxhbnksIHZvaWQ+KHtcclxuICAgICAgbWV0aG9kOiAnREVMRVRFJyxcclxuICAgICAgdXJsOiBgL2FwaS9tdWx0aS10ZW5hbmN5L3RlbmFudHMvJHtpZH0vZGVmYXVsdC1jb25uZWN0aW9uLXN0cmluZ2AsXHJcbiAgICB9LFxyXG4gICAgeyBhcGlOYW1lOiB0aGlzLmFwaU5hbWUgfSk7XHJcblxyXG4gIGdldCA9IChpZDogc3RyaW5nKSA9PlxyXG4gICAgdGhpcy5yZXN0U2VydmljZS5yZXF1ZXN0PGFueSwgVGVuYW50RHRvPih7XHJcbiAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgIHVybDogYC9hcGkvbXVsdGktdGVuYW5jeS90ZW5hbnRzLyR7aWR9YCxcclxuICAgIH0sXHJcbiAgICB7IGFwaU5hbWU6IHRoaXMuYXBpTmFtZSB9KTtcclxuXHJcbiAgZ2V0RGVmYXVsdENvbm5lY3Rpb25TdHJpbmcgPSAoaWQ6IHN0cmluZykgPT5cclxuICAgIHRoaXMucmVzdFNlcnZpY2UucmVxdWVzdDxhbnksIHN0cmluZz4oe1xyXG4gICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICByZXNwb25zZVR5cGU6ICd0ZXh0JyxcclxuICAgICAgdXJsOiBgL2FwaS9tdWx0aS10ZW5hbmN5L3RlbmFudHMvJHtpZH0vZGVmYXVsdC1jb25uZWN0aW9uLXN0cmluZ2AsXHJcbiAgICB9LFxyXG4gICAgeyBhcGlOYW1lOiB0aGlzLmFwaU5hbWUgfSk7XHJcblxyXG4gIGdldExpc3QgPSAoaW5wdXQ6IEdldFRlbmFudHNJbnB1dCkgPT5cclxuICAgIHRoaXMucmVzdFNlcnZpY2UucmVxdWVzdDxhbnksIFBhZ2VkUmVzdWx0RHRvPFRlbmFudER0bz4+KHtcclxuICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgdXJsOiAnL2FwaS9tdWx0aS10ZW5hbmN5L3RlbmFudHMnLFxyXG4gICAgICBwYXJhbXM6IHsgZmlsdGVyOiBpbnB1dC5maWx0ZXIsIHNvcnRpbmc6IGlucHV0LnNvcnRpbmcsIHNraXBDb3VudDogaW5wdXQuc2tpcENvdW50LCBtYXhSZXN1bHRDb3VudDogaW5wdXQubWF4UmVzdWx0Q291bnQgfSxcclxuICAgIH0sXHJcbiAgICB7IGFwaU5hbWU6IHRoaXMuYXBpTmFtZSB9KTtcclxuXHJcbiAgdXBkYXRlID0gKGlkOiBzdHJpbmcsIGlucHV0OiBUZW5hbnRVcGRhdGVEdG8pID0+XHJcbiAgICB0aGlzLnJlc3RTZXJ2aWNlLnJlcXVlc3Q8YW55LCBUZW5hbnREdG8+KHtcclxuICAgICAgbWV0aG9kOiAnUFVUJyxcclxuICAgICAgdXJsOiBgL2FwaS9tdWx0aS10ZW5hbmN5L3RlbmFudHMvJHtpZH1gLFxyXG4gICAgICBib2R5OiBpbnB1dCxcclxuICAgIH0sXHJcbiAgICB7IGFwaU5hbWU6IHRoaXMuYXBpTmFtZSB9KTtcclxuXHJcbiAgdXBkYXRlRGVmYXVsdENvbm5lY3Rpb25TdHJpbmcgPSAoaWQ6IHN0cmluZywgZGVmYXVsdENvbm5lY3Rpb25TdHJpbmc6IHN0cmluZykgPT5cclxuICAgIHRoaXMucmVzdFNlcnZpY2UucmVxdWVzdDxhbnksIHZvaWQ+KHtcclxuICAgICAgbWV0aG9kOiAnUFVUJyxcclxuICAgICAgdXJsOiBgL2FwaS9tdWx0aS10ZW5hbmN5L3RlbmFudHMvJHtpZH0vZGVmYXVsdC1jb25uZWN0aW9uLXN0cmluZ2AsXHJcbiAgICAgIHBhcmFtczogeyBkZWZhdWx0Q29ubmVjdGlvblN0cmluZyB9LFxyXG4gICAgfSxcclxuICAgIHsgYXBpTmFtZTogdGhpcy5hcGlOYW1lIH0pO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlc3RTZXJ2aWNlOiBSZXN0U2VydmljZSkge31cclxufVxyXG4iXX0=
import * as i1 from '@abp/ng.core';
import { ListService, ConfigStateService, RouterOutletComponent, AuthGuard, PermissionGuard, ReplaceableRouteContainerComponent, LazyModuleFactory, CoreModule } from '@abp/ng.core';
import * as i2 from '@abp/ng.theme.shared';
import { Confirmation, getPasswordValidators, ThemeSharedModule } from '@abp/ng.theme.shared';
import * as i5 from '@abp/ng.theme.shared/extensions';
import { FormPropData, generateFormFromProps, EXTENSIONS_IDENTIFIER, EntityAction, EntityProp, FormProp, ToolbarAction, ExtensionsService, getObjectExtensionEntitiesFromStore, mapEntitiesToContributors, mergeWithDefaultActions, mergeWithDefaultProps, UiExtensionsModule } from '@abp/ng.theme.shared/extensions';
import * as i0 from '@angular/core';
import { Component, InjectionToken, Injectable, NgModule } from '@angular/core';
import { finalize, map, tap, mapTo } from 'rxjs/operators';
import * as i3 from '@abp/ng.tenant-management/proxy';
import * as i4 from '@angular/forms';
import { Validators } from '@angular/forms';
import * as i6 from '@abp/ng.feature-management';
import { FeatureManagementModule } from '@abp/ng.feature-management';
import * as i7 from '@ngx-validate/core';
import { NgxValidateCoreModule } from '@ngx-validate/core';
import { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';
import * as i1$1 from '@angular/router';
import { RouterModule } from '@angular/router';

class TenantsComponent {
    constructor(list, injector, confirmationService, service, toasterService, fb) {
        this.list = list;
        this.injector = injector;
        this.confirmationService = confirmationService;
        this.service = service;
        this.toasterService = toasterService;
        this.fb = fb;
        this.data = { items: [], totalCount: 0 };
        this.visibleFeatures = false;
        this.modalBusy = false;
        this.featureManagementKey = "FeatureManagement.FeatureManagementComponent" /* FeatureManagement */;
        this.onVisibleFeaturesChange = (value) => {
            this.visibleFeatures = value;
        };
    }
    get hasSelectedTenant() {
        return Boolean(this.selected.id);
    }
    ngOnInit() {
        this.hookToQuery();
    }
    createTenantForm() {
        const data = new FormPropData(this.injector, this.selected);
        this.tenantForm = generateFormFromProps(data);
    }
    addTenant() {
        this.selected = {};
        this.createTenantForm();
        this.isModalVisible = true;
    }
    editTenant(id) {
        this.service.get(id).subscribe(res => {
            this.selected = res;
            this.createTenantForm();
            this.isModalVisible = true;
        });
    }
    save() {
        if (!this.tenantForm.valid || this.modalBusy)
            return;
        this.modalBusy = true;
        const { id } = this.selected;
        (id
            ? this.service.update(id, Object.assign(Object.assign({}, this.selected), this.tenantForm.value))
            : this.service.create(this.tenantForm.value))
            .pipe(finalize(() => (this.modalBusy = false)))
            .subscribe(() => {
            this.isModalVisible = false;
            this.list.get();
        });
    }
    delete(id, name) {
        this.confirmationService
            .warn('AbpTenantManagement::TenantDeletionConfirmationMessage', 'AbpTenantManagement::AreYouSure', {
            messageLocalizationParams: [name],
        })
            .subscribe((status) => {
            if (status === Confirmation.Status.confirm) {
                this.toasterService.success('AbpUi::SuccessfullyDeleted');
                this.service.delete(id).subscribe(() => this.list.get());
            }
        });
    }
    hookToQuery() {
        this.list
            .hookToQuery(query => this.service.getList(query))
            .subscribe(res => {
            this.data = res;
        });
    }
    onSharedDatabaseChange(value) {
        if (!value) {
            setTimeout(() => {
                const defaultConnectionString = document.getElementById('defaultConnectionString');
                if (defaultConnectionString) {
                    defaultConnectionString.focus();
                }
            }, 0);
        }
    }
    openFeaturesModal(providerKey) {
        this.providerKey = providerKey;
        setTimeout(() => {
            this.visibleFeatures = true;
        }, 0);
    }
    sort(data) {
        const { prop, dir } = data.sorts[0];
        this.list.sortKey = prop;
        this.list.sortOrder = dir;
    }
}
TenantsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: TenantsComponent, deps: [{ token: i1.ListService }, { token: i0.Injector }, { token: i2.ConfirmationService }, { token: i3.TenantService }, { token: i2.ToasterService }, { token: i4.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
TenantsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: TenantsComponent, selector: "abp-tenants", providers: [
        ListService,
        {
            provide: EXTENSIONS_IDENTIFIER,
            useValue: "TenantManagement.TenantsComponent" /* Tenants */,
        },
    ], ngImport: i0, template: "<div id=\"wrapper\" class=\"card\">\r\n  <div class=\"card-header\">\r\n    <div class=\"row\">\r\n      <div class=\"col col-md-6\">\r\n        <h5 class=\"card-title\">{{ 'AbpTenantManagement::Tenants' | abpLocalization }}</h5>\r\n      </div>\r\n      <div class=\"text-end col col-md-6\">\r\n        <abp-page-toolbar [record]=\"data.items\"></abp-page-toolbar>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"card-body\">\r\n    <div id=\"data-tables-table-filter\" class=\"data-tables-filter\">\r\n      <div class=\"input-group\">\r\n        <input\r\n          type=\"search\"\r\n          class=\"form-control\"\r\n          [placeholder]=\"'AbpUi::PagerSearch' | abpLocalization\"\r\n          [(ngModel)]=\"list.filter\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <abp-extensible-table\r\n      [data]=\"data.items || []\"\r\n      [recordsTotal]=\"data.totalCount || 0\"\r\n      [list]=\"list\"\r\n    ></abp-extensible-table>\r\n  </div>\r\n</div>\r\n\r\n<abp-modal [(visible)]=\"isModalVisible\" [busy]=\"modalBusy\">\r\n  <ng-template #abpHeader>\r\n    <h3>\r\n      {{\r\n        (selected?.id ? 'AbpTenantManagement::Edit' : 'AbpTenantManagement::NewTenant')\r\n          | abpLocalization\r\n      }}\r\n    </h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form [formGroup]=\"tenantForm\" (ngSubmit)=\"save()\" [validateOnSubmit]=\"true\">\r\n      <abp-extensible-form [selectedRecord]=\"selected\"></abp-extensible-form>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button abpClose type=\"button\" class=\"btn btn-secondary\">\r\n      {{ 'AbpTenantManagement::Cancel' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass=\"fa fa-check\" (click)=\"save()\" [disabled]=\"tenantForm?.invalid\">{{\r\n      'AbpTenantManagement::Save' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<abp-feature-management\r\n  *abpReplaceableTemplate=\"{\r\n    inputs: {\r\n      providerName: { value: 'T' },\r\n      providerKey: { value: providerKey },\r\n      visible: { value: visibleFeatures, twoWay: true }\r\n    },\r\n    outputs: { visibleChange: $any(onVisibleFeaturesChange) },\r\n    componentKey: featureManagementKey\r\n  }\"\r\n  [(visible)]=\"visibleFeatures\"\r\n  providerName=\"T\"\r\n  [providerKey]=\"providerKey\"\r\n>\r\n</abp-feature-management>\r\n", components: [{ type: i5.PageToolbarComponent, selector: "abp-page-toolbar", exportAs: ["abpPageToolbar"] }, { type: i5.ExtensibleTableComponent, selector: "abp-extensible-table", inputs: ["actionsText", "data", "list", "recordsTotal", "actionsColumnWidth", "actionsTemplate"], exportAs: ["abpExtensibleTable"] }, { type: i2.ModalComponent, selector: "abp-modal", inputs: ["visible", "busy", "options", "suppressUnsavedChangesWarning"], outputs: ["visibleChange", "init", "appear", "disappear"] }, { type: i5.ExtensibleFormComponent, selector: "abp-extensible-form", inputs: ["selectedRecord"], exportAs: ["abpExtensibleForm"] }, { type: i2.ButtonComponent, selector: "abp-button", inputs: ["buttonId", "buttonClass", "buttonType", "formName", "iconClass", "loading", "disabled", "attributes"], outputs: ["click", "focus", "blur", "abpClick", "abpFocus", "abpBlur"] }, { type: i6.FeatureManagementComponent, selector: "abp-feature-management", inputs: ["providerKey", "providerName", "visible"], outputs: ["visibleChange"], exportAs: ["abpFeatureManagement"] }], directives: [{ type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormSubmitDirective, selector: "form[ngSubmit][formGroup]", inputs: ["debounce", "notValidateOnSubmit", "markAsDirtyWhenSubmit"], outputs: ["ngSubmit"] }, { type: i7.ValidationGroupDirective, selector: "[formGroup],[formGroupName]", exportAs: ["validationGroup"] }, { type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2.ModalCloseDirective, selector: "[abpClose]" }, { type: i1.ReplaceableTemplateDirective, selector: "[abpReplaceableTemplate]", inputs: ["abpReplaceableTemplate"] }], pipes: { "abpLocalization": i1.LocalizationPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: TenantsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-tenants', providers: [
                        ListService,
                        {
                            provide: EXTENSIONS_IDENTIFIER,
                            useValue: "TenantManagement.TenantsComponent" /* Tenants */,
                        },
                    ], template: "<div id=\"wrapper\" class=\"card\">\r\n  <div class=\"card-header\">\r\n    <div class=\"row\">\r\n      <div class=\"col col-md-6\">\r\n        <h5 class=\"card-title\">{{ 'AbpTenantManagement::Tenants' | abpLocalization }}</h5>\r\n      </div>\r\n      <div class=\"text-end col col-md-6\">\r\n        <abp-page-toolbar [record]=\"data.items\"></abp-page-toolbar>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"card-body\">\r\n    <div id=\"data-tables-table-filter\" class=\"data-tables-filter\">\r\n      <div class=\"input-group\">\r\n        <input\r\n          type=\"search\"\r\n          class=\"form-control\"\r\n          [placeholder]=\"'AbpUi::PagerSearch' | abpLocalization\"\r\n          [(ngModel)]=\"list.filter\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <abp-extensible-table\r\n      [data]=\"data.items || []\"\r\n      [recordsTotal]=\"data.totalCount || 0\"\r\n      [list]=\"list\"\r\n    ></abp-extensible-table>\r\n  </div>\r\n</div>\r\n\r\n<abp-modal [(visible)]=\"isModalVisible\" [busy]=\"modalBusy\">\r\n  <ng-template #abpHeader>\r\n    <h3>\r\n      {{\r\n        (selected?.id ? 'AbpTenantManagement::Edit' : 'AbpTenantManagement::NewTenant')\r\n          | abpLocalization\r\n      }}\r\n    </h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form [formGroup]=\"tenantForm\" (ngSubmit)=\"save()\" [validateOnSubmit]=\"true\">\r\n      <abp-extensible-form [selectedRecord]=\"selected\"></abp-extensible-form>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button abpClose type=\"button\" class=\"btn btn-secondary\">\r\n      {{ 'AbpTenantManagement::Cancel' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass=\"fa fa-check\" (click)=\"save()\" [disabled]=\"tenantForm?.invalid\">{{\r\n      'AbpTenantManagement::Save' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<abp-feature-management\r\n  *abpReplaceableTemplate=\"{\r\n    inputs: {\r\n      providerName: { value: 'T' },\r\n      providerKey: { value: providerKey },\r\n      visible: { value: visibleFeatures, twoWay: true }\r\n    },\r\n    outputs: { visibleChange: $any(onVisibleFeaturesChange) },\r\n    componentKey: featureManagementKey\r\n  }\"\r\n  [(visible)]=\"visibleFeatures\"\r\n  providerName=\"T\"\r\n  [providerKey]=\"providerKey\"\r\n>\r\n</abp-feature-management>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.ListService }, { type: i0.Injector }, { type: i2.ConfirmationService }, { type: i3.TenantService }, { type: i2.ToasterService }, { type: i4.FormBuilder }]; } });

const DEFAULT_TENANTS_ENTITY_ACTIONS = EntityAction.createMany([
    {
        text: 'AbpTenantManagement::Edit',
        action: data => {
            const component = data.getInjected(TenantsComponent);
            component.editTenant(data.record.id);
        },
        permission: 'AbpTenantManagement.Tenants.Update',
    },
    {
        text: 'AbpTenantManagement::Permission:ManageFeatures',
        action: data => {
            const component = data.getInjected(TenantsComponent);
            component.openFeaturesModal(data.record.id);
        },
        permission: 'AbpTenantManagement.Tenants.ManageFeatures',
    },
    {
        text: 'AbpTenantManagement::Delete',
        action: data => {
            const component = data.getInjected(TenantsComponent);
            component.delete(data.record.id, data.record.name);
        },
        permission: 'AbpTenantManagement.Tenants.Delete',
    },
]);

const DEFAULT_TENANTS_ENTITY_PROPS = EntityProp.createMany([
    {
        type: "string" /* String */,
        name: 'name',
        displayName: 'AbpTenantManagement::TenantName',
        sortable: true,
    },
]);

const DEFAULT_TENANTS_CREATE_FORM_PROPS = FormProp.createMany([
    {
        type: "string" /* String */,
        name: 'name',
        id: 'name',
        displayName: 'AbpTenantManagement::TenantName',
        validators: () => [Validators.required, Validators.maxLength(256)],
    },
    {
        type: "email" /* Email */,
        name: 'adminEmailAddress',
        displayName: 'AbpTenantManagement::DisplayName:AdminEmailAddress',
        id: 'admin-email-address',
        validators: () => [Validators.required, Validators.maxLength(256), Validators.email],
    },
    {
        type: "password" /* Password */,
        name: 'adminPassword',
        displayName: 'AbpTenantManagement::DisplayName:AdminPassword',
        id: 'admin-password',
        autocomplete: 'new-password',
        validators: data => [Validators.required, ...getPasswordValidators({ get: data.getInjected })],
    },
]);
const DEFAULT_TENANTS_EDIT_FORM_PROPS = DEFAULT_TENANTS_CREATE_FORM_PROPS.slice(0, 1);

const DEFAULT_TENANTS_TOOLBAR_ACTIONS = ToolbarAction.createMany([
    {
        text: 'AbpTenantManagement::ManageHostFeatures',
        action: data => {
            const component = data.getInjected(TenantsComponent);
            component.openFeaturesModal('');
        },
        permission: 'FeatureManagement.ManageHostFeatures',
        icon: 'fa fa-cog',
    },
    {
        text: 'AbpTenantManagement::NewTenant',
        action: data => {
            const component = data.getInjected(TenantsComponent);
            component.addTenant();
        },
        permission: 'AbpTenantManagement.Tenants.Create',
        icon: 'fa fa-plus',
    },
]);

const DEFAULT_TENANT_MANAGEMENT_ENTITY_ACTIONS = {
    ["TenantManagement.TenantsComponent" /* Tenants */]: DEFAULT_TENANTS_ENTITY_ACTIONS,
};
const DEFAULT_TENANT_MANAGEMENT_TOOLBAR_ACTIONS = {
    ["TenantManagement.TenantsComponent" /* Tenants */]: DEFAULT_TENANTS_TOOLBAR_ACTIONS,
};
const DEFAULT_TENANT_MANAGEMENT_ENTITY_PROPS = {
    ["TenantManagement.TenantsComponent" /* Tenants */]: DEFAULT_TENANTS_ENTITY_PROPS,
};
const DEFAULT_TENANT_MANAGEMENT_CREATE_FORM_PROPS = {
    ["TenantManagement.TenantsComponent" /* Tenants */]: DEFAULT_TENANTS_CREATE_FORM_PROPS,
};
const DEFAULT_TENANT_MANAGEMENT_EDIT_FORM_PROPS = {
    ["TenantManagement.TenantsComponent" /* Tenants */]: DEFAULT_TENANTS_EDIT_FORM_PROPS,
};
const TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS = new InjectionToken('TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS');
const TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS = new InjectionToken('TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS');
const TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS = new InjectionToken('TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS');
const TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS = new InjectionToken('TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS');
const TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS = new InjectionToken('TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS');

class TenantManagementExtensionsGuard {
    constructor(injector) {
        this.injector = injector;
    }
    canActivate() {
        const extensions = this.injector.get(ExtensionsService);
        const actionContributors = this.injector.get(TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS, null) || {};
        const toolbarContributors = this.injector.get(TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS, null) || {};
        const propContributors = this.injector.get(TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS, null) || {};
        const createFormContributors = this.injector.get(TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS, null) || {};
        const editFormContributors = this.injector.get(TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS, null) || {};
        const configState = this.injector.get(ConfigStateService);
        return getObjectExtensionEntitiesFromStore(configState, 'TenantManagement').pipe(map(entities => ({
            ["TenantManagement.TenantsComponent" /* Tenants */]: entities.Tenant,
        })), mapEntitiesToContributors(configState, 'TenantManagement'), tap(objectExtensionContributors => {
            mergeWithDefaultActions(extensions.entityActions, DEFAULT_TENANT_MANAGEMENT_ENTITY_ACTIONS, actionContributors);
            mergeWithDefaultActions(extensions.toolbarActions, DEFAULT_TENANT_MANAGEMENT_TOOLBAR_ACTIONS, toolbarContributors);
            mergeWithDefaultProps(extensions.entityProps, DEFAULT_TENANT_MANAGEMENT_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);
            mergeWithDefaultProps(extensions.createFormProps, DEFAULT_TENANT_MANAGEMENT_CREATE_FORM_PROPS, objectExtensionContributors.createForm, createFormContributors);
            mergeWithDefaultProps(extensions.editFormProps, DEFAULT_TENANT_MANAGEMENT_EDIT_FORM_PROPS, objectExtensionContributors.editForm, editFormContributors);
        }), mapTo(true));
    }
}
TenantManagementExtensionsGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: TenantManagementExtensionsGuard, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
TenantManagementExtensionsGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: TenantManagementExtensionsGuard });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: TenantManagementExtensionsGuard, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });

const routes = [
    { path: '', redirectTo: 'tenants', pathMatch: 'full' },
    {
        path: '',
        component: RouterOutletComponent,
        canActivate: [AuthGuard, PermissionGuard, TenantManagementExtensionsGuard],
        children: [
            {
                path: 'tenants',
                component: ReplaceableRouteContainerComponent,
                data: {
                    requiredPolicy: 'AbpTenantManagement.Tenants',
                    replaceableComponent: {
                        key: "TenantManagement.TenantsComponent" /* Tenants */,
                        defaultComponent: TenantsComponent,
                    },
                },
            },
        ],
    },
];
class TenantManagementRoutingModule {
}
TenantManagementRoutingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: TenantManagementRoutingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TenantManagementRoutingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: TenantManagementRoutingModule, imports: [i1$1.RouterModule], exports: [RouterModule] });
TenantManagementRoutingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: TenantManagementRoutingModule, imports: [[RouterModule.forChild(routes)], RouterModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: TenantManagementRoutingModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [RouterModule.forChild(routes)],
                    exports: [RouterModule],
                }]
        }] });

class TenantManagementModule {
    static forChild(options = {}) {
        return {
            ngModule: TenantManagementModule,
            providers: [
                {
                    provide: TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS,
                    useValue: options.entityActionContributors,
                },
                {
                    provide: TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS,
                    useValue: options.toolbarActionContributors,
                },
                {
                    provide: TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS,
                    useValue: options.entityPropContributors,
                },
                {
                    provide: TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS,
                    useValue: options.createFormPropContributors,
                },
                {
                    provide: TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS,
                    useValue: options.editFormPropContributors,
                },
                TenantManagementExtensionsGuard,
            ],
        };
    }
    static forLazy(options = {}) {
        return new LazyModuleFactory(TenantManagementModule.forChild(options));
    }
}
TenantManagementModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: TenantManagementModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TenantManagementModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: TenantManagementModule, declarations: [TenantsComponent], imports: [TenantManagementRoutingModule,
        NgxValidateCoreModule,
        CoreModule,
        ThemeSharedModule,
        NgbDropdownModule,
        FeatureManagementModule,
        UiExtensionsModule], exports: [TenantsComponent] });
TenantManagementModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: TenantManagementModule, imports: [[
            TenantManagementRoutingModule,
            NgxValidateCoreModule,
            CoreModule,
            ThemeSharedModule,
            NgbDropdownModule,
            FeatureManagementModule,
            UiExtensionsModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: TenantManagementModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TenantsComponent],
                    exports: [TenantsComponent],
                    imports: [
                        TenantManagementRoutingModule,
                        NgxValidateCoreModule,
                        CoreModule,
                        ThemeSharedModule,
                        NgbDropdownModule,
                        FeatureManagementModule,
                        UiExtensionsModule,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { DEFAULT_TENANT_MANAGEMENT_CREATE_FORM_PROPS, DEFAULT_TENANT_MANAGEMENT_EDIT_FORM_PROPS, DEFAULT_TENANT_MANAGEMENT_ENTITY_ACTIONS, DEFAULT_TENANT_MANAGEMENT_ENTITY_PROPS, DEFAULT_TENANT_MANAGEMENT_TOOLBAR_ACTIONS, TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS, TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS, TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS, TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS, TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS, TenantManagementExtensionsGuard, TenantManagementModule, TenantsComponent };
//# sourceMappingURL=abp-ng.tenant-management.mjs.map

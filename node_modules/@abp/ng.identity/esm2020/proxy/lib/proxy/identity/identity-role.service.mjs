import { RestService } from '@abp/ng.core';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@abp/ng.core";
export class IdentityRoleService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpIdentity';
        this.create = (input) => this.restService.request({
            method: 'POST',
            url: '/api/identity/roles',
            body: input,
        }, { apiName: this.apiName });
        this.delete = (id) => this.restService.request({
            method: 'DELETE',
            url: `/api/identity/roles/${id}`,
        }, { apiName: this.apiName });
        this.get = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity/roles/${id}`,
        }, { apiName: this.apiName });
        this.getAllList = () => this.restService.request({
            method: 'GET',
            url: '/api/identity/roles/all',
        }, { apiName: this.apiName });
        this.getList = (input) => this.restService.request({
            method: 'GET',
            url: '/api/identity/roles',
            params: { filter: input.filter, sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },
        }, { apiName: this.apiName });
        this.update = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity/roles/${id}`,
            body: input,
        }, { apiName: this.apiName });
    }
}
IdentityRoleService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: IdentityRoleService, deps: [{ token: i1.RestService }], target: i0.ɵɵFactoryTarget.Injectable });
IdentityRoleService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: IdentityRoleService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: IdentityRoleService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.RestService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlbnRpdHktcm9sZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvaWRlbnRpdHkvcHJveHkvc3JjL2xpYi9wcm94eS9pZGVudGl0eS9pZGVudGl0eS1yb2xlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUUzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7QUFLM0MsTUFBTSxPQUFPLG1CQUFtQjtJQWdEOUIsWUFBb0IsV0FBd0I7UUFBeEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUEvQzVDLFlBQU8sR0FBRyxhQUFhLENBQUM7UUFFeEIsV0FBTSxHQUFHLENBQUMsS0FBNEIsRUFBRSxFQUFFLENBQ3hDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUF1QjtZQUM3QyxNQUFNLEVBQUUsTUFBTTtZQUNkLEdBQUcsRUFBRSxxQkFBcUI7WUFDMUIsSUFBSSxFQUFFLEtBQUs7U0FDWixFQUNELEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBRTdCLFdBQU0sR0FBRyxDQUFDLEVBQVUsRUFBRSxFQUFFLENBQ3RCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFZO1lBQ2xDLE1BQU0sRUFBRSxRQUFRO1lBQ2hCLEdBQUcsRUFBRSx1QkFBdUIsRUFBRSxFQUFFO1NBQ2pDLEVBQ0QsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFFN0IsUUFBRyxHQUFHLENBQUMsRUFBVSxFQUFFLEVBQUUsQ0FDbkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQXVCO1lBQzdDLE1BQU0sRUFBRSxLQUFLO1lBQ2IsR0FBRyxFQUFFLHVCQUF1QixFQUFFLEVBQUU7U0FDakMsRUFDRCxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUU3QixlQUFVLEdBQUcsR0FBRyxFQUFFLENBQ2hCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFzQztZQUM1RCxNQUFNLEVBQUUsS0FBSztZQUNiLEdBQUcsRUFBRSx5QkFBeUI7U0FDL0IsRUFDRCxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUU3QixZQUFPLEdBQUcsQ0FBQyxLQUE0QixFQUFFLEVBQUUsQ0FDekMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQXVDO1lBQzdELE1BQU0sRUFBRSxLQUFLO1lBQ2IsR0FBRyxFQUFFLHFCQUFxQjtZQUMxQixNQUFNLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsRUFBRSxjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWMsRUFBRTtTQUMzSCxFQUNELEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBRTdCLFdBQU0sR0FBRyxDQUFDLEVBQVUsRUFBRSxLQUE0QixFQUFFLEVBQUUsQ0FDcEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQXVCO1lBQzdDLE1BQU0sRUFBRSxLQUFLO1lBQ2IsR0FBRyxFQUFFLHVCQUF1QixFQUFFLEVBQUU7WUFDaEMsSUFBSSxFQUFFLEtBQUs7U0FDWixFQUNELEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBRWtCLENBQUM7O2dIQWhEckMsbUJBQW1CO29IQUFuQixtQkFBbUIsY0FGbEIsTUFBTTsyRkFFUCxtQkFBbUI7a0JBSC9CLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBHZXRJZGVudGl0eVJvbGVzSW5wdXQsIElkZW50aXR5Um9sZUNyZWF0ZUR0bywgSWRlbnRpdHlSb2xlRHRvLCBJZGVudGl0eVJvbGVVcGRhdGVEdG8gfSBmcm9tICcuL21vZGVscyc7XHJcbmltcG9ydCB7IFJlc3RTZXJ2aWNlIH0gZnJvbSAnQGFicC9uZy5jb3JlJztcclxuaW1wb3J0IHR5cGUgeyBMaXN0UmVzdWx0RHRvLCBQYWdlZFJlc3VsdER0byB9IGZyb20gJ0BhYnAvbmcuY29yZSc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJZGVudGl0eVJvbGVTZXJ2aWNlIHtcclxuICBhcGlOYW1lID0gJ0FicElkZW50aXR5JztcclxuXHJcbiAgY3JlYXRlID0gKGlucHV0OiBJZGVudGl0eVJvbGVDcmVhdGVEdG8pID0+XHJcbiAgICB0aGlzLnJlc3RTZXJ2aWNlLnJlcXVlc3Q8YW55LCBJZGVudGl0eVJvbGVEdG8+KHtcclxuICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgIHVybDogJy9hcGkvaWRlbnRpdHkvcm9sZXMnLFxyXG4gICAgICBib2R5OiBpbnB1dCxcclxuICAgIH0sXHJcbiAgICB7IGFwaU5hbWU6IHRoaXMuYXBpTmFtZSB9KTtcclxuXHJcbiAgZGVsZXRlID0gKGlkOiBzdHJpbmcpID0+XHJcbiAgICB0aGlzLnJlc3RTZXJ2aWNlLnJlcXVlc3Q8YW55LCB2b2lkPih7XHJcbiAgICAgIG1ldGhvZDogJ0RFTEVURScsXHJcbiAgICAgIHVybDogYC9hcGkvaWRlbnRpdHkvcm9sZXMvJHtpZH1gLFxyXG4gICAgfSxcclxuICAgIHsgYXBpTmFtZTogdGhpcy5hcGlOYW1lIH0pO1xyXG5cclxuICBnZXQgPSAoaWQ6IHN0cmluZykgPT5cclxuICAgIHRoaXMucmVzdFNlcnZpY2UucmVxdWVzdDxhbnksIElkZW50aXR5Um9sZUR0bz4oe1xyXG4gICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICB1cmw6IGAvYXBpL2lkZW50aXR5L3JvbGVzLyR7aWR9YCxcclxuICAgIH0sXHJcbiAgICB7IGFwaU5hbWU6IHRoaXMuYXBpTmFtZSB9KTtcclxuXHJcbiAgZ2V0QWxsTGlzdCA9ICgpID0+XHJcbiAgICB0aGlzLnJlc3RTZXJ2aWNlLnJlcXVlc3Q8YW55LCBMaXN0UmVzdWx0RHRvPElkZW50aXR5Um9sZUR0bz4+KHtcclxuICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgdXJsOiAnL2FwaS9pZGVudGl0eS9yb2xlcy9hbGwnLFxyXG4gICAgfSxcclxuICAgIHsgYXBpTmFtZTogdGhpcy5hcGlOYW1lIH0pO1xyXG5cclxuICBnZXRMaXN0ID0gKGlucHV0OiBHZXRJZGVudGl0eVJvbGVzSW5wdXQpID0+XHJcbiAgICB0aGlzLnJlc3RTZXJ2aWNlLnJlcXVlc3Q8YW55LCBQYWdlZFJlc3VsdER0bzxJZGVudGl0eVJvbGVEdG8+Pih7XHJcbiAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgIHVybDogJy9hcGkvaWRlbnRpdHkvcm9sZXMnLFxyXG4gICAgICBwYXJhbXM6IHsgZmlsdGVyOiBpbnB1dC5maWx0ZXIsIHNvcnRpbmc6IGlucHV0LnNvcnRpbmcsIHNraXBDb3VudDogaW5wdXQuc2tpcENvdW50LCBtYXhSZXN1bHRDb3VudDogaW5wdXQubWF4UmVzdWx0Q291bnQgfSxcclxuICAgIH0sXHJcbiAgICB7IGFwaU5hbWU6IHRoaXMuYXBpTmFtZSB9KTtcclxuXHJcbiAgdXBkYXRlID0gKGlkOiBzdHJpbmcsIGlucHV0OiBJZGVudGl0eVJvbGVVcGRhdGVEdG8pID0+XHJcbiAgICB0aGlzLnJlc3RTZXJ2aWNlLnJlcXVlc3Q8YW55LCBJZGVudGl0eVJvbGVEdG8+KHtcclxuICAgICAgbWV0aG9kOiAnUFVUJyxcclxuICAgICAgdXJsOiBgL2FwaS9pZGVudGl0eS9yb2xlcy8ke2lkfWAsXHJcbiAgICAgIGJvZHk6IGlucHV0LFxyXG4gICAgfSxcclxuICAgIHsgYXBpTmFtZTogdGhpcy5hcGlOYW1lIH0pO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlc3RTZXJ2aWNlOiBSZXN0U2VydmljZSkge31cclxufVxyXG4iXX0=
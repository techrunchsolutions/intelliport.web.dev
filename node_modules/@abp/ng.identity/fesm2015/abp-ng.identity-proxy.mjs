import * as i0 from '@angular/core';
import { Injectable } from '@angular/core';
import * as i1 from '@abp/ng.core';

class IdentityRoleService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpIdentity';
        this.create = (input) => this.restService.request({
            method: 'POST',
            url: '/api/identity/roles',
            body: input,
        }, { apiName: this.apiName });
        this.delete = (id) => this.restService.request({
            method: 'DELETE',
            url: `/api/identity/roles/${id}`,
        }, { apiName: this.apiName });
        this.get = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity/roles/${id}`,
        }, { apiName: this.apiName });
        this.getAllList = () => this.restService.request({
            method: 'GET',
            url: '/api/identity/roles/all',
        }, { apiName: this.apiName });
        this.getList = (input) => this.restService.request({
            method: 'GET',
            url: '/api/identity/roles',
            params: { filter: input.filter, sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },
        }, { apiName: this.apiName });
        this.update = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity/roles/${id}`,
            body: input,
        }, { apiName: this.apiName });
    }
}
IdentityRoleService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: IdentityRoleService, deps: [{ token: i1.RestService }], target: i0.ɵɵFactoryTarget.Injectable });
IdentityRoleService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: IdentityRoleService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: IdentityRoleService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.RestService }]; } });

class IdentityUserLookupService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpIdentity';
        this.findById = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/lookup/${id}`,
        }, { apiName: this.apiName });
        this.findByUserName = (userName) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/lookup/by-username/${userName}`,
        }, { apiName: this.apiName });
        this.getCount = (input) => this.restService.request({
            method: 'GET',
            url: '/api/identity/users/lookup/count',
            params: { filter: input.filter },
        }, { apiName: this.apiName });
        this.search = (input) => this.restService.request({
            method: 'GET',
            url: '/api/identity/users/lookup/search',
            params: { filter: input.filter, sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },
        }, { apiName: this.apiName });
    }
}
IdentityUserLookupService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: IdentityUserLookupService, deps: [{ token: i1.RestService }], target: i0.ɵɵFactoryTarget.Injectable });
IdentityUserLookupService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: IdentityUserLookupService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: IdentityUserLookupService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.RestService }]; } });

class IdentityUserService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpIdentity';
        this.create = (input) => this.restService.request({
            method: 'POST',
            url: '/api/identity/users',
            body: input,
        }, { apiName: this.apiName });
        this.delete = (id) => this.restService.request({
            method: 'DELETE',
            url: `/api/identity/users/${id}`,
        }, { apiName: this.apiName });
        this.findByEmail = (email) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/by-email/${email}`,
        }, { apiName: this.apiName });
        this.findByUsername = (userName) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/by-username/${userName}`,
        }, { apiName: this.apiName });
        this.get = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/${id}`,
        }, { apiName: this.apiName });
        this.getAssignableRoles = () => this.restService.request({
            method: 'GET',
            url: '/api/identity/users/assignable-roles',
        }, { apiName: this.apiName });
        this.getList = (input) => this.restService.request({
            method: 'GET',
            url: '/api/identity/users',
            params: { filter: input.filter, sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },
        }, { apiName: this.apiName });
        this.getRoles = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/${id}/roles`,
        }, { apiName: this.apiName });
        this.update = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity/users/${id}`,
            body: input,
        }, { apiName: this.apiName });
        this.updateRoles = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity/users/${id}/roles`,
            body: input,
        }, { apiName: this.apiName });
    }
}
IdentityUserService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: IdentityUserService, deps: [{ token: i1.RestService }], target: i0.ɵɵFactoryTarget.Injectable });
IdentityUserService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: IdentityUserService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: IdentityUserService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.RestService }]; } });

/**
 * Generated bundle index. Do not edit.
 */

export { IdentityRoleService, IdentityUserLookupService, IdentityUserService };
//# sourceMappingURL=abp-ng.identity-proxy.mjs.map

import { SubscriptionService, uuid } from '@abp/ng.core';
import { Component, ContentChild, EventEmitter, Inject, Input, Optional, Output, TemplateRef, ViewChild, } from '@angular/core';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { fromEvent, Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged, filter, takeUntil } from 'rxjs/operators';
import { Confirmation } from '../../models/confirmation';
import { ConfirmationService } from '../../services/confirmation.service';
import { SUPPRESS_UNSAVED_CHANGES_WARNING } from '../../tokens/suppress-unsaved-changes-warning.token';
import { ButtonComponent } from '../button/button.component';
import { ModalRefService } from './modal-ref.service';
import * as i0 from "@angular/core";
import * as i1 from "../../services/confirmation.service";
import * as i2 from "@abp/ng.core";
import * as i3 from "@ng-bootstrap/ng-bootstrap";
import * as i4 from "./modal-ref.service";
import * as i5 from "@angular/common";
export class ModalComponent {
    constructor(confirmationService, subscription, suppressUnsavedChangesWarningToken, modal, modalRefService) {
        this.confirmationService = confirmationService;
        this.subscription = subscription;
        this.suppressUnsavedChangesWarningToken = suppressUnsavedChangesWarningToken;
        this.modal = modal;
        this.modalRefService = modalRefService;
        this.options = {};
        this.suppressUnsavedChangesWarning = this.suppressUnsavedChangesWarningToken;
        this.visibleChange = new EventEmitter();
        this.init = new EventEmitter();
        this.appear = new EventEmitter();
        this.disappear = new EventEmitter();
        this._visible = false;
        this._busy = false;
        this.isConfirmationOpen = false;
        this.destroy$ = new Subject();
        this.modalIdentifier = `modal-${uuid()}`;
        this.toggle$ = new Subject();
        this.initToggleStream();
    }
    get visible() {
        return this._visible;
    }
    set visible(value) {
        if (typeof value !== 'boolean')
            return;
        this.toggle$.next(value);
    }
    get busy() {
        return this._busy;
    }
    set busy(value) {
        if (this.abpSubmit && this.abpSubmit instanceof ButtonComponent) {
            this.abpSubmit.loading = value;
        }
        this._busy = value;
    }
    get modalWindowRef() {
        return document.querySelector(`ngb-modal-window.${this.modalIdentifier}`);
    }
    get isFormDirty() {
        return Boolean(this.modalWindowRef?.querySelector('.ng-dirty'));
    }
    ngOnInit() {
        this.modalRefService.register(this);
    }
    dismiss(mode) {
        switch (mode) {
            case 'hard':
                this.visible = false;
                break;
            case 'soft':
                this.close();
                break;
            default:
                break;
        }
    }
    initToggleStream() {
        this.subscription.addOne(this.toggle$.pipe(debounceTime(0), distinctUntilChanged()), value => this.toggle(value));
    }
    toggle(value) {
        this._visible = value;
        this.visibleChange.emit(value);
        if (!value) {
            this.modalRef?.dismiss();
            this.disappear.emit();
            this.destroy$.next();
            return;
        }
        setTimeout(() => this.listen(), 0);
        this.modalRef = this.modal.open(this.modalContent, {
            size: 'md',
            centered: false,
            keyboard: false,
            scrollable: true,
            beforeDismiss: () => {
                if (!this.visible)
                    return true;
                this.close();
                return !this.visible;
            },
            ...this.options,
            windowClass: `${this.options.windowClass || ''} ${this.modalIdentifier}`,
        });
        this.appear.emit();
    }
    ngOnDestroy() {
        this.modalRefService.unregister(this);
        this.toggle(false);
        this.destroy$.next();
    }
    close() {
        if (this.busy)
            return;
        if (this.isFormDirty && !this.suppressUnsavedChangesWarning) {
            if (this.isConfirmationOpen)
                return;
            this.isConfirmationOpen = true;
            this.confirmationService
                .warn('AbpUi::AreYouSureYouWantToCancelEditingWarningMessage', 'AbpUi::AreYouSure', { dismissible: false })
                .subscribe((status) => {
                this.isConfirmationOpen = false;
                if (status === Confirmation.Status.confirm) {
                    this.visible = false;
                }
            });
        }
        else {
            this.visible = false;
        }
    }
    listen() {
        if (this.modalWindowRef) {
            fromEvent(this.modalWindowRef, 'keyup')
                .pipe(takeUntil(this.destroy$), debounceTime(150), filter((key) => key && key.key === 'Escape'))
                .subscribe(() => this.close());
        }
        fromEvent(window, 'beforeunload')
            .pipe(takeUntil(this.destroy$))
            .subscribe(event => {
            // TODO: check this
            if (!this.isFormDirty || this.suppressUnsavedChangesWarning) {
                event.preventDefault();
            }
        });
        this.init.emit();
    }
}
ModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ModalComponent, deps: [{ token: i1.ConfirmationService }, { token: i2.SubscriptionService }, { token: SUPPRESS_UNSAVED_CHANGES_WARNING, optional: true }, { token: i3.NgbModal }, { token: i4.ModalRefService }], target: i0.ɵɵFactoryTarget.Component });
ModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: ModalComponent, selector: "abp-modal", inputs: { visible: "visible", busy: "busy", options: "options", suppressUnsavedChangesWarning: "suppressUnsavedChangesWarning" }, outputs: { visibleChange: "visibleChange", init: "init", appear: "appear", disappear: "disappear" }, providers: [SubscriptionService], queries: [{ propertyName: "abpHeader", first: true, predicate: ["abpHeader"], descendants: true }, { propertyName: "abpBody", first: true, predicate: ["abpBody"], descendants: true }, { propertyName: "abpFooter", first: true, predicate: ["abpFooter"], descendants: true }, { propertyName: "abpSubmit", first: true, predicate: ButtonComponent, descendants: true, read: ButtonComponent }], viewQueries: [{ propertyName: "modalContent", first: true, predicate: ["modalContent"], descendants: true }], ngImport: i0, template: "<ng-content></ng-content>\r\n\r\n<ng-template #modalContent let-modal>\r\n  <div *ngIf=\"abpHeader\" id=\"abp-modal-header\" class=\"modal-header\">\r\n    <ng-container *ngTemplateOutlet=\"abpHeader\"></ng-container>\r\n    \u200B\r\n    <button\r\n      id=\"abp-modal-close-button\"\r\n      type=\"button\"\r\n      class=\"btn-sm btn-close\"\r\n      aria-label=\"Close\"\r\n      (click)=\"modal.dismiss()\"\r\n    ></button>\r\n  </div>\r\n  <div *ngIf=\"abpBody\" id=\"abp-modal-body\" class=\"modal-body\">\r\n    <ng-container *ngTemplateOutlet=\"abpBody\"></ng-container>\r\n  </div>\r\n  <div *ngIf=\"abpFooter\" id=\"abp-modal-footer\" class=\"modal-footer\">\r\n    <ng-container *ngTemplateOutlet=\"abpFooter\"></ng-container>\r\n  </div>\r\n</ng-template>\r\n", styles: [".modal.show{display:block!important}.modal-backdrop{opacity:.8}.modal::-webkit-scrollbar{width:7px}.modal::-webkit-scrollbar-track{background:#ddd}.modal::-webkit-scrollbar-thumb{background:#8a8686}.modal-dialog{z-index:1050}\n"], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ModalComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-modal', providers: [SubscriptionService], template: "<ng-content></ng-content>\r\n\r\n<ng-template #modalContent let-modal>\r\n  <div *ngIf=\"abpHeader\" id=\"abp-modal-header\" class=\"modal-header\">\r\n    <ng-container *ngTemplateOutlet=\"abpHeader\"></ng-container>\r\n    \u200B\r\n    <button\r\n      id=\"abp-modal-close-button\"\r\n      type=\"button\"\r\n      class=\"btn-sm btn-close\"\r\n      aria-label=\"Close\"\r\n      (click)=\"modal.dismiss()\"\r\n    ></button>\r\n  </div>\r\n  <div *ngIf=\"abpBody\" id=\"abp-modal-body\" class=\"modal-body\">\r\n    <ng-container *ngTemplateOutlet=\"abpBody\"></ng-container>\r\n  </div>\r\n  <div *ngIf=\"abpFooter\" id=\"abp-modal-footer\" class=\"modal-footer\">\r\n    <ng-container *ngTemplateOutlet=\"abpFooter\"></ng-container>\r\n  </div>\r\n</ng-template>\r\n", styles: [".modal.show{display:block!important}.modal-backdrop{opacity:.8}.modal::-webkit-scrollbar{width:7px}.modal::-webkit-scrollbar-track{background:#ddd}.modal::-webkit-scrollbar-thumb{background:#8a8686}.modal-dialog{z-index:1050}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.ConfirmationService }, { type: i2.SubscriptionService }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [SUPPRESS_UNSAVED_CHANGES_WARNING]
                }] }, { type: i3.NgbModal }, { type: i4.ModalRefService }]; }, propDecorators: { visible: [{
                type: Input
            }], busy: [{
                type: Input
            }], options: [{
                type: Input
            }], suppressUnsavedChangesWarning: [{
                type: Input
            }], modalContent: [{
                type: ViewChild,
                args: ['modalContent']
            }], abpHeader: [{
                type: ContentChild,
                args: ['abpHeader', { static: false }]
            }], abpBody: [{
                type: ContentChild,
                args: ['abpBody', { static: false }]
            }], abpFooter: [{
                type: ContentChild,
                args: ['abpFooter', { static: false }]
            }], abpSubmit: [{
                type: ContentChild,
                args: [ButtonComponent, { static: false, read: ButtonComponent }]
            }], visibleChange: [{
                type: Output
            }], init: [{
                type: Output
            }], appear: [{
                type: Output
            }], disappear: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { DOCUMENT } from '@angular/common';
import { Directive, HostBinding, Inject, Input } from '@angular/core';
import { ColumnMode, DatatableComponent } from '@swimlane/ngx-datatable';
import { fromEvent, Subscription } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@swimlane/ngx-datatable";
export class NgxDatatableDefaultDirective {
    constructor(table, document) {
        this.table = table;
        this.document = document;
        this.subscription = new Subscription();
        this.resizeDiff = 0;
        this.class = 'material bordered';
        this.table.columnMode = ColumnMode.force;
        this.table.footerHeight = 50;
        this.table.headerHeight = 50;
        this.table.rowHeight = 'auto';
        this.table.scrollbarH = true;
        this.table.virtualization = false;
    }
    get classes() {
        return `ngx-datatable ${this.class}`;
    }
    fixHorizontalGap(scroller) {
        const { body, documentElement } = this.document;
        if (documentElement.scrollHeight !== documentElement.clientHeight) {
            if (this.resizeDiff === 0) {
                this.resizeDiff = window.innerWidth - body.offsetWidth;
                scroller.scrollWidth -= this.resizeDiff;
            }
        }
        else {
            scroller.scrollWidth += this.resizeDiff;
            this.resizeDiff = 0;
        }
    }
    fixStyleOnWindowResize() {
        // avoided @HostListener('window:resize') in favor of performance
        const subscription = fromEvent(window, 'resize')
            .pipe(debounceTime(500))
            .subscribe(() => {
            const { scroller } = this.table.bodyComponent;
            if (!scroller)
                return;
            this.fixHorizontalGap(scroller);
        });
        this.subscription.add(subscription);
    }
    ngAfterViewInit() {
        this.fixStyleOnWindowResize();
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
NgxDatatableDefaultDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: NgxDatatableDefaultDirective, deps: [{ token: i1.DatatableComponent }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });
NgxDatatableDefaultDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.6", type: NgxDatatableDefaultDirective, selector: "ngx-datatable[default]", inputs: { class: "class" }, host: { properties: { "class": "this.classes" } }, exportAs: ["ngxDatatableDefault"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: NgxDatatableDefaultDirective, decorators: [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: 'ngx-datatable[default]',
                    exportAs: 'ngxDatatableDefault',
                }]
        }], ctorParameters: function () { return [{ type: i1.DatatableComponent }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { class: [{
                type: Input
            }], classes: [{
                type: HostBinding,
                args: ['class']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWRhdGF0YWJsZS1kZWZhdWx0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3RoZW1lLXNoYXJlZC9zcmMvbGliL2RpcmVjdGl2ZXMvbmd4LWRhdGF0YWJsZS1kZWZhdWx0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFpQixTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDaEcsT0FBTyxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBcUIsTUFBTSx5QkFBeUIsQ0FBQztBQUM1RixPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQU85QyxNQUFNLE9BQU8sNEJBQTRCO0lBWXZDLFlBQW9CLEtBQXlCLEVBQTRCLFFBQXNCO1FBQTNFLFVBQUssR0FBTCxLQUFLLENBQW9CO1FBQTRCLGFBQVEsR0FBUixRQUFRLENBQWM7UUFYdkYsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRWxDLGVBQVUsR0FBRyxDQUFDLENBQUM7UUFFZCxVQUFLLEdBQUcsbUJBQW1CLENBQUM7UUFRbkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQztRQUN6QyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQztRQUM5QixJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDN0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO0lBQ3BDLENBQUM7SUFaRCxJQUNJLE9BQU87UUFDVCxPQUFPLGlCQUFpQixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDdkMsQ0FBQztJQVdPLGdCQUFnQixDQUFDLFFBQTJCO1FBQ2xELE1BQU0sRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUVoRCxJQUFJLGVBQWUsQ0FBQyxZQUFZLEtBQUssZUFBZSxDQUFDLFlBQVksRUFBRTtZQUNqRSxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssQ0FBQyxFQUFFO2dCQUN6QixJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztnQkFDdkQsUUFBUSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDO2FBQ3pDO1NBQ0Y7YUFBTTtZQUNMLFFBQVEsQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUN4QyxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztTQUNyQjtJQUNILENBQUM7SUFFTyxzQkFBc0I7UUFDNUIsaUVBQWlFO1FBQ2pFLE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDO2FBQzdDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDdkIsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUNkLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQztZQUU5QyxJQUFJLENBQUMsUUFBUTtnQkFBRSxPQUFPO1lBRXRCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztRQUVMLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2xDLENBQUM7O3lIQXhEVSw0QkFBNEIsb0RBWWdCLFFBQVE7NkdBWnBELDRCQUE0QjsyRkFBNUIsNEJBQTRCO2tCQUx4QyxTQUFTO21CQUFDO29CQUNULDhEQUE4RDtvQkFDOUQsUUFBUSxFQUFFLHdCQUF3QjtvQkFDbEMsUUFBUSxFQUFFLHFCQUFxQjtpQkFDaEM7OzBCQWFpRCxNQUFNOzJCQUFDLFFBQVE7NENBUHRELEtBQUs7c0JBQWIsS0FBSztnQkFHRixPQUFPO3NCQURWLFdBQVc7dUJBQUMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRGlyZWN0aXZlLCBIb3N0QmluZGluZywgSW5qZWN0LCBJbnB1dCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbHVtbk1vZGUsIERhdGF0YWJsZUNvbXBvbmVudCwgU2Nyb2xsZXJDb21wb25lbnQgfSBmcm9tICdAc3dpbWxhbmUvbmd4LWRhdGF0YWJsZSc7XHJcbmltcG9ydCB7IGZyb21FdmVudCwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGRlYm91bmNlVGltZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvZGlyZWN0aXZlLXNlbGVjdG9yXHJcbiAgc2VsZWN0b3I6ICduZ3gtZGF0YXRhYmxlW2RlZmF1bHRdJyxcclxuICBleHBvcnRBczogJ25neERhdGF0YWJsZURlZmF1bHQnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4RGF0YXRhYmxlRGVmYXVsdERpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XHJcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XHJcblxyXG4gIHByaXZhdGUgcmVzaXplRGlmZiA9IDA7XHJcblxyXG4gIEBJbnB1dCgpIGNsYXNzID0gJ21hdGVyaWFsIGJvcmRlcmVkJztcclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpXHJcbiAgZ2V0IGNsYXNzZXMoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBgbmd4LWRhdGF0YWJsZSAke3RoaXMuY2xhc3N9YDtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdGFibGU6IERhdGF0YWJsZUNvbXBvbmVudCwgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogTW9ja0RvY3VtZW50KSB7XHJcbiAgICB0aGlzLnRhYmxlLmNvbHVtbk1vZGUgPSBDb2x1bW5Nb2RlLmZvcmNlO1xyXG4gICAgdGhpcy50YWJsZS5mb290ZXJIZWlnaHQgPSA1MDtcclxuICAgIHRoaXMudGFibGUuaGVhZGVySGVpZ2h0ID0gNTA7XHJcbiAgICB0aGlzLnRhYmxlLnJvd0hlaWdodCA9ICdhdXRvJztcclxuICAgIHRoaXMudGFibGUuc2Nyb2xsYmFySCA9IHRydWU7XHJcbiAgICB0aGlzLnRhYmxlLnZpcnR1YWxpemF0aW9uID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGZpeEhvcml6b250YWxHYXAoc2Nyb2xsZXI6IFNjcm9sbGVyQ29tcG9uZW50KSB7XHJcbiAgICBjb25zdCB7IGJvZHksIGRvY3VtZW50RWxlbWVudCB9ID0gdGhpcy5kb2N1bWVudDtcclxuXHJcbiAgICBpZiAoZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCAhPT0gZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCkge1xyXG4gICAgICBpZiAodGhpcy5yZXNpemVEaWZmID09PSAwKSB7XHJcbiAgICAgICAgdGhpcy5yZXNpemVEaWZmID0gd2luZG93LmlubmVyV2lkdGggLSBib2R5Lm9mZnNldFdpZHRoO1xyXG4gICAgICAgIHNjcm9sbGVyLnNjcm9sbFdpZHRoIC09IHRoaXMucmVzaXplRGlmZjtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc2Nyb2xsZXIuc2Nyb2xsV2lkdGggKz0gdGhpcy5yZXNpemVEaWZmO1xyXG4gICAgICB0aGlzLnJlc2l6ZURpZmYgPSAwO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBmaXhTdHlsZU9uV2luZG93UmVzaXplKCkge1xyXG4gICAgLy8gYXZvaWRlZCBASG9zdExpc3RlbmVyKCd3aW5kb3c6cmVzaXplJykgaW4gZmF2b3Igb2YgcGVyZm9ybWFuY2VcclxuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGZyb21FdmVudCh3aW5kb3csICdyZXNpemUnKVxyXG4gICAgICAucGlwZShkZWJvdW5jZVRpbWUoNTAwKSlcclxuICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyBzY3JvbGxlciB9ID0gdGhpcy50YWJsZS5ib2R5Q29tcG9uZW50O1xyXG5cclxuICAgICAgICBpZiAoIXNjcm9sbGVyKSByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMuZml4SG9yaXpvbnRhbEdhcChzY3JvbGxlcik7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIHRoaXMuc3Vic2NyaXB0aW9uLmFkZChzdWJzY3JpcHRpb24pO1xyXG4gIH1cclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgdGhpcy5maXhTdHlsZU9uV2luZG93UmVzaXplKCk7XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBmaXg6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzIwMzUxXHJcbmludGVyZmFjZSBNb2NrRG9jdW1lbnQge1xyXG4gIGJvZHk6IE1vY2tCb2R5O1xyXG4gIGRvY3VtZW50RWxlbWVudDogTW9ja0RvY3VtZW50RWxlbWVudDtcclxufVxyXG5cclxuaW50ZXJmYWNlIE1vY2tCb2R5IHtcclxuICBvZmZzZXRXaWR0aDogbnVtYmVyO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgTW9ja0RvY3VtZW50RWxlbWVudCB7XHJcbiAgY2xpZW50SGVpZ2h0OiBudW1iZXI7XHJcbiAgc2Nyb2xsSGVpZ2h0OiBudW1iZXI7XHJcbn1cclxuIl19
import { LocalizationService } from '@abp/ng.core';
import { merge, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { EXTRA_PROPERTIES_KEY } from '../constants/extra-properties';
export function createEnum(members) {
    const enumObject = {};
    members.forEach(({ name = '', value }) => {
        enumObject[(enumObject[name] = value)] = name;
    });
    return enumObject;
}
export function createEnumValueResolver(enumType, lookupEnum, propName) {
    return data => {
        const value = data.record[EXTRA_PROPERTIES_KEY][propName];
        const key = lookupEnum.transformed[value];
        const l10n = data.getInjected(LocalizationService);
        const localizeEnum = createEnumLocalizer(l10n, enumType, lookupEnum);
        return createLocalizationStream(l10n, localizeEnum(key));
    };
}
export function createEnumOptions(enumType, lookupEnum) {
    return data => {
        const l10n = data.getInjected(LocalizationService);
        const localizeEnum = createEnumLocalizer(l10n, enumType, lookupEnum);
        return createLocalizationStream(l10n, lookupEnum.fields.map(({ name = '', value }) => ({
            key: localizeEnum(name),
            value,
        })));
    };
}
function createLocalizationStream(l10n, mapTarget) {
    return merge(of(null), l10n.languageChange$).pipe(map(() => mapTarget));
}
function createEnumLocalizer(l10n, enumType, lookupEnum) {
    const resource = lookupEnum.localizationResource;
    const shortType = getShortEnumType(enumType);
    return key => l10n.localizeWithFallbackSync([resource || ''], ['Enum:' + shortType + '.' + key, shortType + '.' + key, key], key);
}
function getShortEnumType(enumType) {
    return enumType.split('.').pop();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW51bS51dGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvdGhlbWUtc2hhcmVkL2V4dGVuc2lvbnMvc3JjL2xpYi91dGlscy9lbnVtLnV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFPLG1CQUFtQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3hELE9BQU8sRUFBRSxLQUFLLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUlyRSxNQUFNLFVBQVUsVUFBVSxDQUFDLE9BQWlEO0lBQzFFLE1BQU0sVUFBVSxHQUFRLEVBQUUsQ0FBQztJQUUzQixPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxJQUFJLEdBQUcsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDdkMsVUFBVSxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQVksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBQ3ZELENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxVQUFVLENBQUM7QUFDcEIsQ0FBQztBQUVELE1BQU0sVUFBVSx1QkFBdUIsQ0FDckMsUUFBZ0IsRUFDaEIsVUFBNkMsRUFDN0MsUUFBZ0I7SUFFaEIsT0FBTyxJQUFJLENBQUMsRUFBRTtRQUNaLE1BQU0sS0FBSyxHQUFJLElBQUksQ0FBQyxNQUFjLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuRSxNQUFNLEdBQUcsR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUNuRCxNQUFNLFlBQVksR0FBRyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRXJFLE9BQU8sd0JBQXdCLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQy9CLFFBQWdCLEVBQ2hCLFVBQTZDO0lBRTdDLE9BQU8sSUFBSSxDQUFDLEVBQUU7UUFDWixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDbkQsTUFBTSxZQUFZLEdBQUcsbUJBQW1CLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUVyRSxPQUFPLHdCQUF3QixDQUM3QixJQUFJLEVBQ0osVUFBVSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksR0FBRyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDL0MsR0FBRyxFQUFFLFlBQVksQ0FBQyxJQUFJLENBQUM7WUFDdkIsS0FBSztTQUNOLENBQUMsQ0FBQyxDQUNKLENBQUM7SUFDSixDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyx3QkFBd0IsQ0FBQyxJQUF5QixFQUFFLFNBQWM7SUFDekUsT0FBTyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDMUUsQ0FBQztBQUVELFNBQVMsbUJBQW1CLENBQzFCLElBQXlCLEVBQ3pCLFFBQWdCLEVBQ2hCLFVBQTZDO0lBRTdDLE1BQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQztJQUNqRCxNQUFNLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUU3QyxPQUFPLEdBQUcsQ0FBQyxFQUFFLENBQ1gsSUFBSSxDQUFDLHdCQUF3QixDQUMzQixDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUMsRUFDaEIsQ0FBQyxPQUFPLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsU0FBUyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQzdELEdBQUcsQ0FDSixDQUFDO0FBQ04sQ0FBQztBQUVELFNBQVMsZ0JBQWdCLENBQUMsUUFBZ0I7SUFDeEMsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ25DLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBQlAsIExvY2FsaXphdGlvblNlcnZpY2UgfSBmcm9tICdAYWJwL25nLmNvcmUnO1xyXG5pbXBvcnQgeyBtZXJnZSwgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBFWFRSQV9QUk9QRVJUSUVTX0tFWSB9IGZyb20gJy4uL2NvbnN0YW50cy9leHRyYS1wcm9wZXJ0aWVzJztcclxuaW1wb3J0IHsgT2JqZWN0RXh0ZW5zaW9ucyB9IGZyb20gJy4uL21vZGVscy9vYmplY3QtZXh0ZW5zaW9ucyc7XHJcbmltcG9ydCB7IFByb3BDYWxsYmFjayB9IGZyb20gJy4uL21vZGVscy9wcm9wcyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRW51bShtZW1iZXJzOiBPYmplY3RFeHRlbnNpb25zLkV4dGVuc2lvbkVudW1GaWVsZER0b1tdKSB7XHJcbiAgY29uc3QgZW51bU9iamVjdDogYW55ID0ge307XHJcblxyXG4gIG1lbWJlcnMuZm9yRWFjaCgoeyBuYW1lID0gJycsIHZhbHVlIH0pID0+IHtcclxuICAgIGVudW1PYmplY3RbKGVudW1PYmplY3RbbmFtZV0gPSB2YWx1ZSBhcyBhbnkpXSA9IG5hbWU7XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBlbnVtT2JqZWN0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRW51bVZhbHVlUmVzb2x2ZXI8VCA9IGFueT4oXHJcbiAgZW51bVR5cGU6IHN0cmluZyxcclxuICBsb29rdXBFbnVtOiBPYmplY3RFeHRlbnNpb25zLkV4dGVuc2lvbkVudW1EdG8sXHJcbiAgcHJvcE5hbWU6IHN0cmluZyxcclxuKTogUHJvcENhbGxiYWNrPFQsIE9ic2VydmFibGU8c3RyaW5nPj4ge1xyXG4gIHJldHVybiBkYXRhID0+IHtcclxuICAgIGNvbnN0IHZhbHVlID0gKGRhdGEucmVjb3JkIGFzIGFueSlbRVhUUkFfUFJPUEVSVElFU19LRVldW3Byb3BOYW1lXTtcclxuICAgIGNvbnN0IGtleSA9IGxvb2t1cEVudW0udHJhbnNmb3JtZWRbdmFsdWVdO1xyXG4gICAgY29uc3QgbDEwbiA9IGRhdGEuZ2V0SW5qZWN0ZWQoTG9jYWxpemF0aW9uU2VydmljZSk7XHJcbiAgICBjb25zdCBsb2NhbGl6ZUVudW0gPSBjcmVhdGVFbnVtTG9jYWxpemVyKGwxMG4sIGVudW1UeXBlLCBsb29rdXBFbnVtKTtcclxuXHJcbiAgICByZXR1cm4gY3JlYXRlTG9jYWxpemF0aW9uU3RyZWFtKGwxMG4sIGxvY2FsaXplRW51bShrZXkpKTtcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRW51bU9wdGlvbnM8VCA9IGFueT4oXHJcbiAgZW51bVR5cGU6IHN0cmluZyxcclxuICBsb29rdXBFbnVtOiBPYmplY3RFeHRlbnNpb25zLkV4dGVuc2lvbkVudW1EdG8sXHJcbik6IFByb3BDYWxsYmFjazxULCBPYnNlcnZhYmxlPEFCUC5PcHRpb248YW55PltdPj4ge1xyXG4gIHJldHVybiBkYXRhID0+IHtcclxuICAgIGNvbnN0IGwxMG4gPSBkYXRhLmdldEluamVjdGVkKExvY2FsaXphdGlvblNlcnZpY2UpO1xyXG4gICAgY29uc3QgbG9jYWxpemVFbnVtID0gY3JlYXRlRW51bUxvY2FsaXplcihsMTBuLCBlbnVtVHlwZSwgbG9va3VwRW51bSk7XHJcblxyXG4gICAgcmV0dXJuIGNyZWF0ZUxvY2FsaXphdGlvblN0cmVhbShcclxuICAgICAgbDEwbixcclxuICAgICAgbG9va3VwRW51bS5maWVsZHMubWFwKCh7IG5hbWUgPSAnJywgdmFsdWUgfSkgPT4gKHtcclxuICAgICAgICBrZXk6IGxvY2FsaXplRW51bShuYW1lKSxcclxuICAgICAgICB2YWx1ZSxcclxuICAgICAgfSkpLFxyXG4gICAgKTtcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVMb2NhbGl6YXRpb25TdHJlYW0obDEwbjogTG9jYWxpemF0aW9uU2VydmljZSwgbWFwVGFyZ2V0OiBhbnkpIHtcclxuICByZXR1cm4gbWVyZ2Uob2YobnVsbCksIGwxMG4ubGFuZ3VhZ2VDaGFuZ2UkKS5waXBlKG1hcCgoKSA9PiBtYXBUYXJnZXQpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlRW51bUxvY2FsaXplcihcclxuICBsMTBuOiBMb2NhbGl6YXRpb25TZXJ2aWNlLFxyXG4gIGVudW1UeXBlOiBzdHJpbmcsXHJcbiAgbG9va3VwRW51bTogT2JqZWN0RXh0ZW5zaW9ucy5FeHRlbnNpb25FbnVtRHRvLFxyXG4pOiAoa2V5OiBzdHJpbmcpID0+IHN0cmluZyB7XHJcbiAgY29uc3QgcmVzb3VyY2UgPSBsb29rdXBFbnVtLmxvY2FsaXphdGlvblJlc291cmNlO1xyXG4gIGNvbnN0IHNob3J0VHlwZSA9IGdldFNob3J0RW51bVR5cGUoZW51bVR5cGUpO1xyXG5cclxuICByZXR1cm4ga2V5ID0+XHJcbiAgICBsMTBuLmxvY2FsaXplV2l0aEZhbGxiYWNrU3luYyhcclxuICAgICAgW3Jlc291cmNlIHx8ICcnXSxcclxuICAgICAgWydFbnVtOicgKyBzaG9ydFR5cGUgKyAnLicgKyBrZXksIHNob3J0VHlwZSArICcuJyArIGtleSwga2V5XSxcclxuICAgICAga2V5LFxyXG4gICAgKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0U2hvcnRFbnVtVHlwZShlbnVtVHlwZTogc3RyaW5nKSB7XHJcbiAgcmV0dXJuIGVudW1UeXBlLnNwbGl0KCcuJykucG9wKCk7XHJcbn1cclxuIl19
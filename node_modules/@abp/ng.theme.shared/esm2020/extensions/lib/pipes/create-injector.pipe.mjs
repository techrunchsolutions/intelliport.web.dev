import { Pipe } from '@angular/core';
import { EXTENSIONS_ACTION_CALLBACK, EXTENSIONS_ACTION_DATA } from '../tokens/extensions.token';
import * as i0 from "@angular/core";
export class CreateInjectorPipe {
    transform(_, action, context) {
        const get = (token, notFoundValue, flags) => {
            const componentData = context.getData();
            const componentDataCallback = data => {
                data = data ?? context.getData();
                return action.action(data);
            };
            let extensionData;
            switch (token) {
                case EXTENSIONS_ACTION_DATA:
                    extensionData = componentData;
                    break;
                case EXTENSIONS_ACTION_CALLBACK:
                    extensionData = componentDataCallback;
                    break;
                default:
                    extensionData = context.getInjected.call(context.injector, token, notFoundValue, flags);
            }
            return extensionData;
        };
        return { get };
    }
}
CreateInjectorPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: CreateInjectorPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
CreateInjectorPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: CreateInjectorPipe, name: "createInjector" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: CreateInjectorPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'createInjector',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWluamVjdG9yLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy90aGVtZS1zaGFyZWQvZXh0ZW5zaW9ucy9zcmMvbGliL3BpcGVzL2NyZWF0ZS1pbmplY3Rvci5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBeUMsSUFBSSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUVqRyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7QUFLaEcsTUFBTSxPQUFPLGtCQUFrQjtJQUN0QixTQUFTLENBQ2QsQ0FBTSxFQUNOLE1BQTJCLEVBQzNCLE9BQWlDO1FBRWpDLE1BQU0sR0FBRyxHQUFHLENBQUksS0FBa0MsRUFBRSxhQUFpQixFQUFFLEtBQW1CLEVBQUUsRUFBRTtZQUM1RixNQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDeEMsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsRUFBRTtnQkFDbkMsSUFBSSxHQUFHLElBQUksSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQ2pDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM3QixDQUFDLENBQUM7WUFDRixJQUFJLGFBQWEsQ0FBQztZQUNsQixRQUFRLEtBQUssRUFBRTtnQkFDYixLQUFLLHNCQUFzQjtvQkFDekIsYUFBYSxHQUFHLGFBQWEsQ0FBQztvQkFDOUIsTUFBTTtnQkFDUixLQUFLLDBCQUEwQjtvQkFDN0IsYUFBYSxHQUFHLHFCQUFxQixDQUFDO29CQUN0QyxNQUFNO2dCQUNSO29CQUNFLGFBQWEsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDM0Y7WUFDRCxPQUFPLGFBQWEsQ0FBQztRQUN2QixDQUFDLENBQUM7UUFDRixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUM7SUFDakIsQ0FBQzs7K0dBMUJVLGtCQUFrQjs2R0FBbEIsa0JBQWtCOzJGQUFsQixrQkFBa0I7a0JBSDlCLElBQUk7bUJBQUM7b0JBQ0osSUFBSSxFQUFFLGdCQUFnQjtpQkFDdkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RGbGFncywgSW5qZWN0aW9uVG9rZW4sIEluamVjdG9yLCBQaXBlLCBQaXBlVHJhbnNmb3JtLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEhhc0NyZWF0ZUluamVjdG9yUGlwZSwgVG9vbGJhckNvbXBvbmVudCB9IGZyb20gJy4uL21vZGVscy90b29sYmFyLWFjdGlvbnMnO1xyXG5pbXBvcnQgeyBFWFRFTlNJT05TX0FDVElPTl9DQUxMQkFDSywgRVhURU5TSU9OU19BQ1RJT05fREFUQSB9IGZyb20gJy4uL3Rva2Vucy9leHRlbnNpb25zLnRva2VuJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnY3JlYXRlSW5qZWN0b3InLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ3JlYXRlSW5qZWN0b3JQaXBlPFI+IGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgcHVibGljIHRyYW5zZm9ybShcclxuICAgIF86IGFueSxcclxuICAgIGFjdGlvbjogVG9vbGJhckNvbXBvbmVudDxSPixcclxuICAgIGNvbnRleHQ6IEhhc0NyZWF0ZUluamVjdG9yUGlwZTxSPixcclxuICApOiBJbmplY3RvciB7XHJcbiAgICBjb25zdCBnZXQgPSA8VD4odG9rZW46IFR5cGU8VD4gfCBJbmplY3Rpb25Ub2tlbjxUPiwgbm90Rm91bmRWYWx1ZT86IFQsIGZsYWdzPzogSW5qZWN0RmxhZ3MpID0+IHtcclxuICAgICAgY29uc3QgY29tcG9uZW50RGF0YSA9IGNvbnRleHQuZ2V0RGF0YSgpO1xyXG4gICAgICBjb25zdCBjb21wb25lbnREYXRhQ2FsbGJhY2sgPSBkYXRhID0+IHtcclxuICAgICAgICBkYXRhID0gZGF0YSA/PyBjb250ZXh0LmdldERhdGEoKTtcclxuICAgICAgICByZXR1cm4gYWN0aW9uLmFjdGlvbihkYXRhKTtcclxuICAgICAgfTtcclxuICAgICAgbGV0IGV4dGVuc2lvbkRhdGE7XHJcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcclxuICAgICAgICBjYXNlIEVYVEVOU0lPTlNfQUNUSU9OX0RBVEE6XHJcbiAgICAgICAgICBleHRlbnNpb25EYXRhID0gY29tcG9uZW50RGF0YTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgRVhURU5TSU9OU19BQ1RJT05fQ0FMTEJBQ0s6XHJcbiAgICAgICAgICBleHRlbnNpb25EYXRhID0gY29tcG9uZW50RGF0YUNhbGxiYWNrO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIGV4dGVuc2lvbkRhdGEgPSBjb250ZXh0LmdldEluamVjdGVkLmNhbGwoY29udGV4dC5pbmplY3RvciwgdG9rZW4sIG5vdEZvdW5kVmFsdWUsIGZsYWdzKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZXh0ZW5zaW9uRGF0YTtcclxuICAgIH07XHJcbiAgICByZXR1cm4geyBnZXQgfTtcclxuICB9XHJcbn1cclxuIl19
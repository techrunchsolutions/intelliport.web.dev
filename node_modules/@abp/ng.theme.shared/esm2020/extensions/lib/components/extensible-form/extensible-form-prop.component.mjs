import { AbpValidators, ConfigStateService, TrackByService } from '@abp/ng.core';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, Optional, SkipSelf, ViewChild, } from '@angular/core';
import { ControlContainer, FormGroupDirective, Validators, } from '@angular/forms';
import { NgbDateAdapter, NgbTimeAdapter } from '@ng-bootstrap/ng-bootstrap';
import { of } from 'rxjs';
import { debounceTime, distinctUntilChanged, switchMap } from 'rxjs/operators';
import { DateAdapter } from '../../adapters/date.adapter';
import { TimeAdapter } from '../../adapters/time.adapter';
import { EXTRA_PROPERTIES_KEY } from '../../constants/extra-properties';
import { FormProp } from '../../models/form-props';
import { PropData } from '../../models/props';
import { selfFactory } from '../../utils/factory.util';
import { addTypeaheadTextSuffix } from '../../utils/typeahead.util';
import * as i0 from "@angular/core";
import * as i1 from "@abp/ng.core";
import * as i2 from "@angular/forms";
import * as i3 from "@ng-bootstrap/ng-bootstrap";
import * as i4 from "../date-time-picker/date-time-picker.component";
import * as i5 from "@angular/common";
import * as i6 from "@ngx-validate/core";
import * as i7 from "../../directives/disabled.directive";
export class ExtensibleFormPropComponent {
    constructor(cdRef, track, configState, groupDirective) {
        this.cdRef = cdRef;
        this.track = track;
        this.configState = configState;
        this.asterisk = '';
        this.options$ = of([]);
        this.validators = [];
        this.search = (text$) => text$
            ? text$.pipe(debounceTime(300), distinctUntilChanged(), switchMap(text => this.prop.options(this.data, text)))
            : of([]);
        this.typeaheadFormatter = (option) => option.key;
        this.form = groupDirective.form;
    }
    setTypeaheadValue(selectedOption) {
        this.typeaheadModel = selectedOption || { key: null, value: null };
        const { key, value } = this.typeaheadModel;
        const [keyControl, valueControl] = this.getTypeaheadControls();
        if (valueControl?.value && !value)
            valueControl.markAsDirty();
        keyControl?.setValue(key);
        valueControl?.setValue(value);
    }
    get meridian() {
        return (this.configState.getDeep('localization.currentCulture.dateTimeFormat.shortTimePattern') || '').includes('tt');
    }
    get isInvalid() {
        const control = this.form.get(this.prop.name);
        return control.touched && control.invalid;
    }
    getTypeaheadControls() {
        const { name } = this.prop;
        const extraPropName = `${EXTRA_PROPERTIES_KEY}.${name}`;
        const keyControl = this.form.get(addTypeaheadTextSuffix(extraPropName)) ||
            this.form.get(addTypeaheadTextSuffix(name));
        const valueControl = this.form.get(extraPropName) || this.form.get(name);
        return [keyControl, valueControl];
    }
    setAsterisk() {
        this.asterisk = this.validators.some(isRequired) ? '*' : '';
    }
    ngAfterViewInit() {
        if (this.first && this.fieldRef) {
            this.fieldRef.nativeElement.focus();
        }
    }
    getComponent(prop) {
        switch (prop.type) {
            case "boolean" /* Boolean */:
                return 'checkbox';
            case "date" /* Date */:
                return 'date';
            case "datetime" /* DateTime */:
                return 'dateTime';
            case "hidden" /* Hidden */:
                return 'hidden';
            case "multiselect" /* MultiSelect */:
                return 'multiselect';
            case "text" /* Text */:
                return 'textarea';
            case "time" /* Time */:
                return 'time';
            case "typeahead" /* Typeahead */:
                return 'typeahead';
            default:
                return prop.options ? 'select' : 'input';
        }
    }
    getType(prop) {
        switch (prop.type) {
            case "date" /* Date */:
            case "string" /* String */:
                return 'text';
            case "boolean" /* Boolean */:
                return 'checkbox';
            case "number" /* Number */:
                return 'number';
            case "email" /* Email */:
                return 'email';
            case "password" /* Password */:
                return 'password';
            default:
                return 'hidden';
        }
    }
    ngOnChanges({ prop }) {
        const currentProp = prop?.currentValue;
        const { options, readonly, disabled, validators } = currentProp || {};
        if (options)
            this.options$ = options(this.data);
        if (readonly)
            this.readonly = readonly(this.data);
        if (disabled)
            this.disabled = disabled(this.data);
        if (validators) {
            this.validators = validators(this.data);
            this.setAsterisk();
        }
        const [keyControl, valueControl] = this.getTypeaheadControls();
        if (keyControl && valueControl)
            this.typeaheadModel = { key: keyControl.value, value: valueControl.value };
    }
}
ExtensibleFormPropComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ExtensibleFormPropComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.TrackByService }, { token: i1.ConfigStateService }, { token: i2.FormGroupDirective }], target: i0.ɵɵFactoryTarget.Component });
ExtensibleFormPropComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: ExtensibleFormPropComponent, selector: "abp-extensible-form-prop", inputs: { data: "data", prop: "prop", first: "first" }, viewQueries: [{ propertyName: "fieldRef", first: true, predicate: ["field"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div\r\n  class=\"mb-3 form-group\"\r\n  *abpPermission=\"prop.permission; runChangeDetection: false\"\r\n  [ngSwitch]=\"getComponent(prop)\"\r\n>\r\n  <ng-template ngSwitchCase=\"input\">\r\n    <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n    <input\r\n      #field\r\n      [id]=\"prop.id\"\r\n      [formControlName]=\"prop.name\"\r\n      [autocomplete]=\"prop.autocomplete\"\r\n      [type]=\"getType(prop)\"\r\n      [abpDisabled]=\"disabled\"\r\n      [readonly]=\"readonly\"\r\n      class=\"form-control\"\r\n    />\r\n  </ng-template>\r\n\r\n  <ng-template ngSwitchCase=\"hidden\">\r\n    <input [formControlName]=\"prop.name\" type=\"hidden\" />\r\n  </ng-template>\r\n\r\n  <ng-template ngSwitchCase=\"checkbox\">\r\n    <div class=\"form-check\" validationTarget>\r\n      <input\r\n        #field\r\n        [id]=\"prop.id\"\r\n        [formControlName]=\"prop.name\"\r\n        [abpDisabled]=\"disabled\"\r\n        type=\"checkbox\"\r\n        class=\"form-check-input\"\r\n      />\r\n      <ng-template\r\n        [ngTemplateOutlet]=\"label\"\r\n        [ngTemplateOutletContext]=\"{ $implicit: 'form-check-label' }\"\r\n      ></ng-template>\r\n    </div>\r\n  </ng-template>\r\n\r\n  <ng-template ngSwitchCase=\"select\">\r\n    <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n    <select\r\n      #field\r\n      [id]=\"prop.id\"\r\n      [formControlName]=\"prop.name\"\r\n      [abpDisabled]=\"disabled\"\r\n      class=\"form-select form-control\"\r\n    >\r\n      <option\r\n        *ngFor=\"let option of options$ | async; trackBy: track.by('value')\"\r\n        [ngValue]=\"option.value\"\r\n      >\r\n        {{ option.key }}\r\n      </option>\r\n    </select>\r\n  </ng-template>\r\n\r\n  <ng-template ngSwitchCase=\"multiselect\">\r\n    <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n    <select\r\n      #field\r\n      [id]=\"prop.id\"\r\n      [formControlName]=\"prop.name\"\r\n      [abpDisabled]=\"disabled\"\r\n      multiple=\"multiple\"\r\n      class=\"form-select form-control\"\r\n    >\r\n      <option\r\n        *ngFor=\"let option of options$ | async; trackBy: track.by('value')\"\r\n        [ngValue]=\"option.value\"\r\n      >\r\n        {{ option.key }}\r\n      </option>\r\n    </select>\r\n  </ng-template>\r\n\r\n  <ng-template ngSwitchCase=\"typeahead\">\r\n    <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n    <div #typeahead class=\"position-relative\" validationStyle validationTarget>\r\n      <input\r\n        #field\r\n        [id]=\"prop.id\"\r\n        [autocomplete]=\"prop.autocomplete\"\r\n        [abpDisabled]=\"disabled\"\r\n        [ngbTypeahead]=\"search\"\r\n        [editable]=\"false\"\r\n        [inputFormatter]=\"typeaheadFormatter\"\r\n        [resultFormatter]=\"typeaheadFormatter\"\r\n        [ngModelOptions]=\"{ standalone: true }\"\r\n        [(ngModel)]=\"typeaheadModel\"\r\n        (selectItem)=\"setTypeaheadValue($event.item)\"\r\n        (blur)=\"setTypeaheadValue(typeaheadModel)\"\r\n        [class.is-invalid]=\"typeahead.classList.contains('is-invalid')\"\r\n        class=\"form-control\"\r\n      />\r\n      <input [formControlName]=\"prop.name\" type=\"hidden\" />\r\n    </div>\r\n  </ng-template>\r\n\r\n  <ng-template ngSwitchCase=\"date\">\r\n    <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n    <input\r\n      [id]=\"prop.id\"\r\n      [formControlName]=\"prop.name\"\r\n      (click)=\"datepicker.open()\"\r\n      (keyup.space)=\"datepicker.open()\"\r\n      ngbDatepicker\r\n      #datepicker=\"ngbDatepicker\"\r\n      type=\"text\"\r\n      class=\"form-control\"\r\n    />\r\n  </ng-template>\r\n\r\n  <ng-template ngSwitchCase=\"time\">\r\n    <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n    <ngb-timepicker [formControlName]=\"prop.name\"></ngb-timepicker>\r\n  </ng-template>\r\n\r\n  <ng-template ngSwitchCase=\"dateTime\">\r\n    <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n    <abp-date-time-picker [prop]=\"prop\" [meridian]=\"meridian\"></abp-date-time-picker>\r\n  </ng-template>\r\n\r\n  <ng-template ngSwitchCase=\"textarea\">\r\n    <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n    <textarea\r\n      #field\r\n      [id]=\"prop.id\"\r\n      [formControlName]=\"prop.name\"\r\n      [abpDisabled]=\"disabled\"\r\n      [readonly]=\"readonly\"\r\n      class=\"form-control\"\r\n    ></textarea>\r\n  </ng-template>\r\n</div>\r\n\r\n<ng-template #label let-classes>\r\n  <label [htmlFor]=\"prop.id\" [ngClass]=\"classes || 'form-label'\"\r\n    >{{ prop.displayName | abpLocalization }} {{ asterisk }}</label\r\n  >\r\n</ng-template>\r\n", components: [{ type: i3.NgbTimepicker, selector: "ngb-timepicker", inputs: ["meridian", "spinners", "seconds", "hourStep", "minuteStep", "secondStep", "readonlyInputs", "size"] }, { type: i4.DateTimePickerComponent, selector: "abp-date-time-picker", inputs: ["prop", "meridian"], exportAs: ["abpDateTimePicker"] }], directives: [{ type: i1.PermissionDirective, selector: "[abpPermission]", inputs: ["abpPermission", "abpPermissionRunChangeDetection"] }, { type: i5.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i5.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i5.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: i6.ValidationDirective, selector: "[formControl],[formControlName]", exportAs: ["validationDirective"] }, { type: i7.DisabledDirective, selector: "[abpDisabled]", inputs: ["abpDisabled"] }, { type: i6.ValidationTargetDirective, selector: "[validationTarget]", exportAs: ["validationTarget"] }, { type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { type: i2.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { type: i2.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { type: i2.SelectMultipleControlValueAccessor, selector: "select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]", inputs: ["compareWith"] }, { type: i6.ValidationStyleDirective, selector: "[validationStyle]", exportAs: ["validationStyle"] }, { type: i3.NgbTypeahead, selector: "input[ngbTypeahead]", inputs: ["autocomplete", "container", "editable", "focusFirst", "inputFormatter", "ngbTypeahead", "resultFormatter", "resultTemplate", "showHint", "placement", "popupClass"], outputs: ["selectItem"], exportAs: ["ngbTypeahead"] }, { type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3.NgbInputDatepicker, selector: "input[ngbDatepicker]", inputs: ["autoClose", "datepickerClass", "dayTemplate", "dayTemplateData", "displayMonths", "firstDayOfWeek", "footerTemplate", "markDisabled", "minDate", "maxDate", "navigation", "outsideDays", "placement", "restoreFocus", "showWeekNumbers", "startDate", "container", "positionTarget", "weekdays", "disabled"], outputs: ["dateSelect", "navigate", "closed"], exportAs: ["ngbDatepicker"] }, { type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "async": i5.AsyncPipe, "abpLocalization": i1.LocalizationPipe }, viewProviders: [
        {
            provide: ControlContainer,
            useFactory: selfFactory,
            deps: [[new Optional(), new SkipSelf(), ControlContainer]],
        },
        { provide: NgbDateAdapter, useClass: DateAdapter },
        { provide: NgbTimeAdapter, useClass: TimeAdapter },
    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ExtensibleFormPropComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-extensible-form-prop', changeDetection: ChangeDetectionStrategy.OnPush, viewProviders: [
                        {
                            provide: ControlContainer,
                            useFactory: selfFactory,
                            deps: [[new Optional(), new SkipSelf(), ControlContainer]],
                        },
                        { provide: NgbDateAdapter, useClass: DateAdapter },
                        { provide: NgbTimeAdapter, useClass: TimeAdapter },
                    ], template: "<div\r\n  class=\"mb-3 form-group\"\r\n  *abpPermission=\"prop.permission; runChangeDetection: false\"\r\n  [ngSwitch]=\"getComponent(prop)\"\r\n>\r\n  <ng-template ngSwitchCase=\"input\">\r\n    <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n    <input\r\n      #field\r\n      [id]=\"prop.id\"\r\n      [formControlName]=\"prop.name\"\r\n      [autocomplete]=\"prop.autocomplete\"\r\n      [type]=\"getType(prop)\"\r\n      [abpDisabled]=\"disabled\"\r\n      [readonly]=\"readonly\"\r\n      class=\"form-control\"\r\n    />\r\n  </ng-template>\r\n\r\n  <ng-template ngSwitchCase=\"hidden\">\r\n    <input [formControlName]=\"prop.name\" type=\"hidden\" />\r\n  </ng-template>\r\n\r\n  <ng-template ngSwitchCase=\"checkbox\">\r\n    <div class=\"form-check\" validationTarget>\r\n      <input\r\n        #field\r\n        [id]=\"prop.id\"\r\n        [formControlName]=\"prop.name\"\r\n        [abpDisabled]=\"disabled\"\r\n        type=\"checkbox\"\r\n        class=\"form-check-input\"\r\n      />\r\n      <ng-template\r\n        [ngTemplateOutlet]=\"label\"\r\n        [ngTemplateOutletContext]=\"{ $implicit: 'form-check-label' }\"\r\n      ></ng-template>\r\n    </div>\r\n  </ng-template>\r\n\r\n  <ng-template ngSwitchCase=\"select\">\r\n    <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n    <select\r\n      #field\r\n      [id]=\"prop.id\"\r\n      [formControlName]=\"prop.name\"\r\n      [abpDisabled]=\"disabled\"\r\n      class=\"form-select form-control\"\r\n    >\r\n      <option\r\n        *ngFor=\"let option of options$ | async; trackBy: track.by('value')\"\r\n        [ngValue]=\"option.value\"\r\n      >\r\n        {{ option.key }}\r\n      </option>\r\n    </select>\r\n  </ng-template>\r\n\r\n  <ng-template ngSwitchCase=\"multiselect\">\r\n    <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n    <select\r\n      #field\r\n      [id]=\"prop.id\"\r\n      [formControlName]=\"prop.name\"\r\n      [abpDisabled]=\"disabled\"\r\n      multiple=\"multiple\"\r\n      class=\"form-select form-control\"\r\n    >\r\n      <option\r\n        *ngFor=\"let option of options$ | async; trackBy: track.by('value')\"\r\n        [ngValue]=\"option.value\"\r\n      >\r\n        {{ option.key }}\r\n      </option>\r\n    </select>\r\n  </ng-template>\r\n\r\n  <ng-template ngSwitchCase=\"typeahead\">\r\n    <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n    <div #typeahead class=\"position-relative\" validationStyle validationTarget>\r\n      <input\r\n        #field\r\n        [id]=\"prop.id\"\r\n        [autocomplete]=\"prop.autocomplete\"\r\n        [abpDisabled]=\"disabled\"\r\n        [ngbTypeahead]=\"search\"\r\n        [editable]=\"false\"\r\n        [inputFormatter]=\"typeaheadFormatter\"\r\n        [resultFormatter]=\"typeaheadFormatter\"\r\n        [ngModelOptions]=\"{ standalone: true }\"\r\n        [(ngModel)]=\"typeaheadModel\"\r\n        (selectItem)=\"setTypeaheadValue($event.item)\"\r\n        (blur)=\"setTypeaheadValue(typeaheadModel)\"\r\n        [class.is-invalid]=\"typeahead.classList.contains('is-invalid')\"\r\n        class=\"form-control\"\r\n      />\r\n      <input [formControlName]=\"prop.name\" type=\"hidden\" />\r\n    </div>\r\n  </ng-template>\r\n\r\n  <ng-template ngSwitchCase=\"date\">\r\n    <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n    <input\r\n      [id]=\"prop.id\"\r\n      [formControlName]=\"prop.name\"\r\n      (click)=\"datepicker.open()\"\r\n      (keyup.space)=\"datepicker.open()\"\r\n      ngbDatepicker\r\n      #datepicker=\"ngbDatepicker\"\r\n      type=\"text\"\r\n      class=\"form-control\"\r\n    />\r\n  </ng-template>\r\n\r\n  <ng-template ngSwitchCase=\"time\">\r\n    <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n    <ngb-timepicker [formControlName]=\"prop.name\"></ngb-timepicker>\r\n  </ng-template>\r\n\r\n  <ng-template ngSwitchCase=\"dateTime\">\r\n    <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n    <abp-date-time-picker [prop]=\"prop\" [meridian]=\"meridian\"></abp-date-time-picker>\r\n  </ng-template>\r\n\r\n  <ng-template ngSwitchCase=\"textarea\">\r\n    <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n    <textarea\r\n      #field\r\n      [id]=\"prop.id\"\r\n      [formControlName]=\"prop.name\"\r\n      [abpDisabled]=\"disabled\"\r\n      [readonly]=\"readonly\"\r\n      class=\"form-control\"\r\n    ></textarea>\r\n  </ng-template>\r\n</div>\r\n\r\n<ng-template #label let-classes>\r\n  <label [htmlFor]=\"prop.id\" [ngClass]=\"classes || 'form-label'\"\r\n    >{{ prop.displayName | abpLocalization }} {{ asterisk }}</label\r\n  >\r\n</ng-template>\r\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.TrackByService }, { type: i1.ConfigStateService }, { type: i2.FormGroupDirective }]; }, propDecorators: { data: [{
                type: Input
            }], prop: [{
                type: Input
            }], first: [{
                type: Input
            }], fieldRef: [{
                type: ViewChild,
                args: ['field']
            }] } });
function isRequired(validator) {
    return validator === Validators.required || validator === AbpValidators.required;
}
//# sourceMappingURL=data:application/json;base64,
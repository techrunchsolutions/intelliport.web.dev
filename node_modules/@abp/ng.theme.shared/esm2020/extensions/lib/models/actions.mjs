import { LinkedList } from '@abp/utils';
export class ActionList extends LinkedList {
}
export class ActionData {
    get data() {
        return {
            getInjected: this.getInjected,
            index: this.index,
            record: this.record,
        };
    }
}
export class Action {
    constructor(permission, visible = _ => true, action = _ => { }) {
        this.permission = permission;
        this.visible = visible;
        this.action = action;
    }
}
export class ActionsFactory {
    constructor() {
        this.contributorCallbacks = {};
    }
    get(name) {
        this.contributorCallbacks[name] = this.contributorCallbacks[name] || [];
        return new this._ctor(this.contributorCallbacks[name]);
    }
}
export class Actions {
    constructor(callbackList) {
        this.callbackList = callbackList;
    }
    get actions() {
        const actionList = new this._ctor();
        this.callbackList.forEach(callback => callback(actionList));
        return actionList;
    }
    addContributor(contributeCallback) {
        this.callbackList.push(contributeCallback);
    }
    clearContributors() {
        while (this.callbackList.length)
            this.callbackList.pop();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3RoZW1lLXNoYXJlZC9leHRlbnNpb25zL3NyYy9saWIvbW9kZWxzL2FjdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUl4QyxNQUFNLE9BQWdCLFVBQW1DLFNBQVEsVUFBYTtDQUFHO0FBRWpGLE1BQU0sT0FBZ0IsVUFBVTtJQVM5QixJQUFJLElBQUk7UUFDTixPQUFPO1lBQ0wsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQzdCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07U0FDcEIsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQUlELE1BQU0sT0FBZ0IsTUFBTTtJQUMxQixZQUNrQixVQUFrQixFQUNsQixVQUE4QixDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFDdkMsU0FBNEIsQ0FBQyxDQUFDLEVBQUUsR0FBRSxDQUFDO1FBRm5DLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDbEIsWUFBTyxHQUFQLE9BQU8sQ0FBZ0M7UUFDdkMsV0FBTSxHQUFOLE1BQU0sQ0FBNkI7SUFDbEQsQ0FBQztDQUNMO0FBS0QsTUFBTSxPQUFnQixjQUFjO0lBQXBDO1FBRVUseUJBQW9CLEdBQXNELEVBQUUsQ0FBQztJQU92RixDQUFDO0lBTEMsR0FBRyxDQUFDLElBQVk7UUFDZCxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUV4RSxPQUFPLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQWdCLE9BQU87SUFXM0IsWUFBNkIsWUFBNEM7UUFBNUMsaUJBQVksR0FBWixZQUFZLENBQWdDO0lBQUcsQ0FBQztJQVI3RSxJQUFJLE9BQU87UUFDVCxNQUFNLFVBQVUsR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUVwQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBRTVELE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFJRCxjQUFjLENBQUMsa0JBQWdEO1FBQzdELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELGlCQUFpQjtRQUNmLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNO1lBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUMzRCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMaW5rZWRMaXN0IH0gZnJvbSAnQGFicC91dGlscyc7XHJcbmltcG9ydCB7IEluamVjdEZsYWdzLCBJbmplY3Rpb25Ub2tlbiwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPIH0gZnJvbSAndHMtdG9vbGJlbHQnO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFjdGlvbkxpc3Q8UiA9IGFueSwgQSA9IEFjdGlvbjxSPj4gZXh0ZW5kcyBMaW5rZWRMaXN0PEE+IHt9XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWN0aW9uRGF0YTxSID0gYW55PiB7XHJcbiAgYWJzdHJhY3QgZ2V0SW5qZWN0ZWQ6IDxUPihcclxuICAgIHRva2VuOiBUeXBlPFQ+IHwgSW5qZWN0aW9uVG9rZW48VD4sXHJcbiAgICBub3RGb3VuZFZhbHVlPzogVCxcclxuICAgIGZsYWdzPzogSW5qZWN0RmxhZ3MsXHJcbiAgKSA9PiBUO1xyXG4gIGluZGV4PzogbnVtYmVyO1xyXG4gIGFic3RyYWN0IHJlY29yZDogUjtcclxuXHJcbiAgZ2V0IGRhdGEoKTogUmVhZG9ubHlBY3Rpb25EYXRhPFI+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGdldEluamVjdGVkOiB0aGlzLmdldEluamVjdGVkLFxyXG4gICAgICBpbmRleDogdGhpcy5pbmRleCxcclxuICAgICAgcmVjb3JkOiB0aGlzLnJlY29yZCxcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBSZWFkb25seUFjdGlvbkRhdGE8UiA9IGFueT4gPSBPLlJlYWRvbmx5PE9taXQ8QWN0aW9uRGF0YTxSPiwgJ2RhdGEnPj47XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWN0aW9uPFIgPSBhbnk+IHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyByZWFkb25seSBwZXJtaXNzaW9uOiBzdHJpbmcsXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdmlzaWJsZTogQWN0aW9uUHJlZGljYXRlPFI+ID0gXyA9PiB0cnVlLFxyXG4gICAgcHVibGljIHJlYWRvbmx5IGFjdGlvbjogQWN0aW9uQ2FsbGJhY2s8Uj4gPSBfID0+IHt9LFxyXG4gICkge31cclxufVxyXG5cclxuZXhwb3J0IHR5cGUgQWN0aW9uQ2FsbGJhY2s8VCwgUiA9IGFueT4gPSAoZGF0YTogT21pdDxBY3Rpb25EYXRhPFQ+LCAnZGF0YSc+KSA9PiBSO1xyXG5leHBvcnQgdHlwZSBBY3Rpb25QcmVkaWNhdGU8VD4gPSAoZGF0YT86IE9taXQ8QWN0aW9uRGF0YTxUPiwgJ2RhdGEnPikgPT4gYm9vbGVhbjtcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBY3Rpb25zRmFjdG9yeTxDIGV4dGVuZHMgQWN0aW9uczxhbnk+PiB7XHJcbiAgcHJvdGVjdGVkIGFic3RyYWN0IF9jdG9yOiBUeXBlPEM+O1xyXG4gIHByaXZhdGUgY29udHJpYnV0b3JDYWxsYmFja3M6IEFjdGlvbkNvbnRyaWJ1dG9yQ2FsbGJhY2tzPEluZmVycmVkQWN0aW9uTGlzdDxDPj4gPSB7fTtcclxuXHJcbiAgZ2V0KG5hbWU6IHN0cmluZyk6IEMge1xyXG4gICAgdGhpcy5jb250cmlidXRvckNhbGxiYWNrc1tuYW1lXSA9IHRoaXMuY29udHJpYnV0b3JDYWxsYmFja3NbbmFtZV0gfHwgW107XHJcblxyXG4gICAgcmV0dXJuIG5ldyB0aGlzLl9jdG9yKHRoaXMuY29udHJpYnV0b3JDYWxsYmFja3NbbmFtZV0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFjdGlvbnM8TCBleHRlbmRzIEFjdGlvbkxpc3Q+IHtcclxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgX2N0b3I6IFR5cGU8TD47XHJcblxyXG4gIGdldCBhY3Rpb25zKCk6IEwge1xyXG4gICAgY29uc3QgYWN0aW9uTGlzdCA9IG5ldyB0aGlzLl9jdG9yKCk7XHJcblxyXG4gICAgdGhpcy5jYWxsYmFja0xpc3QuZm9yRWFjaChjYWxsYmFjayA9PiBjYWxsYmFjayhhY3Rpb25MaXN0KSk7XHJcblxyXG4gICAgcmV0dXJuIGFjdGlvbkxpc3Q7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGNhbGxiYWNrTGlzdDogQWN0aW9uQ29udHJpYnV0b3JDYWxsYmFjazxMPltdKSB7fVxyXG5cclxuICBhZGRDb250cmlidXRvcihjb250cmlidXRlQ2FsbGJhY2s6IEFjdGlvbkNvbnRyaWJ1dG9yQ2FsbGJhY2s8TD4pIHtcclxuICAgIHRoaXMuY2FsbGJhY2tMaXN0LnB1c2goY29udHJpYnV0ZUNhbGxiYWNrKTtcclxuICB9XHJcblxyXG4gIGNsZWFyQ29udHJpYnV0b3JzKCkge1xyXG4gICAgd2hpbGUgKHRoaXMuY2FsbGJhY2tMaXN0Lmxlbmd0aCkgdGhpcy5jYWxsYmFja0xpc3QucG9wKCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBBY3Rpb25Db250cmlidXRvckNhbGxiYWNrczxMIGV4dGVuZHMgQWN0aW9uTGlzdDxhbnk+PiA9IFJlY29yZDxcclxuICBzdHJpbmcsXHJcbiAgQWN0aW9uQ29udHJpYnV0b3JDYWxsYmFjazxMPltdXHJcbj47XHJcblxyXG5leHBvcnQgdHlwZSBBY3Rpb25Db250cmlidXRvckNhbGxiYWNrPEwgZXh0ZW5kcyBBY3Rpb25MaXN0PGFueT4+ID0gKGFjdGlvbkxpc3Q6IEwpID0+IGFueTtcclxuXHJcbnR5cGUgSW5mZXJyZWRBY3Rpb25MaXN0PEM+ID0gQyBleHRlbmRzIEFjdGlvbnM8aW5mZXIgTD4gPyBMIDogbmV2ZXI7XHJcbiJdfQ==
import { InjectionToken } from '@angular/core';
import { ActionCallback } from '../models/actions';
import { ExtensionsService } from '../services/extensions.service';
import { Observable } from 'rxjs';
import { ePropType } from '../enums/props.enum';
export declare const EXTENSIONS_IDENTIFIER: InjectionToken<string>;
export declare type ActionKeys = Extract<'entityActions' | 'toolbarActions', keyof ExtensionsService>;
export declare const EXTENSIONS_ACTION_TYPE: InjectionToken<ActionKeys>;
export declare const EXTENSIONS_ACTION_DATA: InjectionToken<{
    readonly index?: number;
    readonly record: any;
    readonly getInjected: <T>(token: import("@angular/core").Type<T> | InjectionToken<T>, notFoundValue?: T, flags?: import("@angular/core").InjectFlags) => T;
}>;
export declare const EXTENSIONS_ACTION_CALLBACK: InjectionToken<ActionCallback<unknown, any>>;
export declare const PROP_DATA_STREAM: InjectionToken<Observable<any>>;
declare type EntityPropTypeClassMap = {
    [key in ePropType]: string;
};
export declare type EntityPropTypeClass = Partial<EntityPropTypeClassMap>;
export declare const ENTITY_PROP_TYPE_CLASSES: InjectionToken<Partial<EntityPropTypeClassMap>>;
export {};

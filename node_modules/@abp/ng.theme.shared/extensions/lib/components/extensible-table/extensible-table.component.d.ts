import { ConfigStateService, ListService } from '@abp/ng.core';
import { InjectFlags, InjectionToken, Injector, OnChanges, SimpleChanges, TemplateRef, TrackByFunction, Type } from '@angular/core';
import { Observable } from 'rxjs';
import { EntityActionList } from '../../models/entity-actions';
import { EntityProp, EntityPropList } from '../../models/entity-props';
import { PropData } from '../../models/props';
import { EntityPropTypeClass } from '../../tokens/extensions.token';
import * as i0 from "@angular/core";
export declare class ExtensibleTableComponent<R = any> implements OnChanges {
    private locale;
    private config;
    private injector;
    protected _actionsText: string;
    set actionsText(value: string);
    get actionsText(): string;
    data: R[];
    list: ListService;
    recordsTotal: number;
    set actionsColumnWidth(width: number);
    actionsTemplate: TemplateRef<any>;
    getInjected: <T>(token: Type<T> | InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags) => T;
    hasAtLeastOnePermittedAction: boolean;
    entityPropTypeClasses: EntityPropTypeClass;
    readonly columnWidths: number[];
    readonly propList: EntityPropList<R>;
    readonly actionList: EntityActionList<R>;
    readonly trackByFn: TrackByFunction<EntityProp<R>>;
    constructor(locale: string, config: ConfigStateService, injector: Injector);
    private setColumnWidths;
    private getDate;
    private getIcon;
    private getEnum;
    getContent(prop: EntityProp<R>, data: PropData): Observable<string>;
    ngOnChanges({ data }: SimpleChanges): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ExtensibleTableComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ExtensibleTableComponent<any>, "abp-extensible-table", ["abpExtensibleTable"], { "actionsText": "actionsText"; "data": "data"; "list": "list"; "recordsTotal": "recordsTotal"; "actionsColumnWidth": "actionsColumnWidth"; "actionsTemplate": "actionsTemplate"; }, {}, never, never>;
}

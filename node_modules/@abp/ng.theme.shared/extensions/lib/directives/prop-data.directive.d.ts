import { Injector, OnChanges, OnDestroy, TemplateRef, ViewContainerRef } from '@angular/core';
import { PropData, PropList } from '../models/props';
import * as i0 from "@angular/core";
export declare class PropDataDirective<L extends PropList<any>> extends PropData<InferredData<L>> implements OnChanges, OnDestroy {
    private tempRef;
    private vcRef;
    propList?: L;
    record: InferredData<L>['record'];
    index?: number;
    readonly getInjected: InferredData<L>['getInjected'];
    constructor(tempRef: TemplateRef<any>, vcRef: ViewContainerRef, injector: Injector);
    ngOnChanges(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PropDataDirective<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<PropDataDirective<any>, "[abpPropData]", ["abpPropData"], { "propList": "abpPropDataFromList"; "record": "abpPropDataWithRecord"; "index": "abpPropDataAtIndex"; }, {}, never>;
}
declare type InferredData<L> = PropData<InferredRecord<L>>;
declare type InferredRecord<L> = L extends PropList<infer R> ? R : never;
export {};

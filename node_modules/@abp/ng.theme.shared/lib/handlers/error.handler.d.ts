import { HttpErrorReporterService, LocalizationParam, RouterEvents } from '@abp/ng.core';
import { HttpErrorResponse } from '@angular/common/http';
import { ComponentFactoryResolver, ComponentRef, Injector, RendererFactory2 } from '@angular/core';
import { NavigationError } from '@angular/router';
import { Observable } from 'rxjs';
import { HttpErrorWrapperComponent } from '../components/http-error-wrapper/http-error-wrapper.component';
import { ErrorScreenErrorCodes, HttpErrorConfig } from '../models/common';
import { Confirmation } from '../models/confirmation';
import { ConfirmationService } from '../services/confirmation.service';
import * as i0 from "@angular/core";
export declare const DEFAULT_ERROR_MESSAGES: {
    defaultError: {
        title: string;
        details: string;
    };
    defaultError401: {
        title: string;
        details: string;
    };
    defaultError403: {
        title: string;
        details: string;
    };
    defaultError404: {
        title: string;
        details: string;
    };
    defaultError500: {
        title: string;
        details: string;
    };
};
export declare const DEFAULT_ERROR_LOCALIZATIONS: {
    defaultError: {
        title: string;
        details: string;
    };
    defaultError401: {
        title: string;
        details: string;
    };
    defaultError403: {
        title: string;
        details: string;
    };
    defaultError404: {
        title: string;
        details: string;
    };
    defaultError500: {
        title: string;
        details: string;
    };
};
export declare class ErrorHandler {
    protected injector: Injector;
    componentRef: ComponentRef<HttpErrorWrapperComponent> | null;
    protected httpErrorHandler: import("../models/common").HttpErrorHandler;
    protected httpErrorReporter: HttpErrorReporterService;
    protected routerEvents: RouterEvents;
    protected confirmationService: ConfirmationService;
    protected cfRes: ComponentFactoryResolver;
    protected rendererFactory: RendererFactory2;
    protected httpErrorConfig: HttpErrorConfig;
    constructor(injector: Injector);
    protected listenToRouterError(): void;
    protected listenToRouterDataResolved(): void;
    protected listenToRestError(): void;
    private executeErrorHandler;
    private handleError;
    protected show401Page(): void;
    protected show404Page(): void;
    protected showErrorWithRequestBody(body: any): Observable<Confirmation.Status>;
    protected showError(message: LocalizationParam, title: LocalizationParam): Observable<Confirmation.Status>;
    private navigateToLogin;
    createErrorComponent(instance: Partial<HttpErrorWrapperComponent>): void;
    canCreateCustomError(status: ErrorScreenErrorCodes): boolean;
    protected filterRestErrors: ({ status }: HttpErrorResponse) => boolean;
    protected filterRouteErrors: (navigationError: NavigationError) => boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<ErrorHandler, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ErrorHandler>;
}

import { Injectable, Injector } from '@angular/core';
import { map } from 'rxjs/operators';
import { ActivatedRoute } from '@angular/router';
import { ConfigStateService, MultiTenancyService } from '@abp/ng.core';
import * as i0 from "@angular/core";
import * as i1 from "@abp/ng.core";
export class AuthWrapperService {
    constructor(multiTenancy, configState, injector) {
        this.multiTenancy = multiTenancy;
        this.configState = configState;
        this.isMultiTenancyEnabled$ = this.configState.getDeep$('multiTenancy.isEnabled');
        this.tenantBoxKey = 'Account.TenantBoxComponent';
        this.route = injector.get(ActivatedRoute);
    }
    get enableLocalLogin$() {
        return this.configState
            .getSetting$('Abp.Account.EnableLocalLogin')
            .pipe(map(value => value?.toLowerCase() !== 'false'));
    }
    get isTenantBoxVisibleForCurrentRoute() {
        return this.getMostInnerChild().data.tenantBoxVisible ?? true;
    }
    get isTenantBoxVisible() {
        return this.isTenantBoxVisibleForCurrentRoute && this.multiTenancy.isTenantBoxVisible;
    }
    getMostInnerChild() {
        let child = this.route.snapshot;
        let depth = 0;
        const depthLimit = 10;
        while (child.firstChild && depth < depthLimit) {
            child = child.firstChild;
            depth++;
        }
        return child;
    }
}
AuthWrapperService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: AuthWrapperService, deps: [{ token: i1.MultiTenancyService }, { token: i1.ConfigStateService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
AuthWrapperService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: AuthWrapperService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: AuthWrapperService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.MultiTenancyService }, { type: i1.ConfigStateService }, { type: i0.Injector }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC13cmFwcGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9hY2NvdW50LWNvcmUvc3JjL2xpYi9hdXRoLXdyYXBwZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVyRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7O0FBR3ZFLE1BQU0sT0FBTyxrQkFBa0I7SUFvQjdCLFlBQ2tCLFlBQWlDLEVBQ3pDLFdBQStCLEVBQ3ZDLFFBQWtCO1FBRkYsaUJBQVksR0FBWixZQUFZLENBQXFCO1FBQ3pDLGdCQUFXLEdBQVgsV0FBVyxDQUFvQjtRQXJCekMsMkJBQXNCLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQVE3RSxpQkFBWSxHQUFHLDRCQUE0QixDQUFDO1FBZ0IxQyxJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQXZCRCxJQUFJLGlCQUFpQjtRQUNuQixPQUFPLElBQUksQ0FBQyxXQUFXO2FBQ3BCLFdBQVcsQ0FBQyw4QkFBOEIsQ0FBQzthQUMzQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUtELElBQUksaUNBQWlDO1FBQ25DLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixJQUFJLElBQUksQ0FBQztJQUNoRSxDQUFDO0lBRUQsSUFBSSxrQkFBa0I7UUFDcEIsT0FBTyxJQUFJLENBQUMsaUNBQWlDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQztJQUN4RixDQUFDO0lBVU8saUJBQWlCO1FBQ3ZCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO1FBQ2hDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNkLE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUN0QixPQUFPLEtBQUssQ0FBQyxVQUFVLElBQUksS0FBSyxHQUFHLFVBQVUsRUFBRTtZQUM3QyxLQUFLLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQztZQUN6QixLQUFLLEVBQUUsQ0FBQztTQUNUO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOzsrR0FyQ1Usa0JBQWtCO21IQUFsQixrQkFBa0I7MkZBQWxCLGtCQUFrQjtrQkFEOUIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IENvbmZpZ1N0YXRlU2VydmljZSwgTXVsdGlUZW5hbmN5U2VydmljZSB9IGZyb20gJ0BhYnAvbmcuY29yZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBBdXRoV3JhcHBlclNlcnZpY2Uge1xyXG4gIGlzTXVsdGlUZW5hbmN5RW5hYmxlZCQgPSB0aGlzLmNvbmZpZ1N0YXRlLmdldERlZXAkKCdtdWx0aVRlbmFuY3kuaXNFbmFibGVkJyk7XHJcblxyXG4gIGdldCBlbmFibGVMb2NhbExvZ2luJCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZ1N0YXRlXHJcbiAgICAgIC5nZXRTZXR0aW5nJCgnQWJwLkFjY291bnQuRW5hYmxlTG9jYWxMb2dpbicpXHJcbiAgICAgIC5waXBlKG1hcCh2YWx1ZSA9PiB2YWx1ZT8udG9Mb3dlckNhc2UoKSAhPT0gJ2ZhbHNlJykpO1xyXG4gIH1cclxuXHJcbiAgdGVuYW50Qm94S2V5ID0gJ0FjY291bnQuVGVuYW50Qm94Q29tcG9uZW50JztcclxuICByb3V0ZTogQWN0aXZhdGVkUm91dGU7XHJcblxyXG4gIGdldCBpc1RlbmFudEJveFZpc2libGVGb3JDdXJyZW50Um91dGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRNb3N0SW5uZXJDaGlsZCgpLmRhdGEudGVuYW50Qm94VmlzaWJsZSA/PyB0cnVlO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGlzVGVuYW50Qm94VmlzaWJsZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmlzVGVuYW50Qm94VmlzaWJsZUZvckN1cnJlbnRSb3V0ZSAmJiB0aGlzLm11bHRpVGVuYW5jeS5pc1RlbmFudEJveFZpc2libGU7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyByZWFkb25seSBtdWx0aVRlbmFuY3k6IE11bHRpVGVuYW5jeVNlcnZpY2UsXHJcbiAgICBwcml2YXRlIGNvbmZpZ1N0YXRlOiBDb25maWdTdGF0ZVNlcnZpY2UsXHJcbiAgICBpbmplY3RvcjogSW5qZWN0b3IsXHJcbiAgKSB7XHJcbiAgICB0aGlzLnJvdXRlID0gaW5qZWN0b3IuZ2V0KEFjdGl2YXRlZFJvdXRlKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0TW9zdElubmVyQ2hpbGQoKSB7XHJcbiAgICBsZXQgY2hpbGQgPSB0aGlzLnJvdXRlLnNuYXBzaG90O1xyXG4gICAgbGV0IGRlcHRoID0gMDtcclxuICAgIGNvbnN0IGRlcHRoTGltaXQgPSAxMDtcclxuICAgIHdoaWxlIChjaGlsZC5maXJzdENoaWxkICYmIGRlcHRoIDwgZGVwdGhMaW1pdCkge1xyXG4gICAgICBjaGlsZCA9IGNoaWxkLmZpcnN0Q2hpbGQ7XHJcbiAgICAgIGRlcHRoKys7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY2hpbGQ7XHJcbiAgfVxyXG59XHJcbiJdfQ==
import { RestService } from '@abp/ng.core';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@abp/ng.core";
export class AccountService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpAccount';
        this.register = (input) => this.restService.request({
            method: 'POST',
            url: '/api/account/register',
            body: input,
        }, { apiName: this.apiName });
        this.resetPassword = (input) => this.restService.request({
            method: 'POST',
            url: '/api/account/reset-password',
            body: input,
        }, { apiName: this.apiName });
        this.sendPasswordResetCode = (input) => this.restService.request({
            method: 'POST',
            url: '/api/account/send-password-reset-code',
            body: input,
        }, { apiName: this.apiName });
    }
}
AccountService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: AccountService, deps: [{ token: i1.RestService }], target: i0.ɵɵFactoryTarget.Injectable });
AccountService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: AccountService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: AccountService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.RestService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYWNjb3VudC1jb3JlL3Byb3h5L3NyYy9saWIvcHJveHkvYWNjb3VudC9hY2NvdW50LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7QUFNM0MsTUFBTSxPQUFPLGNBQWM7SUEyQnpCLFlBQW9CLFdBQXdCO1FBQXhCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBMUI1QyxZQUFPLEdBQUcsWUFBWSxDQUFDO1FBRXZCLGFBQVEsR0FBRyxDQUFDLEtBQWtCLEVBQUUsRUFBRSxDQUNoQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBdUI7WUFDN0MsTUFBTSxFQUFFLE1BQU07WUFDZCxHQUFHLEVBQUUsdUJBQXVCO1lBQzVCLElBQUksRUFBRSxLQUFLO1NBQ1osRUFDRCxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUU3QixrQkFBYSxHQUFHLENBQUMsS0FBdUIsRUFBRSxFQUFFLENBQzFDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFZO1lBQ2xDLE1BQU0sRUFBRSxNQUFNO1lBQ2QsR0FBRyxFQUFFLDZCQUE2QjtZQUNsQyxJQUFJLEVBQUUsS0FBSztTQUNaLEVBQ0QsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFFN0IsMEJBQXFCLEdBQUcsQ0FBQyxLQUErQixFQUFFLEVBQUUsQ0FDMUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQVk7WUFDbEMsTUFBTSxFQUFFLE1BQU07WUFDZCxHQUFHLEVBQUUsdUNBQXVDO1lBQzVDLElBQUksRUFBRSxLQUFLO1NBQ1osRUFDRCxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUVrQixDQUFDOzsyR0EzQnJDLGNBQWM7K0dBQWQsY0FBYyxjQUZiLE1BQU07MkZBRVAsY0FBYztrQkFIMUIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlZ2lzdGVyRHRvLCBSZXNldFBhc3N3b3JkRHRvLCBTZW5kUGFzc3dvcmRSZXNldENvZGVEdG8gfSBmcm9tICcuL21vZGVscyc7XHJcbmltcG9ydCB7IFJlc3RTZXJ2aWNlIH0gZnJvbSAnQGFicC9uZy5jb3JlJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgdHlwZSB7IElkZW50aXR5VXNlckR0byB9IGZyb20gJy4uL2lkZW50aXR5L21vZGVscyc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQWNjb3VudFNlcnZpY2Uge1xyXG4gIGFwaU5hbWUgPSAnQWJwQWNjb3VudCc7XHJcblxyXG4gIHJlZ2lzdGVyID0gKGlucHV0OiBSZWdpc3RlckR0bykgPT5cclxuICAgIHRoaXMucmVzdFNlcnZpY2UucmVxdWVzdDxhbnksIElkZW50aXR5VXNlckR0bz4oe1xyXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgdXJsOiAnL2FwaS9hY2NvdW50L3JlZ2lzdGVyJyxcclxuICAgICAgYm9keTogaW5wdXQsXHJcbiAgICB9LFxyXG4gICAgeyBhcGlOYW1lOiB0aGlzLmFwaU5hbWUgfSk7XHJcblxyXG4gIHJlc2V0UGFzc3dvcmQgPSAoaW5wdXQ6IFJlc2V0UGFzc3dvcmREdG8pID0+XHJcbiAgICB0aGlzLnJlc3RTZXJ2aWNlLnJlcXVlc3Q8YW55LCB2b2lkPih7XHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICB1cmw6ICcvYXBpL2FjY291bnQvcmVzZXQtcGFzc3dvcmQnLFxyXG4gICAgICBib2R5OiBpbnB1dCxcclxuICAgIH0sXHJcbiAgICB7IGFwaU5hbWU6IHRoaXMuYXBpTmFtZSB9KTtcclxuXHJcbiAgc2VuZFBhc3N3b3JkUmVzZXRDb2RlID0gKGlucHV0OiBTZW5kUGFzc3dvcmRSZXNldENvZGVEdG8pID0+XHJcbiAgICB0aGlzLnJlc3RTZXJ2aWNlLnJlcXVlc3Q8YW55LCB2b2lkPih7XHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICB1cmw6ICcvYXBpL2FjY291bnQvc2VuZC1wYXNzd29yZC1yZXNldC1jb2RlJyxcclxuICAgICAgYm9keTogaW5wdXQsXHJcbiAgICB9LFxyXG4gICAgeyBhcGlOYW1lOiB0aGlzLmFwaU5hbWUgfSk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVzdFNlcnZpY2U6IFJlc3RTZXJ2aWNlKSB7fVxyXG59XHJcbiJdfQ==